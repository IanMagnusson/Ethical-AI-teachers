task_id,solution,base_status,plus_status,base_fail_tests,plus_fail_tests,gt_solution,question_prompt,entry_point
Mbpp/3,"def is_not_prime(n):
    """"""
    Determines if a number is not prime.
    
    :param int n: The number to check for primality.
    :return bool: True if the number is not prime, False otherwise.
    """"""
    # Base cases
    if n <= 1:
        return False
    if n <= 3:
        return True
    
    # Check divisibility up to the square root of n
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return True
    
    return False",fail,fail,[[1]],[[True]],"
import math
def is_not_prime(n):
    if n == 1:
        return True
    for i in range(2, int(math.sqrt(n))+1):
        if n % i == 0:
            return True
    return False
","""""""
Write a python function to identify non-prime numbers.
assert is_not_prime(2) == False
""""""
",is_not_prime
Mbpp/4,"import heapq
def heap_queue_largest(numbers, n):
    """"""
    Returns the n largest integers from a given list of numbers in descending order.
    
    :param numbers: List of integers.
    :param n: The number of largest integers to return.
    :return: List of n largest integers in descending order.
    """"""
    # Convert the list to a min-heap (which is a max-queue when accessed in reverse)
    heapq.heapify(numbers)
    
    # Extract the top n elements from the heap
    result = [heapq.heappop(numbers) for _ in range(n)]
    
    return result",fail,fail,"[[[25, 35, 22, 85, 14, 65, 75, 22, 58], 3]]","[[[9, 8, 7, 6, 5, 4, 3, 2, 1], 3]]","
import heapq as hq
def heap_queue_largest(nums: list,n: int) -> list:
  largest_nums = hq.nlargest(n, nums)
  return largest_nums
","""""""
Write a function to find the n largest integers from a given list of numbers, returned in descending order.
assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]
""""""
",heap_queue_largest
Mbpp/12,"def sort_matrix(matrix):
    # Calculate the sum of each row
    row_sums = [sum(row) for row in matrix]
    
    # Sort the matrix based on the row sums in ascending order
    sorted_matrix = sorted(matrix, key=lambda x: row_sums.index(x[0]))
    
    return sorted_matrix",fail,fail,"[[[[1, 2, 3], [2, 4, 5], [1, 1, 1]]]]","[[[[-5, -8, -9], [-6, -4, -3], [-2, -1, -4]]]]","
def sort_matrix(M):
    result = sorted(M, key=sum)
    return result
","""""""
Write a function to sort a given matrix in ascending order according to the sum of its rows.
assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]
""""""
",sort_matrix
Mbpp/6,"def differ_At_One_Bit_Pos(a, b):
    """"""
    Check if two numbers differ at exactly one bit position.
    
    Args:
        a (int): The first number.
        b (int): The second number.
        
    Returns:
        bool: True if the numbers differ at exactly one bit position, False otherwise.
    """"""
    # Convert numbers to binary strings
    a_bin = bin(a)[2:]  # bin() returns '0bxxxx', so [2:] to remove '0b'
    b_bin = bin(b)[2:]  # similarly for b
    
    # Compare the binary strings character by character
    # If they differ at exactly one position, the lengths will be equal and there will be one position where they differ
    return len(a_bin) == len(b_bin) and (a_bin != b_bin)",fail,fail,"[[15, 8]]","[[-101, -100]]","
def is_Power_Of_Two(x: int): 
    return x > 0 and (x & (x - 1)) == 0
def differ_At_One_Bit_Pos(a: int,b: int):
    return is_Power_Of_Two(a ^ b)
","""""""
Write a python function to check whether the two numbers differ at one bit position only or not.
assert differ_At_One_Bit_Pos(13,9) == True
""""""
",differ_At_One_Bit_Pos
Mbpp/57,"def find_Max_Num(digits):
    """"""
    Finds the largest possible number that can be formed using the digits in the list.
    """"""
    # Sort the digits in descending order
    digits.sort(reverse=True)
    
    # Initialize the result with the first digit
    max_num = digits[0]
    
    # Iterate through the remaining digits
    for digit in digits[1:]:
        # If the current digit is greater than the last digit in max_num, update max_num
        if digit > max_num[-1]:
            max_num = digit + max_num
    
    return max_num",fail,fail,"[[[1, 2, 3]]]","[[[9, 3, 2, 1]]]","
def find_Max_Num(arr) : 
    arr.sort(reverse = True)
    return int("""".join(map(str,arr)))
","""""""
Write a python function to find the largest number that can be formed with the given list of digits.
assert find_Max_Num([1,2,3]) == 321
""""""
",find_Max_Num
Mbpp/9,"def find_rotations(s):
    """"""
    Finds the minimum number of rotations (greater than 0) required to get the same string.
    """"""
    # Convert the string to a list to easily handle rotations
    s_list = list(s)
    
    # Initialize the minimum rotations to a large number
    min_rotations = float('inf')
    
    # Iterate over all possible starting indices
    for i in range(len(s)):
        # Generate all rotations starting from the current index
        rotations = [s_list[j:] + s_list[:j] for j in range(len(s))]
        
        # Check if any rotation is equal to the original string
        for rotation in rotations:
            if rotation == s:
                # Update the minimum rotations if a shorter rotation sequence is found
                min_rotations = min(min_rotations, len(rotations))
    
    return min_rotations

# Test cases
assert find_rotations(""aaaa"") == 1
assert find_rotations(""abab"") == 1
assert find_rotations(""abcabc"") == 2
assert find_rotations(""abcd"") == 0  # No rotation needed since it's already a palindrome",fail,fail,[],[],"
def find_Rotations(s): 
    n = len(s)
    s += s
    for i in range(1, n + 1):
        if s[i: i + n] == s[0: n]:
            return i
    return n
","""""""
Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.
assert find_Rotations(""aaaa"") == 1
""""""
",find_Rotations
Mbpp/61,"def count_Substrings(s):
    # Initialize a counter for valid substrings
    count = 0
    
    # Iterate over the string from index 0 to the second last
    for i in range(len(s) - 1):
        # Calculate the sum of the digits of the current substring
        digit_sum = sum(int(digit) for digit in s[i: i + len(s)])
        
        # Check if the sum of digits equals the length of the substring
        if digit_sum == len(s[i: i + len(s)]):
            count += 1
    
    return count",fail,fail,[['112112']],[['12233445566778899']],"
from collections import defaultdict
def count_Substrings(s):
    n, count, sum = len(s), 0, 0
    mp = defaultdict(lambda : 0)
    mp[0] += 1
    for i in range(n):
        sum += ord(s[i]) - ord('0')
        count += mp[sum - i - 1]
        mp[sum - i - 1] += 1
    return count
","""""""
Write a python function to count the number of substrings with the sum of digits equal to their length.
assert count_Substrings('112112') == 6
""""""
",count_Substrings
Mbpp/16,"def contains_lowercase_underscore(text):
    """"""
    Returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.
    """"""
    # Split the string into parts using underscores as separators
    parts = text.split('_')
    
    # Check if there are at least two parts (indicating a sequence of letters joined by underscores)
    if len(parts) < 2:
        return False
    
    # Iterate through each part to check if it contains only lowercase letters
    for part in parts:
        if not part.islower():
            return False
    
    return True

# Test cases",fail,fail,[],[],"
import re
def text_lowercase_underscore(text):
        return bool(re.match('^[a-z]+(_[a-z]+)*$', text))
","""""""
Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.
assert text_lowercase_underscore(""aab_cbbbc"")==(True)
""""""
",text_lowercase_underscore
Mbpp/63,"def max_difference(tuples):
    if not tuples:
        return 0
    
    max_diff = 0
    for t1, t2 in zip(tuples, tuples[1:]):
        diff = abs(t1[0] - t2[0]) + abs(t1[1] - t2[1])
        max_diff = max(max_diff, diff)
    
    return max_diff",fail,fail,"[[[[3, 5], [1, 7], [10, 3], [1, 2]]]]","[[[[1000000, 999999], [10000000, 9999999], [100000000, 99999999], [1000000000, 999999999]]]]","
def max_difference(test_list):
  return max(abs(a - b) for a, b in test_list)
","""""""
Write a function to find the maximum difference between available pairs in the given tuple list.
assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7
""""""
",max_difference
Mbpp/64,"subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]",fail,fail,"[[[['English', 88], ['Science', 90], ['Maths', 97], ['Social sciences', 82]]]]",[[[]]],"
def subject_marks(subjectmarks):
#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])
 subjectmarks.sort(key = lambda x: x[1])
 return subjectmarks
","""""""
Write a function to sort a list of tuples using the second value of each tuple.
assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]
""""""
",subject_marks
Mbpp/59,"def is_octagonal(n):
    """"""Check if a number is an octagonal number.""""""
    # An octagonal number is of the form 2*1^2 + 1*3^2 = 1*2 + 1*9 = 2 + 9 = 11n + 2
    return (n * 2) + (n * (n - 1)) // 2 == 11 * (n + 1) + 2",fail,fail,[[5]],[[100]],"
def is_octagonal(n): 
	return 3 * n * n - 2 * n 
","""""""
Write a function to find the nth octagonal number.
assert is_octagonal(5) == 65
""""""
",is_octagonal
Mbpp/11,"def remove_Occ(string, char):
    """"""
    Remove the first and last occurrences of a given character from the string.
    
    Args:
        string (str): The input string.
        char (char): The character to be removed from the string.
        
    Returns:
        str: The string after removing the first and last occurrences of the given character.
    """"""
    # Check if the string is empty or the character is not present
    if not string or char not in string:
        return string
    
    # Remove the first and last occurrences
    string = string[1:-1]
    
    return string",fail,fail,"[['hello', 'l']]","[['worlda', 'a']]","
def remove_Occ(s,ch): 
    s = s.replace(ch, '', 1)
    s = s[::-1].replace(ch, '', 1)[::-1]
    return s 
","""""""
Write a python function to remove first and last occurrence of a given character from the string.
assert remove_Occ(""hello"",""l"") == ""heo""
""""""
",remove_Occ
Mbpp/7,"def find_char_long(text):
    # Split the text into words
    words = text.split()
    
    # Filter words that are at least 4 characters long
    long_words = [word for word in words if len(word) >= 4]
    
    # Convert the list to a set for unique words
    unique_long_words = set(long_words)
    
    return unique_long_words",pass,fail,[],[['This is a very long string with no words that are at least 4 characters long.']],"
import re
def find_char_long(text):
  return (re.findall(r""\b\w{4,}\b"", text))
","""""""
Write a function to find all words which are at least 4 characters long in a string.
assert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])
""""""
",find_char_long
Mbpp/69,"def is_sublist(sublist, main_list):
    """"""
    Check if the given sublist is a subset of the main list.
    
    Args:
        sublist (list): The sublist to be checked.
        main_list (list): The main list to check against.
        
    Returns:
        bool: True if sublist is a subset of main_list, False otherwise.
    """"""
    # Convert both lists to sets to efficiently check for subset relationship
    sublist_set = set(sublist)
    main_list_set = set(main_list)
    
    # Check if every element of the sublist_set is in main_list_set
    return sublist_set.issubset(main_list_set)",fail,fail,"[[[2, 4, 3, 5, 7], [4, 3]]]","[[[], [1]]]","
def is_sublist(l, s):
	if len(l) < len(s):
		return False
	return any(l[i:i+len(s)] == s for i in range(len(l)-len(s)+1))
","""""""
Write a function to check whether a list contains the given sublist or not.
assert is_sublist([2,4,3,5,7],[3,7])==False
""""""
",is_sublist
Mbpp/19,"def has_duplicates(lst):
    # Create an empty set to store unique elements
    unique_elements = set()
    
    # Iterate through the list
    for element in lst:
        # If the element is already in the set, it's a duplicate
        if element in unique_elements:
            return True
        # Otherwise, add it to the set
        unique_elements.add(element)
    
    # If we've gone through the entire list without finding duplicates
    return False

# Test the function
assert has_duplicates([1, 2, 3, 4, 5]) == False
assert has_duplicates([1, 1, 2, 3, 4, 5]) == True",fail,fail,[],[],"
def test_duplicate(arraynums):
    return len(arraynums) != len(set(arraynums))
","""""""
Write a function to find whether a given array of integers contains any duplicate element.
assert test_duplicate(([1,2,3,4,5]))==False
""""""
",test_duplicate
Mbpp/14,"def find_Volume(base, height, length):
    # The volume V of a triangular prism is given by the formula:
    # V = base * height * length
    return base * height * length",fail,fail,"[[10, 8, 6]]","[[100, 50, 10]]","
def find_Volume(l,b,h) : 
    return ((l * b * h) / 2) 
","""""""
Write a python function to find the volume of a triangular prism.
assert find_Volume(10,8,6) == 240
""""""
",find_Volume
Mbpp/67,"def bell_number(n):
    """"""Calculate the nth Bell number.""""""
    bell = [1]  # Initialize with the first Bell number (B0 = 1)
    for i in range(1, n + 1):
        bell.append(sum(bell[:i]))
    return bell[n]",fail,fail,[[10]],[[100]],"
def bell_number(n):   
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1): 
        bell[i][0] = bell[i-1][i-1]  
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   
    return bell[n][0] 
","""""""
Write a function to find the number of ways to partition a set of Bell numbers.
assert bell_number(2)==2
""""""
",bell_number
Mbpp/72,"def dif_Square(n):
    """"""
    Check if a given number can be represented as the difference of two squares.
    
    Args:
        n (int): The number to be checked.
        
    Returns:
        bool: True if n can be represented as the difference of two squares, False otherwise.
    """"""
    # Check if n is a perfect square
    root_n = int(n ** 0.5)
    if root_n * root_n != n:
        return False
    
    # Check if (root_n + x) ** 2 - (root_n - x) ** 2 = n
    # Simplifies to (2 * root_n * x) ** 2 = n
    # Therefore, x must be an integer such that n / (2 * root_n ** 2) is an integer
    for x in range(-root_n, root_n + 1):
        if (n / (2 * root_n ** 2)) % 1 == 0:
            return True
    
    return False",fail,fail,[[5]],[[991]],"
def dif_Square(n): 
    # see https://www.quora.com/Which-numbers-can-be-expressed-as-the-difference-of-two-squares
    return n % 4 != 2
","""""""
Write a python function to check whether the given number can be represented as the difference of two squares or not.
assert dif_Square(5) == True
""""""
",dif_Square
Mbpp/93,"def power(a, b):
    """"""
    Calculate the value of 'a' to the power 'b'.
    """"""
    if b == 0:
        return 1  # Handling the case where any number to the power 0 is 1
    elif b == 1:
        return a  # Any number to the power 1 is itself
    else:
        result = 1
        while b > 0:
            if b % 2 == 1:  # odd number
                result *= a
            a *= a  # square the base
            b //= 2  # divide the exponent by 2
        return result",pass,fail,[],"[[4, -2]]","
def power(a, b):
	return a ** b
","""""""
Write a function to calculate the value of 'a' to the power 'b'.
assert power(3,4) == 81
""""""
",power
Mbpp/84,"def sequence(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        a, b = 0, 1
        for _ in range(2, n):
            a, b = b, a + b
        return b",fail,fail,[[10]],[[100]],"
def sequence(n): 
	if n == 1 or n == 2: 
		return 1
	seq = [0] * (n + 1)
	seq[1] = seq[2] = 1
	for i in range(3, n + 1):
		seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]
	return seq[n]
","""""""
Write a function to find the nth number in the newman conway sequence.
assert sequence(10) == 6
""""""
",sequence
Mbpp/86,"def centered_hexagonal_number(n):
    """"""
    Calculate the nth centered hexagonal number.
    
    Args:
        n (int): The position of the centered hexagonal number to calculate.
        
    Returns:
        int: The nth centered hexagonal number.
    """"""
    # Calculate the nth centered hexagonal number using the formula:
    # C(n) = 3 * n * (7 * n - 1) + 1
    return 3 * n * (7 * n - 1) + 1",fail,fail,[[10]],[[1000000]],"
def centered_hexagonal_number(n):
  return 3 * n * (n - 1) + 1
","""""""
Write a function to find nth centered hexagonal number.
assert centered_hexagonal_number(10) == 271
""""""
",centered_hexagonal_number
Mbpp/113,"def check_integer(s):
    """"""
    Check if a string represents an integer.
    """"""
    try:
        int(s)
        return True
    except ValueError:
        return False",pass,fail,[],[['']],"
def check_integer(text):
 text = text.strip()
 if len(text) < 1:
    return None
 else:
    if text[0] in '+-':
        text = text[1:]
    return text.isdigit()
","""""""
Write a function to check if a string represents an integer or not.
assert check_integer(""python"")==False
""""""
",check_integer
Mbpp/95,"def find_min_length(list_of_lists):
    """"""
    Finds the length of the smallest list in a list of lists.

    :param list_of_lists: A list where each element is a list.
    :return: The length of the smallest list in list_of_lists.
    :assertion: assert find_min_length([[1],[1,2]]) == 1
    """"""
    min_length = float('inf')
    for sublist in list_of_lists:
        if len(sublist) < min_length:
            min_length = len(sublist)
    return min_length

# Test case
assert find_min_length([[1],[1,2]]) == 1",fail,fail,[],[],"
def Find_Min_Length(lst):  
    minLength = min(len(x) for x in lst )
    return minLength 
","""""""
Write a python function to find the length of the smallest list in a list of lists.
assert Find_Min_Length([[1],[1,2]]) == 1
""""""
",Find_Min_Length
Mbpp/131,"def reverse_vowels(string):
    vowels = 'aeiou'
    reversed_vowels = ''.join([vowel[::-1] if vowel in vowels else vowel for vowel in string])
    return reversed_vowels",fail,fail,[['USA']],[['FIswIZeBBCBDCBDFCBCDFCCGBCDCBDFGCBCDFCFDBFCCDCBDFCD']],"
def reverse_vowels(str1):
	is_vowel = lambda x: x in 'aeiouAEIOU'
	pos = [i for i, c in enumerate(str1) if is_vowel(c)]
	return ''.join(c if not is_vowel(c) else str1[pos.pop()] for c in str1)
		
","""""""
Write a python function to reverse only the vowels of a given string (where y is not a vowel).
assert reverse_vowels(""Python"") == ""Python""
""""""
",reverse_vowels
Mbpp/109,"def odd_Equivalent(binary_str, rotations):
    # Convert binary string to integer
    num = int(binary_str, 2)
    
    # Check if the number is odd
    if num % 2 != 0:
        return 1  # There is exactly one odd number (the number itself)
    
    # Calculate the total number of odd numbers after rotations
    # Each rotation shifts the bits to the left, which affects the parity (odd/even nature) of the number
    # A single bit rotation changes the parity if the rotation count is odd
    # For example, rotating '0011' (3 in binary) by 1 gives '1100' (4 in decimal), which is even
    
    # If the number of rotations is odd, the parity will change for at least one number
    # If the number of rotations is even, the parity will remain the same for all numbers
    
    # If the number of rotations is odd, there will be exactly one odd number after rotation
    if rotations % 2 != 0:
        return 1
    else:
        return 0",fail,fail,"[['011001', 6]]","[['1100110011', 5]]","
def odd_Equivalent(s,n): 
    count=0
    for i in range(0,n): 
        if (s[i] == '1'): 
            count = count + 1
    return count 
","""""""
Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.
assert odd_Equivalent(""011001"",6) == 3
""""""
",odd_Equivalent
Mbpp/99,"def decimal_to_binary(decimal_number):
    if decimal_number == 0:
        return '0'
    
    binary = ''
    while decimal_number > 0:
        remainder = decimal_number % 2
        binary = str(remainder) + binary
        decimal_number = decimal_number // 2
    return binary.lstrip('0')",pass,fail,[],[[-5]],"
def decimal_to_binary(n): 
    return bin(n).replace(""0b"","""") 
","""""""
Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.
assert decimal_to_binary(8) == '1000'
""""""
",decimal_to_binary
Mbpp/96,"def divisor(n):
    """"""Return the number of divisors of the given integer n.""""""
    divisors = 0
    for i in range(1, int(n ** 0.5) + 1):
        if n % i == 0:
            divisors += 1
    return divisors",fail,fail,[[15]],[[79337]],"
def divisor(n):
  return sum(1 for i in range(1, n + 1) if n % i == 0)
","""""""
Write a python function to find the number of divisors of a given integer.
assert divisor(15) == 4
""""""
",divisor
Mbpp/102,"def snake_to_camel(snake_case_string):
    # Split the snake case string into words
    words = snake_case_string.split('_')
    
    # Capitalize the first letter of each word and join them together
    camel_case_string = ''.join(word.capitalize() for word in words)
    
    return camel_case_string",pass,fail,[],[['___python_program']],"
def snake_to_camel(word):
    return ''.join(x.capitalize() or '_' for x in word.split('_'))
","""""""
Write a function to convert a snake case string to camel case string.
assert snake_to_camel('python_program')=='PythonProgram'
""""""
",snake_to_camel
Mbpp/94,"def index_minimum(tuples):
    # Sort the tuples based on the second element (index 1)
    sorted_tuples = sorted(tuples, key=lambda x: x[1])
    
    # Return the first tuple from the sorted list
    return sorted_tuples[0]",fail,fail,"[[[['Rash', 143], ['Manjeet', 200], ['Varsha', 100]]]]","[[[['John', 100]]]]","
from operator import itemgetter 
def index_minimum(test_list):
  res = min(test_list, key = itemgetter(1))[0]
  return (res) 
","""""""
Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.
assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'
""""""
",index_minimum
Mbpp/129,"def is_magic_square(matrix):
    # Check if the matrix is a square matrix (number of rows == number of columns)
    if len(matrix) != len(matrix[0]):
        return False

    # Calculate the sum of each row and column
    row_sums = [sum(row) for row in matrix]
    col_sums = [sum(column) for column in zip(*matrix)]

    # A matrix is a magic square if all row sums, column sums, and the diagonal sums are equal
    return len(set(row_sums)) == 1 and len(set(col_sums)) == 1 and sum(matrix[i][i] for i in range(len(matrix))) == row_sums[0] and sum(matrix[i][len(matrix)-i-1] for i in range(len(matrix))) == col_sums[0]

# Test the function with the provided example
assert is_magic_square([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == True",fail,fail,[],[],"
def magic_square_test(my_matrix):
    s = sum(my_matrix[0])
    # row
    if any(sum(row) != s for row in my_matrix):
        return False
    # column
    if any(sum(row[i] for row in my_matrix) != s for i in range(len(my_matrix[0]))):
        return False
    # diagonal
    if sum(my_matrix[i][i] for i in range(len(my_matrix))) != s:
        return False
    # anti-diagonal
    if sum(my_matrix[i][len(my_matrix) - i - 1] for i in range(len(my_matrix))) != s:
        return False
    return True
","""""""
Write a function to calculate whether the matrix is a magic square.
assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True
""""""
",magic_square_test
Mbpp/90,"def len_longest_word(words):
    """"""
    Returns the length of the longest word in the given list.
    
    Args:
    words (list): A list of strings representing words.
    
    Returns:
    int: The length of the longest word in the list.
    """"""
    if not words:
        return 0
    
    longest_length = 0
    for word in words:
        if len(word) > longest_length:
            longest_length = len(word)
    
    return longest_length

# Test the function
assert len_longest_word([""python"", ""PHP"", ""bigdata""]) == 7",fail,fail,[],[],"
def len_log(list1):
    return max(len(x) for x in list1)
","""""""
Write a python function to find the length of the longest word.
assert len_log([""python"",""PHP"",""bigdata""]) == 7
""""""
",len_log
Mbpp/74,"def is_samepatterns(patterns1, patterns2):
    """"""
    Check if two lists follow the same pattern.
    
    Args:
        patterns1 (list): A list of strings representing the first pattern.
        patterns2 (list): A list of strings representing the second pattern.
        
    Returns:
        bool: True if both patterns follow the same sequence, False otherwise.
    """"""
    # Sort both lists to ensure comparison is case-insensitive
    patterns1.sort()
    patterns2.sort()
    
    # Compare the sorted lists
    return patterns1 == patterns2",fail,fail,"[[['red', 'green', 'green'], ['a', 'b', 'b']]]","[[['red', 'green', 'blue'], ['a', 'b', 'c']]]","
def is_samepatterns(colors, patterns):    
    if len(colors) != len(patterns):
        return False    
    pattern_color_dict = {pattern: set() for pattern in patterns}
    for color, pattern in zip(colors, patterns):
        pattern_color_dict[pattern].add(color)
    return all(len(pattern_color_dict[pattern]) == 1 for pattern in patterns)
","""""""
Write a function to check whether it follows the sequence given in the patterns array.
assert is_samepatterns([""red"",""green"",""green""], [""a"", ""b"", ""b""])==True
""""""
",is_samepatterns
Mbpp/124,"import math
def angle_complex(z):
    """"""
    Calculate the angle (in radians) of a complex number z.
    
    Args:
        z (complex): A complex number represented as a + bj.
        
    Returns:
        float: The angle in radians.
    """"""
    # Extract the real and imaginary parts
    real = z.real
    imag = z.imag
    
    # Calculate the magnitude (modulus) of the complex number
    magnitude = math.sqrt(real**2 + imag**2)
    
    # Calculate the angle using the arctangent of the imaginary part over the real part
    angle = math.atan2(imag, real)
    
    return angle",fail,fail,"[['0.0', '1j']]","[['0.0', '0j']]","
import cmath
def angle_complex(a,b):
  angle=cmath.phase(a+b)
  return angle
","""""""
Write a function to get the angle of a complex number.
assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)
""""""
",angle_complex
Mbpp/119,"def find_single_element(arr):
    # Initialize a dictionary to keep track of element counts
    element_counts = {}
    
    # Iterate through the array
    for num in arr:
        # If the element is not in the dictionary, add it with a count of 1
        if num not in element_counts:
            element_counts[num] = 1
        # If the element is already in the dictionary, increment its count
        else:
            element_counts[num] += 1
    
    # The element that appears only once is the key with a count of 1
    for num, count in element_counts.items():
        if count == 1:
            return num

    # If no such element is found, return None
    return None

# Test the function with the provided example
assert find_single_element([1, 1, 2, 2, 3]) == 3",fail,fail,[],[],"
def search(arr):
    n = len(arr)
    XOR = 0
    for i in range(n) :
        XOR = XOR ^ arr[i]
    return (XOR)
","""""""
Write a python function to find the element that appears only once in a sorted array.
assert search([1,1,2,2,3]) == 3
""""""
",search
Mbpp/125,"def find_length(binary_string):
    # Initialize counters for 0s and 1s
    count_0 = 0
    count_1 = 0
    
    # Iterate through the binary string
    for digit in binary_string:
        if digit == '0':
            count_0 += 1
        else:
            count_1 += 1
    
    # Calculate the maximum difference between counts of 0s and 1s
    max_diff = abs(count_0 - count_1)
    
    return max_diff",fail,fail,[['11000010001']],[['0000000011111111']],"
def find_length(string): 
	current_sum = 0
	max_sum = 0
	for c in string: 
		current_sum += 1 if c == '0' else -1
		if current_sum < 0: 
			current_sum = 0
		max_sum = max(current_sum, max_sum) 
	return max_sum
","""""""
Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
assert find_length(""11000010001"") == 6
""""""
",find_length
Mbpp/92,"def is_undulating(num):
    """"""
    Check if the given number is undulating.
    
    An undulating number is a number that, when its digits are read
    from left to right, rises and falls (i.e., increases and then decreases)
    at least once.
    
    Args:
        num (int): The number to be checked for undulating property.
        
    Returns:
        bool: True if the number is undulating, False otherwise.
    """"""
    # Convert the number to a string to easily access each digit
    num_str = str(num)
    
    # Initialize a flag to keep track of whether the number is undulating
    is_undulating = False
    
    # Iterate over each digit in the number
    for i in range(len(num_str)):
        # Check if the current digit is greater than the next digit
        if int(num_str[i]) > int(num_str[i + 1]):
            # If true, the number is undulating, so update the flag
            is_undulating = True
        else:
            # If the current digit is not greater than the next digit,
            # the number is not undulating, so reset the flag
            is_undulating = False
    return is_undulating",fail,fail,[[1212121]],[[2121212121212121]],"
def is_undulating(n): 
	digits = [int(digit) for digit in str(n)]
	if len(set(digits)) != 2:
		return False
	return all(a != b for a, b in zip(digits, digits[1:]))
","""""""
Write a function to check whether the given number is undulating or not.
assert is_undulating(1212121) == True
""""""
",is_undulating
Mbpp/68,"def is_Monotonic(arr):
    """"""
    Check if the given array is monotonic.
    
    Args:
        arr (list): The input array.
        
    Returns:
        bool: True if the array is monotonic (either all increasing or all decreasing),
              False otherwise.
    """"""
    increasing = all(arr[i] < arr[i + 1] for i in range(len(arr) - 1))
    decreasing = all(arr[i] > arr[i + 1] for i in range(len(arr) - 1))
    
    return increasing or decreasing",fail,fail,"[[[6, 5, 4, 4]]]","[[[False, False, False]]]","
def is_Monotonic(A): 
    return all(a <= b for a, b in zip(A, A[1:])) or all(a >= b for a, b in zip(A, A[1:]))
","""""""
Write a python function to check whether the given array is monotonic or not.
assert is_Monotonic([6, 5, 4, 4]) == True
""""""
",is_Monotonic
Mbpp/126,"def sum_common_divisors(a, b):
    # Function to find all divisors of a number
    def find_divisors(n):
        divisors = []
        for i in range(1, n + 1):
            if n % i == 0:
                divisors.append(i)
        return divisors

    # Find divisors of both numbers
    divisors_a = find_divisors(a)
    divisors_b = find_divisors(b)

    # Find common divisors
    common_divisors = set(divisors_a).intersection(divisors_b)

    # Calculate the sum of common divisors
    sum_common = sum(common_divisors)

    return sum_common

# Test the function with the given example
assert sum_common_divisors(10, 15) == 6",fail,fail,[],[],"
import math
def sum(a,b): 
    sum = 0
    n = math.gcd(a, b)
    N = int(math.sqrt(n)) + 1
    for i in range (1, N): 
        if (n % i == 0): 
            sum += i
            if (n / i != i): 
                sum += (n / i)
    return sum
","""""""
Write a python function to find the sum of common divisors of two given numbers.
assert sum(10,15) == 6
""""""
",sum
Mbpp/235,"def even_bit_set_number(n):
    """"""
    Sets all even bits of a given number.

    :param n: int
    :return: int
    """"""
    # Convert the number to binary and filter only the even bits (0s)
    even_bits = '0' * (n // 2) + '1' * (n % 2)
    return int(even_bits, 2)",fail,fail,[[10]],[[999999999]],"
def even_bit_set_number(n): 
    mask = 2
    while mask < n:
        n |= mask
        mask <<= 2
    return n
","""""""
Write a python function to set all even bits of a given number.
assert even_bit_set_number(10) == 10
""""""
",even_bit_set_number
Mbpp/105,"def count_true_booleans(lst):
    """"""
    Count the number of True values in the given list.
    
    :param lst: List of booleans
    :return: Integer representing the count of True values
    """"""
    return sum(1 for value in lst if value is True)

# Test case
assert count([True, False, True]) == 2",fail,fail,[],[],"
def count(lst):   
    return sum(lst) 
","""""""
Write a python function to count true booleans in the given list.
assert count([True,False,True]) == 2
""""""
",count
Mbpp/240,"def replace_last_element(first_list, second_list):
    """"""
    Replaces the last element of the first list with the elements of the second list.
    
    Args:
        first_list (list): The first list to modify.
        second_list (list): The list to use for replacing the last element of first_list.
        
    Returns:
        list: The modified first list.
    """"""
    # Ensure both lists have the same length
    assert len(first_list) == len(second_list), ""Lists must have the same length""
    
    # Replace the last element of the first list
    first_list[-1] = second_list
    
    return first_list

# Test the function
assert replace_last_element([1, 3, 5, 7, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8]",fail,fail,[],[],"
def replace_list(list1, list2):
    return list1[:-1] + list2
","""""""
Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.
assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]
""""""
",replace_list
Mbpp/142,"def count_samepair(list1, list2, list3):
    """"""
    Count the number of identical items in the same position across three given lists.

    :param list1: First list
    :param list2: Second list
    :param list3: Third list
    :return: The count of identical items in the same position across all three lists
    """"""
    count = 0
    for i in range(len(list1)):
        if list1[i] == list2[i] == list3[i]:
            count += 1
    return count",pass,fail,[],"[[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]]]","
def count_samepair(list1,list2,list3):
    return sum(m == n == o for m, n, o in zip(list1,list2,list3))
","""""""
Write a function to count number items that are identical in the same position of three given lists.
assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3
""""""
",count_samepair
Mbpp/165,"def count_char_position(s):
    # Convert the string to lowercase for case-insensitive comparison
    s = s.lower()
    
    # Initialize a counter for characters at alphabet positions
    count = 0
    
    # Iterate over each character in the string
    for char in s:
        # Check if the character is in the English alphabet (case-insensitive)
        if char.isalpha():
            # Check if the position in the string matches the position in the alphabet
            if ord(char) == ord('a') + i:
                count += 1
            elif ord(char) == ord('e') + i:
                count += 1  # 'e' is at position 5 in the alphabet
    return count",fail,fail,[['xbcefg']],[['xyzXYZ']],"
def count_char_position(str1): 
    return sum(ord(ch.lower()) - ord('a') == i for i, ch in enumerate(str1))
","""""""
Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).
assert count_char_position(""xbcefg"") == 2
""""""
",count_char_position
Mbpp/120,"def max_product_tuple(tuples):
    # Initialize variables to keep track of the maximum product and the tuple with this maximum product
    max_product = float('-inf')
    max_product_tuple = None

    # Iterate over all possible pairs of tuples
    for i in range(len(tuples)):
        for j in range(i + 1, len(tuples)):
            # Calculate the product of the numbers from each tuple in the pair
            product = tuples[i][0] * tuples[j][0] if len(tuples[i]) == 1 and len(tuples[j]) == 1 else max(tuples[i][0] * tuples[j][0], max_product_tuple(tuples[i]) * max_product_tuple(tuples[j]))

            # Update the maximum product and the tuple if the current product is greater
            if product > max_product:
                max_product = product
                max_product_tuple = (tuples[i], tuples[j])

    return max_product_tuple",fail,fail,"[[[[2, 7], [2, 6], [1, 8], [4, 9]]]]","[[[[-10, 20], [15, -2], [-5, 10]]]]","
def max_product_tuple(list1):
    return max(abs(x * y) for x, y in list1)
","""""""
Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.
assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36
""""""
",max_product_tuple
Mbpp/132,"def tup_to_str(tup):
    """"""Convert a tuple to a string.""""""
    return ' '.join(tup)

# Test case
assert tup_to_str(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')) == ""exercises""",fail,fail,[],[],"
def tup_string(tup1):
  return ''.join(tup1)
","""""""
Write a function to convert a tuple to a string.
assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(""exercises"")
""""""
",tup_string
Mbpp/223,"def is_majority(arr, n, element):
    # Check if the array length is valid
    if len(arr) != n:
        return False

    # Count occurrences of the element
    count = arr.count(element)

    # Determine if the element is the majority
    majority_threshold = n // 2 + 1
    if count > majority_threshold:
        return True
    else:
        return False",fail,pass,"[[[1, 2, 3, 3, 3, 3, 10], 7, 3]]",[],"
from bisect import bisect_left, bisect_right
def is_majority(arr, n, x):
	if x not in arr:
		return False
	l = bisect_left(arr, x)
	r = bisect_right(arr, x)
	return r - l > n / 2
","""""""
Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)
assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True
""""""
",is_majority
Mbpp/89,"def closest_num(n):
    """"""
    Finds the closest smaller number than n.
    
    :param n: int
    :return: int
    """"""
    if n < 0:
        return None  # Return None for negative numbers as there is no smaller negative number
    return n - 1",pass,fail,[],[[-5]],"
def closest_num(N):
  return (N - 1)
","""""""
Write a function to find the closest smaller number than n.
assert closest_num(11) == 10
""""""
",closest_num
Mbpp/160,"def find_solution(a, b, n):
    """"""
    Finds integers x and y such that ax + by = n.
    Returns a tuple (x, y) if a solution exists, otherwise returns None.
    """"""
    # Check if the equation has a solution
    if (a * n) % b == 0 or (b * n) % a == 0:
        # Calculate x and y
        x = (n * a) // b
        y = (n * b) // a
        return (x, y)
    else:
        return None",fail,fail,"[[2, 3, 7]]","[[100, 50, 4000]]","
def find_solution(a, b, n):
	i = 0
	while i * a <= n:
		if (n - (i * a)) % b == 0: 
			return (i, (n - (i * a)) // b)
		i = i + 1
	return None
","""""""
Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.
assert find_solution(2, 3, 7) == (2, 1)
""""""
",find_solution
Mbpp/167,"def next_power_of_2(n):
    """"""
    Returns the smallest power of 2 that is greater than or equal to n.
    :param n: int, the input number.
    :return: int, the smallest power of 2 >= n.
    """"""
    if n == 0:
        return 1
    else:
        return 2 ** (n - 1)",fail,fail,[[5]],[[8]],"
def next_power_of_2(n): 
  if n and not n & (n - 1):
    return n
  res = 1
  while n != 0: 
    n >>= 1
    res <<= 1
  return res; 
","""""""
Write a python function to find the smallest power of 2 greater than or equal to n.
assert next_power_of_2(0) == 1
""""""
",next_power_of_2
Mbpp/128,"def long_words(n, words):
    """"""
    Finds words longer than n characters from a given list of words.

    :param n: The minimum length of words to be returned.
    :type n: int
    :param words: A list of words.
    :type words: list(str)
    :return: A list of words longer than n characters.
    :rtype: list(str)
    """"""
    return [word for word in words if len(word) > n]",fail,fail,"[[3, 'python is a programming language']]","[[0, 'abc  def  ghi  jklm  nopqrs   tuvwxyz']]","
def long_words(n, s):
    return list(filter(lambda x: len(x) > n, s.split(' ')))
","""""""
Write a function to find words that are longer than n characters from a given list of words.
assert long_words(3,""python is a programming language"")==['python','programming','language']
""""""
",long_words
Mbpp/106,"def add_lists(list_to_add, tuples_to_append):
    # Ensure the input types are compatible
    if not isinstance(list_to_add, list) or not all(isinstance(item, int) for item in list_to_add):
        raise TypeError(""First argument must be a list of integers."")
    if not all(isinstance(t, tuple) for t in tuples_to_append):
        raise TypeError(""Second argument must be a list of tuples."")

    # Append the list to each tuple
    result = []
    for t in tuples_to_append:
        result.append(t + list_to_add)

    return result",fail,fail,"[[[5, 6, 7], [9, 10]]]","[[[], [1, 2, 3]]]","
def add_lists(test_list, test_tup):
  return test_tup + tuple(test_list)
","""""""
Write a function to append the given list to the given tuples.
assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)
""""""
",add_lists
Mbpp/111,"def common_in_nested_lists(nested_lists):
    # Flatten the nested lists into a single list
    flat_list = [item for sublist in nested_lists for item in sublist]
    
    # Convert the flat list to a set to remove duplicates
    unique_elements = set(flat_list)
    
    return unique_elements",fail,fail,"[[[[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]]]","[[[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8]]]]","
def common_in_nested_lists(nestedlist):
    return list(set.intersection(*map(set, nestedlist)))
","""""""
Write a function to find the common elements in given nested lists.
assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])
""""""
",common_in_nested_lists
Mbpp/237,"def check_occurrences(tuples_list):
    # Create an empty dictionary to store the occurrences
    occurrences = {}
    
    # Iterate over each tuple in the list
    for tup in tuples_list:
        # If the tuple is already in the dictionary, increment its count
        if tup in occurrences:
            occurrences[tup] += 1
        # Otherwise, add the tuple to the dictionary with a count of 1
        else:
            occurrences[tup] = 1
    
    # Return the dictionary of occurrences
    return occurrences

# Test the function with the provided example
assert check_occurrences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",fail,fail,[],[],"
from collections import Counter 
def check_occurences(test_list):
  return dict(Counter(tuple(sorted(t)) for t in test_list))
","""""""
Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.
assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}
""""""
",check_occurences
Mbpp/245,"def max_bitonic_subsequence_sum(arr):
    n = len(arr)
    if n < 2:
        return 0  # No bitonic subsequence possible

    # Initialize variables
    max_sum = 0
    current_sum = 0
    start = 0
    end = 0

    # Iterate through the array
    for i in range(1, n):
        # If current element is greater than the last element in the subsequence
        if arr[i] > arr[end]:
            current_sum += arr[i]
            end = i
        else:
            # Update current_sum and check if it's the maximum so far
            current_sum = arr[i]
            if current_sum > max_sum:
                max_sum = current_sum
            start = end - 1  # Move the start to just before the peak

    return max_sum

# Test the function with the provided example
assert max_bitonic_subsequence_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194",fail,fail,[],[],"
def max_sum(arr): 
	MSIBS = arr[:] 
	for i in range(len(arr)): 
		for j in range(0, i): 
			if arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: 
				MSIBS[i] = MSIBS[j] + arr[i] 
	MSDBS = arr[:] 
	for i in range(1, len(arr) + 1): 
		for j in range(1, i): 
			if arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: 
				MSDBS[-i] = MSDBS[-j] + arr[-i] 
	max_sum = float(""-Inf"") 
	for i, j, k in zip(MSIBS, MSDBS, arr): 
		max_sum = max(max_sum, i + j - k) 
	return max_sum
","""""""
Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.
assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194
""""""
",max_sum
Mbpp/250,"def count_occurrences(tup, element):
    """"""
    Count the occurrences of a given element in a tuple.

    Args:
        tup (tuple): A tuple containing elements.
        element (int/float): The element to count occurrences of.

    Returns:
        int: The count of occurrences of the given element in the tuple.
    """"""
    count = 0
    for item in tup:
        if item == element:
            count += 1
    return count

# Test cases
assert count_occurrences((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4) == 0
assert count_occurrences((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 5) == 1
assert count_occurrences((a, b, c, d, e, f, g, h, i, j, k, l), 3) == 2",fail,fail,[],[],"
def count_X(tup, x): 
    return tup.count(x)
","""""""
Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.
assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0
""""""
",count_X
Mbpp/238,"def number_of_substrings(string):
    # Initialize the count to zero
    count = 0
    
    # Iterate over the string using sliding window approach
    for i in range(len(string)):
        # Initialize the length of the current substring to 1
        substring_length = 1
        
        # Extend the substring length as long as possible
        while i + substring_length < len(string):
            substring_length += 1
            i += 1
        
        # Count the current substring
        count += substring_length
    
    # Return the total count of non-empty substrings
    return count",fail,fail,[['abc']],[['aaaaaa']],"
def number_of_substrings(str1): 
	str_len = len(str1) 
	return str_len * (str_len + 1) // 2
","""""""
Write a python function to count the number of non-empty substrings of a given string.
assert number_of_substrings(""abc"") == 6
""""""
",number_of_substrings
Mbpp/145,"def max_abs_diff(arr):
    """"""
    Function to find the maximum difference between any two elements in a given array.
    
    Args:
        arr (list): A list of integers.
        
    Returns:
        int: The maximum absolute difference between any two elements in the array.
    """"""
    max_diff = 0
    for i in range(len(arr)):
        for j in range(i + 1, len(arr)):
            diff = abs(arr[j] - arr[i])
            if diff > max_diff:
                max_diff = diff
    return max_diff

# Test the function
assert max_abs_diff([2, 1, 5, 3]) == 4",fail,fail,[],[],"
def max_Abs_Diff(arr): 
    return max(arr) - min(arr)
","""""""
Write a python function to find the maximum difference between any two elements in a given array.
assert max_Abs_Diff((2,1,5,3)) == 4
""""""
",max_Abs_Diff
Mbpp/116,"def tuple_to_int(tup):
    result = 0
    for num in tup:
        result = result * 10 + num  # Convert each digit to its corresponding place value
    return result",pass,fail,[],"[[[123, 456, 789]]]","
def tuple_to_int(nums):
    return int(''.join(map(str,nums)))
","""""""
Write a function to convert a given tuple of positive integers into a single integer.
assert tuple_to_int((1,2,3))==123
""""""
",tuple_to_int
Mbpp/247,"def lps(s):
    """"""
    Function to find the length of the longest palindromic subsequence in the given string.
    :param s: str, the input string
    :return: int, the length of the longest palindromic subsequence
    """"""
    n = len(s)
    dp = [[0] * n for _ in range(n)]

    # Base case: single character palindromes
    for i in range(n):
        dp[i][i] = 1

    # Fill the dp table
    for i in range(1, n):
        for j in range(i):
            if s[i] == s[j]:
                dp[i][j] = 2 + dp[i - 1][j - 1]
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])

    # The length of the longest palindromic subsequence is the maximum value in the dp table
    return max(dp[n - 1])",fail,fail,[['TENS FOR TENS']],[['NDZWBHEJKTPQGAOSLYCRMYEX']],"
def lps(str1): 
	n = len(str1)
	dp = [[0] * n for _ in range(n)]
	for i in range(n - 1, -1, -1):
		dp[i][i] = 1
		for j in range(i + 1, n):
			if str1[i] == str1[j]:
				dp[i][j] = dp[i + 1][j - 1] + 2
			else:
				dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])
	return dp[0][n - 1]
","""""""
Write a function to find the length of the longest palindromic subsequence in the given string.
assert lps(""TENS FOR TENS"") == 5
""""""
",lps
Mbpp/172,"def count_occurrence(input_string):
    """"""
    Function to count the number of occurrences of the string 'std' in a given string.
    
    Args:
        input_string (str): The input string in which to search for 'std'.
        
    Returns:
        int: The count of occurrences of 'std' in the input string.
    """"""
    count = 0
    for char in input_string:
        if char == 'std':
            count += 1
    return count

# Test the function
assert count_occurrence(""letstdlenstdporstd"") == 3",fail,fail,[],[],"
def count_occurance(s):
  return s.count('std')
","""""""
Write a function to count the number of occurence of the string 'std' in a given string.
assert count_occurance(""letstdlenstdporstd"") == 3
""""""
",count_occurance
Mbpp/118,"def string_to_list(input_string):
    """"""
    Converts a string to a list of strings split on the space character.
    
    :param input_string: The string to be split.
    :return: A list of words from the input string.
    """"""
    return input_string.split()",pass,fail,[],[['']],"
def string_to_list(string): 
    return string.split("" "")
","""""""
Write a function to convert a string to a list of strings split on the space character.
assert string_to_list(""python programming"")==['python','programming']
""""""
",string_to_list
Mbpp/138,"def is_Sum_Of_Powers_Of_Two(n):
    # Convert the number to binary and remove the '0b' prefix
    binary_representation = bin(n)[2:]
    
    # Initialize a variable to keep track of the sum of powers of 2
    sum_of_powers = 0
    
    # Iterate over each digit in the binary representation
    for digit in binary_representation:
        # If the digit is '1', add the corresponding power of 2 to the sum
        if digit == '1':
            power_of_two = 2 ** (int(binary_representation.index('1') - 1))
            sum_of_powers += power_of_two
    
    # Check if the sum equals the original number
    return sum_of_powers == n",fail,fail,[[10]],[[123456788]],"
def is_Sum_Of_Powers_Of_Two(n): 
    return n > 0 and n % 2 == 0
","""""""
Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.
assert is_Sum_Of_Powers_Of_Two(10) == True
""""""
",is_Sum_Of_Powers_Of_Two
Mbpp/135,"def hexagonal_num(n):
    """"""
    Calculate the nth hexagonal number.
    
    Args:
        n (int): The position of the hexagonal number to calculate.
        
    Returns:
        int: The nth hexagonal number.
    """"""
    # The formula for the nth hexagonal number is: n*(5n - 3)/2
    return n * (5 * n - 3) // 2",fail,fail,[[10]],[[100]],"
def hexagonal_num(n): 
	return n * (2 * n - 1) 
","""""""
Write a function to find the nth hexagonal number.
assert hexagonal_num(10) == 190
""""""
",hexagonal_num
Mbpp/168,"def count_occurrences(lst, num):
    """"""
    Count the number of occurrences of a given number in a list.

    Args:
        lst (list): The input list.
        num (int): The number to count occurrences of.

    Returns:
        int: The count of occurrences of the given number in the list.
    """"""
    return lst.count(num)

# Test cases
assert count_occurrences([1, 2, 3], 4) == 0
assert count_occurrences([1, 2, 2, 3, 3], 3) == 3
assert count_occurrences([1, 2, 3, 4, 4, 4], 4) == 4",fail,fail,[],[],"
def frequency(a,x): 
    return a.count(x)
","""""""
Write a function to count the number of occurrences of a number in a given list.
assert frequency([1,2,3], 4) == 0
""""""
",frequency
Mbpp/242,"def count_characters(string):
    """"""
    Function to count the total number of characters in a string.
    
    Args:
        string (str): The input string.
        
    Returns:
        int: The total number of characters in the string.
    """"""
    return len(string)

# Test case
assert count_characters(""python programming"") == 18",fail,fail,[],[],"
def count_charac(str1):
    return len(str1)
","""""""
Write a function to count the total number of characters in a string.
assert count_charac(""python programming"")==18
""""""
",count_charac
Mbpp/244,"def next_Perfect_Square(n):
    """"""
    Returns the next perfect square greater than a given number.
    
    :param n: The given number.
    :return: The next perfect square greater than n.
    """"""
    # Calculate the square root of the given number
    root = int(n ** 0.5) + 1
    
    # The next perfect square is the square of the next integer after the root
    next_perfect_square = root ** 2
    
    return next_perfect_square",pass,fail,[],[[-5]],"
import math  
def next_Perfect_Square(N): 
    if N < 0:
        return 0
    nextN = math.floor(math.sqrt(N)) + 1
    return nextN * nextN 
","""""""
Write a python function to find the next perfect square greater than a given number.
assert next_Perfect_Square(35) == 36
""""""
",next_Perfect_Square
Mbpp/251,"def insert_element(lst, element):
    """"""
    Inserts an element before each element in the list and returns the resulting list.
    
    Args:
        lst (list): The original list.
        element (any): The element to insert before each item in the list.
        
    Returns:
        list: The modified list with the specified element inserted before each item.
    """"""
    return [element + item for item in lst]",fail,fail,"[[['Red', 'Green', 'Black'], 'c']]","[[[-94.19039842971628, -3.4031380684866406, -22.045351968568852, -94.19039842971628], 'a']]","
def insert_element(list1, element):
    list1 = [v for elt in list1 for v in (element, elt)]
    return list1
","""""""
Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.
assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']
""""""
",insert_element
Mbpp/137,"def zero_to_non_zero_ratio(arr):
    """"""
    Calculate the ratio of zeroes to non-zeroes in an array of integers.
    
    :param arr: List of integers.
    :return: Ratio of zeroes to non-zeroes as a float.
    """"""
    zero_count = arr.count(0)
    non_zero_count = len(arr) - zero_count
    if non_zero_count == 0:
        return float('inf')  # Return infinity if there are no non-zero elements
    else:
        return zero_count / non_zero_count

# Test case
assert math.isclose(zero_to_non_zero_ratio([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)",fail,fail,[],[],"
def zero_count(nums):
    if all(x == 0 for x in nums):
        return float('inf')
    return sum(x == 0 for x in nums) / sum(x != 0 for x in nums)
","""""""
Write a function to find the ratio of zeroes to non-zeroes in an array of integers.
assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)
""""""
",zero_count
Mbpp/226,"def remove_odd_index_chars(string):
    """"""
    Remove characters at odd indices from a given string.
    
    :param string: The input string.
    :return: The string with characters at odd indices removed.
    """"""
    result = []
    for i in range(len(string)):
        if i % 2 == 0:
            result.append(string[i])
    return ''.join(result)

# Test cases
assert remove_odd_index_chars('abcdef') == 'ace'
assert remove_odd_index_chars('hello') == 'hell'
assert remove_odd_index_chars('1234567890') == '123456789'
assert remove_odd_index_chars('Python') == 'Pthon'",fail,fail,[],[],"
def odd_values_string(str1):
    return ''.join(str1[i] for i in range(0, len(str1), 2))
","""""""
Write a python function to remove the characters which have odd index values of a given string.
assert odd_values_string('abcdef') == 'ace'
""""""
",odd_values_string
Mbpp/103,"def eulerian_num(n, m):
    """"""
    Calculate the Eulerian number a(n, m).

    :param n: Integer representing the row index.
    :param m: Integer representing the column index.
    :return: The Eulerian number a(n, m).
    """"""
    if m > n:
        return 0

    # Base case: m = 1
    if m == 1:
        return n + 1

    # Recursive case: m > 1
    return (n * eulerian_num(n - 1, m - 1) + eulerian_num(n - 1, m)) // (m + 1)",fail,timeout,"[[4, 1]]",[],"
def eulerian_num(n, m): 
	if (m >= n or n == 0): 
		return 0 
	if (m == 0): 
		return 1 
	return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)
","""""""
Write a function to find the Eulerian number a(n, m).
assert eulerian_num(3, 1) == 4
""""""
",eulerian_num
Mbpp/20,"def is_woodall(n):
    """"""
    Check if the given number is a Woodall number.
    
    A Woodall number of the form 2^n - 1 is a prime number.
    """"""
    # Check if n is a power of 2
    if n < 2:
        return False
    
    # Calculate 2^n - 1
    candidate = 2 ** n - 1
    
    # Check if the candidate is a prime number
    if candidate > 1:
        for i in range(2, int(candidate ** 0.5) + 1):
            if candidate % i == 0:
                return False
        return True
    else:
        return False",fail,fail,[[383]],[[123456789]],"
def is_woodall(x): 
	if not isinstance(x, int):
		return False
	if x <= 0 or x % 2 == 0:
		return False
	if (x == 1): 
		return True
	x += 1 
	i = 0
	while (x % 2 == 0): 
		x /= 2
		i += 1
		if (i == x): 
			return True
	return False
","""""""
Write a function to check if the given number is woodball or not.
assert is_woodall(383) == True
""""""
",is_woodall
Mbpp/239,"def get_total_number_of_sequences(m, n):
    if n == 0:
        return 1  # Base case: an empty sequence

    count = 0
    for i in range(1, m + 1):
        if n > 0:
            count += get_total_number_of_sequences(i * 2, n - 1)
        else:
            count += 1  # If n is 0, just add 1 for the empty sequence

    return count",fail,fail,"[[10, 4]]","[[100, 10]]","
def get_total_number_of_sequences(m, n):
	T=[[0 for _ in range(n + 1)] for _ in range(m + 1)] 
	for i in range(m + 1): 
		for j in range(n + 1): 
			if i==0 or j==0: 
				T[i][j] = 0
			elif i<j: 
				T[i][j] = 0
			elif j==1: 
				T[i][j] = i 
			else: 
				T[i][j] = T[i-1][j] + T[i//2][j-1] 
	return T[m][n]
","""""""
Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.
assert get_total_number_of_sequences(10, 4) == 4
""""""
",get_total_number_of_sequences
Mbpp/123,"def amicable_numbers_sum(limit):
    # Helper function to check if two numbers are amicable
    def is_amicable(n, m):
        return n == sum([i for i in range(1, n) if n % i == 0]) and m == sum([j for j in range(1, m) if m % j == 0])

    # Initialize the sum
    total_sum = 0

    # Iterate through numbers from 1 to the limit
    for num in range(1, limit + 1):
        # Check if the number and its corresponding amicable number exist
        if is_amicable(num, num):
            # Add both numbers to the total sum
            total_sum += num
            total_sum += num

    return total_sum",fail,fail,[[999]],[[10000]],"
def div_sum(num):
    res = 1
    i = 2
    while i * i <= num:
        if num % i == 0:
            res += i
            if i * i != num:
                res += num / i
        i += 1
    return res
def amicable_numbers_sum(limit):
    amicables = set()
    for num in range(2, limit + 1):
        if num in amicables:
            continue
        sum_fact = div_sum(num)
        sum_fact2 = div_sum(sum_fact)
        if num == sum_fact2 and num != sum_fact:
            amicables.add(num)
            amicables.add(sum_fact2)
    return sum(amicables)
","""""""
Write a function to sum all amicable numbers from 1 to a specified number.
assert amicable_numbers_sum(999)==504
""""""
",amicable_numbers_sum
Mbpp/268,"def find_star_num(n):
    # The formula to find the nth star number is: n * (7 * (n - 1) / 2) + 1
    return n * (7 * (n - 1)) // 2 + 1",fail,fail,[[3]],[[1000000]],"
def find_star_num(n): 
	return 6 * n * (n - 1) + 1 
","""""""
Write a function to find the n'th star number.
assert find_star_num(3) == 37
""""""
",find_star_num
Mbpp/267,"def square_sum(n):
    """"""Return the sum of the squares of the first n odd natural numbers.""""""
    total = 0
    for i in range(1, n + 1, 2):  # Iterate over the first n odd numbers
        total += i ** 2
    return total

# Test the function with the given assertion
assert square_sum(2) == 10",fail,fail,[],[],"
def square_Sum(n):  
    return n * (4 * n * n - 1) / 3
","""""""
Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.
assert square_Sum(2) == 10
""""""
",square_Sum
Mbpp/257,"def swap_numbers(a, b):
    # Swap the numbers
    temp = a
    a = b
    b = temp
    
    # Return the swapped numbers as a tuple
    return (b, a)",fail,fail,"[[10, 20]]","[[-5, -10]]","
def swap_numbers(a,b):
    return (b, a)
","""""""
Write a function that takes in two numbers and returns a tuple with the second number and then the first number.
assert swap_numbers(10,20)==(20,10)
""""""
",swap_numbers
Mbpp/278,"def count_first_elements(tup):
    count = 0
    for i, element in enumerate(tup):
        if type(element) == tuple:
            count += 1
            if count == 1:
                return count  # Return the count as soon as the first nested tuple is found
        else:
            count += 1
    return count  # Return the total count of elements before the first tuple",fail,fail,"[[[1, 5, 7, [4, 6], 10]]]","[[[1, 2, 3, [4, 5], 6, 7]]]","
def count_first_elements(test_tup):
  for count, ele in enumerate(test_tup):
    if isinstance(ele, tuple):
      break
  return count
","""""""
Write a function to find the number of elements that occurs before the tuple element in the given tuple.
assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3
""""""
",count_first_elements
Mbpp/259,"def maximize_elements(tuples_list):
    # Sort tuples in descending order based on the sum of their elements
    tuples_list.sort(key=lambda x: sum(x), reverse=True)
    return tuples_list",fail,fail,"[[[[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]]]","[[[[1, 2], [3, 4], [5, 6], [7, 8]], [[8, 7], [6, 5], [4, 3], [2, 1]]]]","
def maximize_elements(test_tup1, test_tup2):
  return tuple((max(a, c), max(b, d)) for (a, b), (c, d) in zip(test_tup1, test_tup2))
","""""""
Write a function to maximize the given two tuples.
assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))
""""""
",maximize_elements
Mbpp/266,"def lateralsurface_cube(side_length):
    """"""
    Calculate the lateral surface area of a cube given its side length.

    Args:
        side_length (int): The length of a side of the cube.

    Returns:
        int: The lateral surface area of the cube.
    """"""
    # The lateral surface area of a cube is given by 6 * side_length^2
    lateral_area = 6 * (side_length ** 2)
    return lateral_area",fail,fail,[[5]],[[100]],"
def lateralsurface_cube(l):
  return 4 * l * l
","""""""
Write a function to find the lateral surface area of a cube given its side length.
assert lateralsurface_cube(5)==100
""""""
",lateralsurface_cube
Mbpp/287,"def square_sum(n):
    """"""
    Calculate the sum of squares of the first n even natural numbers.
    
    Args:
        n (int): The number of even natural numbers to consider.
        
    Returns:
        int: The sum of squares of the first n even natural numbers.
    """"""
    total_sum = 0
    for i in range(2, n + 1, 2):  # Iterate over even numbers
        total_sum += i ** 2
    return total_sum

# Test the function with the given assertion
assert square_sum(2) == 20",fail,fail,[],[],"
def square_Sum(n):  
    return 2 * n * (n + 1) * (2 * n + 1) /3
","""""""
Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.
assert square_Sum(2) == 20
""""""
",square_Sum
Mbpp/264,"def dog_age(years):
    """"""
    Calculate a dog's age in dog's years.

    Args:
        years (int): The actual age of the dog in human years.

    Returns:
        int: The corresponding age in dog's years.
    """"""
    return 7 * years + 4",fail,fail,[[12]],[[100]],"
def dog_age(h_age):
	if h_age <= 2:
		d_age = h_age * 10.5
	else:
		d_age = 21 + (h_age - 2) * 4
	return d_age
","""""""
Write a function to calculate a dog's age in dog's years.
assert dog_age(12)==61
""""""
",dog_age
Mbpp/292,"def find_quotient(dividend, divisor):
    """"""
    Finds the quotient of two numbers, rounded down to the nearest integer.
    
    Args:
        dividend (int): The dividend number.
        divisor (int): The divisor number.
        
    Returns:
        int: The quotient, rounded down to the nearest integer.
    """"""
    quotient = dividend // divisor  # Floor division in Python 3
    return quotient

# Test cases
assert find_quotient(10, 3) == 3
assert find_quotient(15, 4) == 3
assert find_quotient(20, 5) == 4
assert find_quotient(25, 5) == 5",fail,fail,[],[],"
def find(n,m):  
    return n // m 
","""""""
Write a python function to find quotient of two numbers (rounded down to the nearest integer).
assert find(10,3) == 3
""""""
",find
Mbpp/410,"def find_minimum(lst):
    """"""
    Finds the minimum value in a given heterogeneous list.
    
    :param lst: A list containing various data types.
    :return: The minimum value in the list.
    :assert: assert find_minimum(['Python', 3, 2, 4, 5, 'version']) == 2
    """"""
    # Convert all elements to integers and find the minimum
    min_val = min(int(x) if isinstance(x, str) and x.isdigit() else x for x in lst)
    return min_val

# Test case
assert find_minimum(['Python', 3, 2, 4, 5, 'version']) == 2",fail,fail,[],[],"
def min_val(listval):
     min_val = min(i for i in listval if isinstance(i, int))
     return min_val
","""""""
Write a function to find the minimum value in a given heterogeneous list.
assert min_val(['Python', 3, 2, 4, 5, 'version'])==2
""""""
",min_val
Mbpp/272,"def rear_extract(tuples_list):
    return [item[2] for item in tuples_list]",pass,fail,[],"[[[[1, ['Rash', 21]], [2, ['Varsha', 20]], [3, ['Kil', 19]]]]]","
def rear_extract(test_list):
  return [x[-1] for x in test_list]
","""""""
Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.
assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]
""""""
",rear_extract
Mbpp/413,"def extract_nth_element(lst, n):
    """"""
    Extract the nth element from a given list of tuples.

    :param lst: A list of tuples.
    :param n: The index of the tuple to extract.
    :return: The nth element from the first n tuples in the list.
    """"""
    if n > len(lst):
        return ""Index out of range""
    else:
        return lst[n]
n = 0",fail,fail,"[[[['Greyson Fulton', 98, 99], ['Brady Kent', 97, 96], ['Wyatt Knott', 91, 94], ['Beau Turnbull', 94, 98]], 0]]","[[[], 0]]","
def extract_nth_element(list1, n):
    return [x[n] for x in list1]
","""""""
Write a function to extract the nth element from a given list of tuples.
assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']
""""""
",extract_nth_element
Mbpp/271,"def even_Power_Sum(n):
    """"""
    Calculate the sum of the first n even natural numbers raised to the fifth power.
    """"""
    total_sum = 0
    for i in range(1, n + 1):
        if i % 2 == 0:
            total_sum += (i ** 5)
    return total_sum",fail,fail,[[2]],[[10]],"
def even_Power_Sum(n): 
    return sum(x ** 5 for x in range(2, 2 * n + 1, 2))
","""""""
Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.
assert even_Power_Sum(2) == 1056
""""""
",even_Power_Sum
Mbpp/301,"def dict_depth(d):
    """"""
    Function to find the depth of a dictionary.
    
    Args:
        d (dict): A dictionary to analyze.
        
    Returns:
        int: The depth of the dictionary.
    """"""
    if not isinstance(d, dict):
        raise ValueError(""Input must be a dictionary."")
    
    depth = 0
    items = d.items()
    
    for item in items:
        k, v = item
        if isinstance(v, dict):
            depth += 1
            items.extend(v.items())
        else:
            depth += 1
    
    return depth",fail,fail,"[[{'a': 1, 'b': {'c': {'d': {}}}}]]",[[{}]],"
def dict_depth_aux(d):
    if isinstance(d, dict):
        return 1 + (max(map(dict_depth_aux, d.values())) if d else 0)
    return 0
def dict_depth(d):
    return dict_depth_aux(d)
","""""""
Write a function to find the depth of a dictionary.
assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4
""""""
",dict_depth
Mbpp/398,"def sum_of_digits(numbers):
    """"""
    Compute the sum of digits of each number in a given list.
    
    Args:
        numbers (list): A list of integers.
        
    Returns:
        int: The sum of the digits of all numbers in the list.
    """"""
    total_sum = 0
    for num in numbers:
        total_sum += sum(int(digit) for digit in str(num))
    return total_sum",fail,fail,"[[[[10, 20, 4, 5, 'b', 70, 'a']]]]","[[[-10, 15, 0, -5, 2]]]","
def sum_of_digits(nums):
    return sum(int(el) for n in nums for el in str(n) if el.isdigit())
","""""""
Write a function to compute the sum of digits of each number of a given list.
assert sum_of_digits([10,2,56])==14
""""""
",sum_of_digits
Mbpp/420,"def cube_sum(n):
    """"""
    Calculate the cube sum of the first n even natural numbers.
    
    Args:
        n (int): The number of even natural numbers to consider.
        
    Returns:
        int: The sum of their cubes.
    """"""
    cube_sum_value = 0
    for i in range(2, 2*n, 2):  # Iterate over the first n even numbers
        cube_sum_value += i ** 3
    
    return cube_sum_value

# Test the function with the given assertion
assert cube_sum(2) == 72",fail,fail,[],[],"
def cube_Sum(n): 
    return 2 * (n ** 2) * ((n + 1) ** 2)
","""""""
Write a python function to find the cube sum of first n even natural numbers.
assert cube_Sum(2) == 72
""""""
",cube_Sum
Mbpp/306,"def max_sum_increasing_subseq(arr, i, k):
    """"""
    Finds the maximum sum of an increasing subsequence from the prefix up to the ith index
    and including the kth element which is after i (k > i).
    """"""
    # Initialize variables
    n = len(arr)
    if i >= n or k >= n:
        return 0  # Return 0 if the indices are out of bounds

    # Initialize variables for dynamic programming
    dp = [0] * (k + 1)
    prev = [-1] * (k + 1)
    max_sum = 0

    # Base case: if the first element is the kth element after i
    if i == 0 or arr[i - 1] == arr[0]:
        dp[k] = arr[i]
        prev[k] = 0
    else:
        # Find the position of the first element that is greater than or equal to arr[i-1]
        j = i - 1
        while arr[j] < arr[i - 1]:
            j -= 1
        dp[j] = dp[j + 1] + arr[j]
        prev[j] = i

    # Iterate to find the maximum sum subsequence ending at position k
    for j in range(k, -1, -1):
        if arr[i] > arr[prev[j]]:
            max_sum = max(max_sum, dp[j] + arr[i])

    return max_sum",fail,fail,"[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6]]","[[[5, 2, 4, 1, 3, 6], 6, 1, 3]]","
def max_sum_increasing_subseq(a, n, index, k):
	dp = [[0 for _ in range(n)] for _ in range(n)]
	for i in range(n):
		if a[i] > a[0]:
			dp[0][i] = a[i] + a[0]
		else:
			dp[0][i] = a[i]
	for i in range(1, n):
		for j in range(n):
			if a[j] > a[i] and j > i:
				if dp[i - 1][i] + a[j] > dp[i - 1][j]:
					dp[i][j] = dp[i - 1][i] + a[j]
				else:
					dp[i][j] = dp[i - 1][j]
			else:
				dp[i][j] = dp[i - 1][j]
	return dp[index][k]
","""""""
Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .
assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11
""""""
",max_sum_increasing_subseq
Mbpp/388,"def highest_Power_of_2(n):
    """"""
    Returns the highest power of 2 that is less than or equal to n.
    """"""
    # Initialize the highest power of 2
    power_of_2 = 0
    
    # Loop to find the highest power of 2 <= n
    while 2 ** power_of_2 <= n:
        power_of_2 += 1
    
    return power_of_2",fail,fail,[[10]],[[1000000]],"
def highest_Power_of_2(n): 
    i = 0
    while ((1 << i) <= n): 
        i += 1
    return (1 << (i - 1))
","""""""
Write a python function to find the highest power of 2 that is less than or equal to n.
assert highest_Power_of_2(10) == 8
""""""
",highest_Power_of_2
Mbpp/421,"def concatenate_tuple(tup):
    # Convert the tuple to a string, using the `join` method with an empty string as the delimiter
    return ''.join(tup)",fail,fail,"[[['ID', 'is', 4, 'UTS']]]","[[['The', 'quick', 'brown', 'fox']]]","
def concatenate_tuple(test_tup):
    delim = ""-""
    res = ''.join([str(ele) + delim for ele in test_tup])
    res = res[ : len(res) - len(delim)]
    return (str(res)) 
","""""""
Write a function to concatenate each element of tuple by the delimiter.
assert concatenate_tuple((""ID"", ""is"", 4, ""UTS"") ) == 'ID-is-4-UTS'
""""""
",concatenate_tuple
Mbpp/260,"def newman_prime(n):
    """"""
    Finds the nth Newman-Shanks-Williams prime number.
    
    :param n: The position of the nth Newman-Shanks-Williams prime to find.
    :return: The nth Newman-Shanks-Williams prime number.
    """"""
    # Initialize the first known Newman-Shanks-Williams prime
    prime = 7  # The 3rd prime number

    # Function to find the next prime number using a simple primality test
    def find_next_prime(prime):
        candidate = prime + 2  # Start checking from the next even number
        while True:
            for i in range(2, candidate):
                if candidate % i == 0:
                    break
            else:
                return candidate
            candidate += 2

    # Calculate the nth Newman-Shanks-Williams prime
    for _ in range(n - 1):
        prime = find_next_prime(prime)

    return prime",fail,fail,[[3]],[[100]],"
def newman_prime(n): 
	if n == 0 or n == 1: 
		return 1
	a = 1
	b = 1
	c = 1
	for _ in range(2, n + 1):
		c = 2 * b + a
		a = b
		b = c
	return c
","""""""
Write a function to find the nth newman–shanks–williams prime number.
assert newman_prime(3) == 7
""""""
",newman_prime
Mbpp/391,"def convert_list_dictionary(list1, list2, list3):
    result = {}
    for i in range(len(list1)):
        if list1[i] in list2:
            result[list1[i]] = {list2[list1[i]]: list3[i]}
    return result",fail,fail,"[[['S001', 'S002', 'S003', 'S004'], ['Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'], [85, 98, 89, 92]]]","[[['abc', 'def', 'ghi', 'jkl'], ['python', 'program', 'language', 'programs'], [{'1': 'a', '2': 'b'}, {'3': 'c'}, 4, ['x', 'y', 'z']]]]","
def convert_list_dictionary(l1, l2, l3):
     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]
     return result
","""""""
Write a function to convert more than one list to nested dictionary.
assert convert_list_dictionary([""S001"", ""S002"", ""S003"", ""S004""],[""Adina Park"", ""Leyton Marsh"", ""Duncan Boyle"", ""Saim Richards""] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]
""""""
",convert_list_dictionary
Mbpp/418,"def find_max_length_element(lst):
    """"""
    Finds the element in a list of lists with the maximum length.
    
    Args:
        lst (list): A list of lists.
        
    Returns:
        element (any): The element from the list with the maximum length.
    """"""
    max_length = max(len(sublist) for sublist in lst)
    for element in [item for sublist in lst for item in sublist]:
        if len(element) == max_length:
            return element

    # If no element has the maximum length, return None
    return None

# Test case
assert find_max_length_element([['A'],['A','B'],['A','B','C']]) == ['A', 'B', 'C']",fail,fail,[],[],"
def Find_Max(lst): 
    return max(lst, key = len)
","""""""
Write a python function to find the element of a list having maximum length.
assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']
""""""
",Find_Max
Mbpp/279,"def is_num_decagonal(n):
    """"""
    Check if a number is a decagonal number.
    A decagonal number is a number that can be expressed as the sum of consecutive odd numbers starting from 1.
    For example, the 3rd decagonal number is 1 + 3 + 5 + 7 = 16.
    The formula to find the nth decagonal number is:
    D(n) = 4 * (n * (n + 1)) // 2 + 1
    """"""
    if n < 1:
        return False
    decagonal_number = 4 * (n * (n + 1)) // 2 + 1
    return decagonal_number == n",fail,fail,[[3]],[[1000000]],"
def is_num_decagonal(n): 
	return 4 * n * n - 3 * n 
","""""""
Write a function to find the nth decagonal number.
assert is_num_decagonal(3) == 27
""""""
",is_num_decagonal
Mbpp/286,"def max_sub_array_sum_repeated(arr, k, rep):
    # Find the length of the array
    n = len(arr)
    
    # Initialize variables to store the maximum sum and the corresponding sub-array indices
    max_sum = 0
    max_sub_array = []
    
    # Iterate through each possible starting index of a sub-array
    for i in range(n):
        # Calculate the sum of the sub-array starting from the current index
        sub_sum = sum(arr[i:i+n])
        
        # Repeat the array 'k' times and append the current sub-array to the result
        repeated_sub_sum = sub_sum * rep
        if repeated_sub_sum > max_sum:
            max_sum = repeated_sub_sum
            max_sub_array = [arr[j] for j in range(i, i+n+1)]
    
    return max_sum, max_sub_array",fail,fail,"[[[10, 20, -30, -1], 4, 3]]","[[[5, -2, 10, 4, -7, 3], 6, 5]]","
def max_sub_array_sum_repeated(a, n, k): 
	modifed = a * k
	pre = 0	# dp[i-1]
	res = modifed[0]
	for n in modifed:
		pre = max(pre + n, n)
		res = max(pre, res)
	return res
","""""""
Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.
assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30
""""""
",max_sub_array_sum_repeated
Mbpp/390,"def add_string(lst, format_str):
    """"""
    Apply a given format string to all elements in a list.

    :param lst: List of elements to format.
    :param format_str: Format string to apply to each element.
    :return: List with formatted elements.
    """"""
    return [format_str.format(*args) for args in zip(*lst)]",fail,fail,"[[[1, 2, 3, 4], 'temp{0}']]","[[[1, 'two', 3, 'four'], 'item_{0}']]","
def add_string(list_, string):
    return [string.format(i) for i in  list_]
","""""""
Write a function to apply a given format string to all of the elements in a list.
assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']
""""""
",add_string
Mbpp/308,"def large_product(list1, list2, num_largest_products):
    # Initialize a list to store the largest products
    largest_products = []

    # Iterate over the first list and the second list simultaneously
    for i, factor1 in enumerate(list1):
        for factor2 in enumerate(list2):
            # Calculate the product and add it to the list if it's not already included
            product = factor1 * factor2
            if product not in largest_products and len(largest_products) < num_largest_products:
                largest_products.append(product)

    # Return the list of the specified number of largest products
    return largest_products",fail,fail,"[[[1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3]]","[[[61.017129591114184, 19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184], [61.017129591114184, 19.303378474526568, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184], 0]]","
def large_product(nums1, nums2, N):
    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]
    return result
","""""""
Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.
assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]
""""""
",large_product
Mbpp/409,"def min_product_tuple(tuples):
    # Initialize the minimum product to a large number
    min_product = float('inf')
    
    # Iterate over all pairs of tuples
    for i in range(len(tuples)):
        for j in range(i + 1, len(tuples)):
            # Calculate the product of the two tuples
            product = tuple(a * b for a, b in zip(tuples[i], tuples[j]))
            # Update the minimum product if the current product is smaller
            if product < min_product:
                min_product = product
    
    return min_product",fail,fail,"[[[[2, 7], [2, 6], [1, 8], [4, 9]]]]","[[[[1000000, 2000000], [5000000, 3000000], [4000000, 6000000]]]]","
def min_product_tuple(list1):
    return min(x * y for x, y in list1)
","""""""
Write a function to find the minimum product from the pairs of tuples within a given list.
assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8
""""""
",min_product_tuple
Mbpp/299,"def max_aggregate(tuples):
    # Initialize the maximum aggregate to a very low value
    max_aggregate_value = float('-inf')
    
    # Iterate through each tuple in the list
    for tup in tuples:
        # Extract the first element (name) and the second element (score)
        name, score = tup
        
        # Update the maximum aggregate if the current score is higher
        if score > max_aggregate_value:
            max_aggregate_value = score
            
    return max_aggregate_value",fail,fail,"[[[['Juan Whelan', 90], ['Sabah Colley', 88], ['Peter Nichols', 7], ['Juan Whelan', 122], ['Sabah Colley', 84]]]]","[[[['Alice', 80], ['Bob', 90], ['Charlie', 70], ['Alice', 60], ['Bob', 50], ['Charlie', 40]]]]","
from collections import defaultdict
def max_aggregate(stdata):
    temp = defaultdict(int)
    for name, marks in stdata:
        temp[name] += marks
    return max(temp.items(), key=lambda x: x[1])
","""""""
Write a function to calculate the maximum aggregate from the list of tuples.
assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)
""""""
",max_aggregate
Mbpp/274,"def even_binomial_Coeff_Sum(n):
    """"""
    Calculate the sum of even index binomial coefficients for a given positive integer n.
    
    Args:
        n (int): A positive integer.
        
    Returns:
        int: The sum of even index binomial coefficients.
    """"""
    # Calculate the sum of binomial coefficients at even indices
    sum_even = sum(binomial_coefficient(i, n // 2) for i in range(0, n, 2))
    return sum_even",fail,fail,[[4]],[[10]],"
import math  
def even_binomial_Coeff_Sum( n): 
    return 1 << (n - 1)
","""""""
Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.
assert even_binomial_Coeff_Sum(4) == 8
""""""
",even_binomial_Coeff_Sum
Mbpp/430,"import math
def parabola_directrix(a, b, c):
    """"""
    Calculate the directrix of a parabola given by the equation y = ax^2 + bx + c.
    
    Parameters:
    a (float): Coefficient of x^2
    b (float): Coefficient of x
    c (float): Constant term
    
    Returns:
    float: The directrix of the parabola
    """"""
    # Calculate the discriminant
    discriminant = b**2 - 4*a*c
    
    # Calculate the directrix
    if discriminant > 0:
        # Real and distinct roots
        root1 = (-b + math.sqrt(discriminant)) / (2 * a)
        root2 = (-b - math.sqrt(discriminant)) / (2 * a)
        directrix = root1 + (c / (2 * a))
    elif discriminant == 0:
        # Real and repeated roots
        root = -b / (2 * a)
        directrix = root + c / (2 * a)
    else:
        # Complex roots
        raise ValueError(""The parabola has complex roots and does not have a directrix."")
    
    return directrix",fail,fail,"[[5, 3, 2]]","[[0, 0, 0]]","
def parabola_directrix(a, b, c): 
  return ((int)(c - ((b * b) + 1) * 4 * a ))
","""""""
Write a function to find the directrix of a parabola.
assert parabola_directrix(5,3,2)==-198
""""""
",parabola_directrix
Mbpp/310,"def string_to_tuple(string):
    return tuple(string)",fail,fail,[['python 3.0']],[['hello   world']],"
def string_to_tuple(str1):
    result = tuple(x for x in str1 if not x.isspace()) 
    return result
","""""""
Write a function to convert a given string to a tuple of characters.
assert string_to_tuple(""python 3.0"")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')
""""""
",string_to_tuple
Mbpp/300,"import math
def count_binary_seq(n):
    # Base case: n = 0
    if n == 0:
        return 1
    
    # Total count for n = 0 is 2 (empty sequence)
    total_count = 2
    
    # Recursive case: sum of first n bits must equal sum of last n bits
    # For each bit (0 or 1) in the middle n-1 positions, there are 2 choices
    for middle_bit in (0, 1):
        count = 2 ** (n - 1)
        # Sum of first n bits equals sum of last n bits when the middle bit is 0
        if middle_bit == 0:
            total_count += count
        # Sum of first n bits equals sum of last n bits when the middle bit is 1
        else:
            total_count += count
    
    # Return the total count
    return total_count",fail,fail,[[1]],[[4]],"
def count_binary_seq(n): 
	nCr = 1
	res = 1
	for r in range(1, n + 1): 
		nCr = (nCr * (n + 1 - r)) / r 
		res += nCr * nCr 
	return res 
","""""""
Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.
assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)
""""""
",count_binary_seq
Mbpp/294,"def find_max_value(lst):
    """"""
    Finds the maximum value in a given heterogeneous list.
    
    :param lst: A list containing various data types.
    :return: The maximum value in the list.
    """"""
    if not lst:
        return None
    
    max_val = max(lst)
    return max_val

# Test the function with the provided example
assert find_max_value(['Python', 3, 2, 4, 5, 'version']) == 5",fail,fail,[],[],"
def max_val(listval):
     max_val = max(i for i in listval if isinstance(i, int)) 
     return max_val
","""""""
Write a function to find the maximum value in a given heterogeneous list.
assert max_val(['Python', 3, 2, 4, 5, 'version'])==5
""""""
",max_val
Mbpp/305,"def start_with_p(word_list):
    """"""
    Returns two words from a list of words starting with the letter 'p'.
    
    :param word_list: List of words
    :return: Tuple of two words starting with 'p'
    """"""
    result = []
    for word in word_list:
        if word.startswith('p'):
            result.append(word)
    return result

# Test case
assert start_with_p([""Python PHP"", ""Java JavaScript"", ""c c++""]) == ('Python', 'PHP')",fail,fail,[],[],"
import re
def start_withp(words):
    for w in words:
        m = re.match(""(P\w+)\W(P\w+)"", w)
        if m:
            return m.groups()
","""""""
Write a function to return two words from a list of words starting with letter 'p'.
assert start_withp([""Python PHP"", ""Java JavaScript"", ""c c++""])==('Python', 'PHP')
""""""
",start_withp
Mbpp/283,"def validate(number):
    # Convert the number to a string to iterate over each digit
    digits = list(number)
    
    # Initialize a dictionary to store the frequency of each digit
    digit_freq = {}
    
    # Count the frequency of each digit
    for digit in digits:
        if digit in digit_freq:
            digit_freq[digit] += 1
        else:
            digit_freq[digit] = 1
    
    # Check if the frequency of each digit is less than or equal to the digit itself
    for freq in digit_freq.values():
        if freq > digit:
            return False
    
    return True",fail,fail,[[1234]],[[9]],"
def validate(n): 
    digits = [int(digit) for digit in str(n)]
    return all(digit >= digits.count(digit) for digit in digits)
","""""""
Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.
assert validate(1234) == True
""""""
",validate
Mbpp/432,"def median_trapezium(a, b, h):
    """"""
    Calculate the median length of a trapezium.

    Parameters:
    a (int): The length of the top base.
    b (int): The length of the bottom base.
    h (int): The height of the trapezium.

    Returns:
    int: The median length of the trapezium.
    """"""
    # Calculate the area of the trapezium
    area = (a + b) / 2 * h

    # Calculate the total perimeter
    perimeter = a + b + 2 * (h)

    # Calculate the median length
    # The median length is half of the perimeter
    median_length = perimeter / 2

    return median_length",fail,fail,"[[15, 25, 35]]","[[2.3, 4.7, 3.9]]","
def median_trapezium(base1,base2,height):
    return (base1 + base2) / 2
","""""""
Write a function to find the median length of a trapezium.
assert median_trapezium(15,25,35)==20
""""""
",median_trapezium
Mbpp/389,"def find_lucas(n):
    # Base cases
    if n == 0:
        return 0
    if n == 1:
        return 1
    
    # Initialize the first two Lucas numbers
    lucas = [0, 1]
    
    # Generate the Lucas sequence up to the nth term
    for i in range(2, n):
        lucas.append(lucas[i-1] + lucas[i-2])
    
    return lucas[n-1]",fail,fail,[[9]],[[15]],"
def find_lucas(n): 
	if (n == 0): 
		return 2
	if (n == 1): 
		return 1
	return find_lucas(n - 1) + find_lucas(n - 2) 
","""""""
Write a function to find the n'th lucas number.
assert find_lucas(9) == 76
""""""
",find_lucas
Mbpp/440,"def find_adverb_position(sentence):
    words = sentence.split()
    for i, word in enumerate(words):
        if word.endswith('ly'):
            return i, word, word
    return None, None, None",fail,fail,[['clearly!! we can see the sky']],[['heavily and quickly we ran down the steep hill']],"
import re
def find_adverb_position(text):
    for m in re.finditer(r""\w+ly"", text):
        return (m.start(), m.end(), m.group(0))
","""""""
Write a function to find the first adverb and their positions in a given sentence.
assert find_adverb_position(""clearly!! we can see the sky"")==(0, 7, 'clearly')
""""""
",find_adverb_position
Mbpp/457,"def find_min_sublist(lst):
    """"""
    Finds the sublist with the minimum length in the given list.
    
    Args:
        lst (list): A list of integers or any comparable elements.
        
    Returns:
        sublist (list): The sublist with the minimum length.
    """"""
    min_length = len(lst)
    min_sublist = []
    
    for i in range(len(lst)):
        for j in range(i + 1, len(lst) + 1):
            sublist = lst[i:j]
            if len(sublist) < min_length:
                min_length = len(sublist)
                min_sublist = sublist
    
    return min_sublist

# Test cases
assert find_min_sublist([1, 1, 2, 1, 2, 3]) == [1]
assert find_min_sublist([1, 2, 3]) == [1]
assert find_min_sublist([1, 1, 1, 1]) == [1]
assert find_min_sublist([]) == []",fail,fail,[],[],"
def Find_Min(lst): 
    return min(lst, key=len) 
","""""""
Write a python function to find the sublist having minimum length.
assert Find_Min([[1],[1,2],[1,2,3]]) == [1]
""""""
",Find_Min
Mbpp/560,"def union_elements(t1, t2):
    # Convert tuples to sets to easily find unique elements
    set1 = set(t1)
    set2 = set(t2)
    
    # Find the union of the two sets
    union_set = set1.union(set2)
    
    # Convert the union set back to a sorted list
    sorted_union = sorted(union_set)
    
    return sorted_union",fail,fail,"[[[3, 4, 5, 6], [5, 7, 4, 10]]]","[[[1, 1, 2, 3, 4], [2, 3, 3, 4, 5]]]","
def union_elements(test_tup1, test_tup2):
  return tuple(sorted(set(test_tup1 + test_tup2)))
","""""""
Write a function to find the union of the elements of two given tuples and output them in sorted order.
assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)
""""""
",union_elements
Mbpp/450,"def extract_string(string_list, size):
    """"""
    Extract specified size of strings from a given list of string values.

    :param string_list: List of strings.
    :param size: The number of strings to extract.
    :return: A list containing the specified number of strings from the input list.
    """"""
    return string_list[:size]",fail,fail,"[[['Python', 'list', 'exercises', 'practice', 'solution'], 8]]","[[['abcdef', 'xyz', 'pqr', 'lmnop', 'abcde'], 5]]","
def extract_string(str1, l):
    return [e for e in str1 if len(e) == l] 
","""""""
Write a function to extract specified size of strings from a given list of string values.
assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']
""""""
",extract_string
Mbpp/470,"def add_pairwise(tup):
    # Ensure the tuple has at least two elements
    if len(tup) < 2:
        raise ValueError(""Tuple must have at least two elements for pairwise addition."")
    
    # Perform pairwise addition of neighboring elements
    result = []
    for i in range(len(tup) - 1):
        result.append(tup[i] + tup[i + 1])
    
    return result",fail,fail,"[[[1, 5, 7, 8, 10]]]","[[[1, 2, -3, 4, 5]]]","
def add_pairwise(test_tup):
  return tuple(a + b for a, b in zip(test_tup, test_tup[1:]))
","""""""
Write a function to find the pairwise addition of the neighboring elements of the given tuple.
assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)
""""""
",add_pairwise
Mbpp/554,"def odd_numbers(numbers):
    """"""
    Returns a list containing only the odd integers from the input list.
    """"""
    return [num for num in numbers if num % 2 != 0]

# Test the function
assert odd_numbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5]",fail,fail,[],[],"
def Split(l): 
    return list(filter(lambda x: x % 2 == 1, l))
","""""""
Write a python function which takes a list of integers and only returns the odd ones.
assert Split([1,2,3,4,5,6]) == [1,3,5]
""""""
",Split
Mbpp/427,"def change_date_format(date_str):
    # Split the input date string into year, month, and day components
    year, month, day = map(int, date_str.split('-'))
    
    # Construct the new date string in the desired format
    new_date_str = f""{day}-{month}-{year}""
    
    return new_date_str",fail,fail,[['2026-01-02']],[['2021-1-026']],"
import re
def change_date_format(dt):
    return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)
","""""""
Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.
assert change_date_format(""2026-01-02"") == '02-01-2026'
""""""
",change_date_format
Mbpp/468,"def max_product(arr):
    """"""
    Function to find the maximum product formed by multiplying numbers of an increasing subsequence.
    
    Args:
        arr (list): A list of integers.
        
    Returns:
        int: The maximum product of an increasing subsequence.
    """"""
    # Initialize variables
    max_prod = 0
    curr_prod = 1
    start = 0
    end = 0
    
    # Iterate through the array
    for i in range(1, len(arr)):
        if arr[i] > arr[i - 1]:
            # Update current product
            curr_prod *= arr[i]
            
            # Update start and end indices if current product is greater
            if curr_prod > max_prod:
                max_prod = curr_prod
                start = i - 1
                end = i
    
    return max_prod",fail,fail,"[[[3, 100, 4, 5, 150, 6]]]","[[[-3, -100, -4, -5, -150, -6]]]","
def max_product(arr):   
  # record the correspond ending element to maintain the increasing subsequence
  ret = max_ending = min_ending = (arr[0], arr[0])
  for n in arr[1:]:
    if n > max_ending[1]:
      max_ending = max((max_ending[0] * n, n), max_ending, key=lambda x: x[0])
    else:
      max_ending = (n, n)
    if n > min_ending[1]:
      min_ending = min((min_ending[0] * n, n), min_ending, key=lambda x: x[0])
    else:
      min_ending = (n, n)
    ret = max(ret, max_ending, min_ending, key=lambda x: x[0])
  return ret[0]
","""""""
Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.
assert max_product([3, 100, 4, 5, 150, 6]) == 3000
""""""
",max_product
Mbpp/311,"def set_left_most_unset_bit(n):
    """"""
    Sets the left most unset bit in the binary representation of a given number.
    
    Args:
        n (int): The number to modify.
        
    Returns:
        int: The number with the left most unset bit set.
    """"""
    # Convert the number to its binary representation
    binary_representation = bin(n)[2:]
    
    # Find the position of the first unset bit from the left
    left_most_unset_bit_index = binary_representation.find('0')
    
    # If there are no unset bits (all bits are 1), return the original number
    if left_most_unset_bit_index == len(binary_representation):
        return n
    
    # Set the left most unset bit to 1
    new_binary_representation = binary_representation[:left_most_unset_bit_index] + '1' + binary_representation[left_most_unset_bit_index:]
    
    # Convert the new binary representation back to an integer
    result = int(new_binary_representation, 2)
    
    return result",fail,fail,[[10]],[[125]],"
def set_left_most_unset_bit(n): 
    if not (n & (n + 1)): 
        return n 
    pos, temp, count = 0, n, 0 
    while temp: 
        if not (temp & 1): 
            pos = count      
        count += 1
        temp >>= 1
    return (n | (1 << (pos))) 
","""""""
Write a python function to set the left most unset bit.
assert set_left_most_unset_bit(10) == 14
""""""
",set_left_most_unset_bit
Mbpp/415,"def max_Product(arr):
    # Initialize variables to keep track of the maximum product and the pair producing it
    max_prod = float('-inf')
    max_pair = (None, None)
    
    # Iterate through the array to find the pair with the highest product
    for i in range(len(arr)):
        # Skip zero since multiplying by zero will always result in zero
        if arr[i] == 0:
            continue
        
        # Initialize current product and pair
        current_prod = arr[i]
        current_pair = (arr[i],)
        
        # Update current product and pair if a larger product is found
        for j in range(i + 1, len(arr)):
            # Update current product by multiplying with the next element
            current_prod *= arr[j]
            current_pair = (current_pair[0], arr[j])
            
            # Check if the current product is greater than max_prod
            if current_prod > max_prod:
                max_prod = current_prod
                max_pair = current_pair
    
    return max_pair",fail,fail,"[[[1, 2, 3, 4, 7, 0, 8, 4]]]","[[[-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]]","
def max_Product(arr): 
    pairs = [(a, b) for a in arr for b in arr if a != b]
    return max(pairs, key=lambda x: x[0] * x[1])
","""""""
Write a python function to find a pair with highest product from a given array of integers.
assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)
""""""
",max_Product
Mbpp/426,"def filter_odd_numbers(numbers):
    """"""
    Filter odd numbers from a given list.
    
    Args:
    numbers (list): A list of integers.
    
    Returns:
    list: A new list containing only the odd numbers from the input list.
    """"""
    return [num for num in numbers if num % 2 != 0]

# Test the function
assert filter_odd_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 3, 5, 7, 9]",fail,fail,[],[],"
def filter_oddnumbers(nums):
    return [n for n in nums if n % 2 == 1]
","""""""
Write a function to filter odd numbers.
assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]
""""""
",filter_oddnumbers
Mbpp/429,"def extract_elementwise_and_tuples(tup1, tup2):
    # Initialize lists to store the results
    elementwise = []
    tuples = []

    # Iterate over the elements of the first tuple
    for i in range(len(tup1)):
        # If the current elements of both tuples are equal, append 1 to the tuples list
        if tup1[i] == tup2[i]:
            tuples.append(1)
        # Otherwise, append 0 to the elementwise list
        else:
            elementwise.append(0)

    return elementwise, tuples

# Test the function with the provided example
assert extract_elementwise_and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",fail,fail,[],[],"
def and_tuples(test_tup1, test_tup2):
  return tuple(x & y for x, y in zip(test_tup1, test_tup2))
","""""""
Write a function to extract the elementwise and tuples from the given two tuples.
assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)
""""""
",and_tuples
Mbpp/273,"def subtract_elements(t1, t2):
    """"""
    Function to subtract elements of two tuples at the same index.
    
    Args:
        t1 (tuple): A tuple of elements.
        t2 (tuple): Another tuple of elements.
        
    Returns:
        tuple: A new tuple where each element is the difference between the corresponding elements in t1 and t2.
    """"""
    result = ()
    for i, val1 in enumerate(t1):
        result += (val1 - t2[i],)
    return result

# Test case
assert subtract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",fail,fail,[],[],"
def substract_elements(test_tup1, test_tup2):
  return tuple(x - y for x, y in zip(test_tup1, test_tup2))
","""""""
Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.
assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)
""""""
",substract_elements
Mbpp/265,"def list_split(lst, n):
    """"""
    Splits a list into sublists every nth element.
    
    Args:
        lst (list): The original list.
        n (int): The index at which to split the list.
        
    Returns:
        list: A list of sublists, each containing every nth element starting from the first.
    """"""
    result = []
    for i in range(0, len(lst), n):
        result.append(lst[i:i+n])
    return result",fail,fail,"[[['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3]]","[[[], 1]]","
def list_split(S, step):
    return [S[i::step] for i in range(step)]
","""""""
Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.
assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]
""""""
",list_split
Mbpp/422,"def find_average_of_cube(n):
    """"""
    Calculate the average of the cubes of the first n natural numbers.
    
    Args:
        n (int): The number of natural numbers to consider.
        
    Returns:
        float: The average of the cubes of the first n natural numbers.
    """"""
    # Calculate the sum of cubes of the first n natural numbers
    sum_of_cubes = sum(i**3 for i in range(1, n+1))
    
    # Calculate the average by dividing the sum by n
    average = sum_of_cubes / n
    
    return average

# Test the function with the given assertion
assert find_average_of_cube(2) == 4.5",fail,fail,[],[],"
def find_Average_Of_Cube(n):  
    return sum([(i ** 3) for i in range(1, n + 1)]) / n
","""""""
Write a python function to find the average of cubes of first n natural numbers.
assert find_Average_Of_Cube(2) == 4.5
""""""
",find_Average_Of_Cube
Mbpp/435,"def last_digit(n):
    """"""
    Returns the last digit of the given number.
    """"""
    return n % 10

# Test cases
assert last_digit(123) == 3
assert last_digit(456) == 6
assert last_digit(789) == 9
assert last_digit(0) == 0",fail,fail,[],[],"
def last_Digit(n) :
    if n < 0: 
        n = -n
    return n % 10
","""""""
Write a python function to find the last digit of a given number.
assert last_Digit(123) == 3
""""""
",last_Digit
Mbpp/463,"def max_subarray_product(arr):
    """"""
    Function to find the maximum product subarray of the given array.
    
    Args:
        arr (list): A list of integers.
        
    Returns:
        int: The maximum product of a contiguous subarray.
    """"""
    if not arr:
        return 0
    
    max_product = arr[0]
    current_product = arr[0]
    
    for num in arr[1:]:
        current_product *= num
        if current_product > max_product:
            max_product = current_product
        else:
            current_product = num
    
    return max_product",fail,fail,"[[[1, -2, -3, 0, 7, -8, -2]]]","[[[-2, 4, -6, 8, 10, -12, 14, -16]]]","
def max_subarray_product(arr):
	max_so_far = min_ending = max_ending = arr[0]
	for n in arr[1:]:
		min_ending, max_ending = min(n, min_ending * n, max_ending * n), max(n, min_ending * n, max_ending * n)
		max_so_far = max(max_so_far, max_ending)
	return max_so_far
","""""""
Write a function to find the maximum product subarray of the given array.
assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112
""""""
",max_subarray_product
Mbpp/558,"def digit_distance_nums(num1, num2):
    """"""
    Calculate the sum of the absolute differences between corresponding digits of two numbers.
    
    Args:
        num1 (int): The first number.
        num2 (int): The second number.
        
    Returns:
        int: The sum of the absolute differences between corresponding digits.
    """"""
    # Ensure both numbers have the same length
    assert len(str(num1)) == len(str(num2)), ""Numbers must have the same length""
    
    # Calculate the sum of absolute differences
    digit_sum = sum(abs(int(digit1) - int(digit2)) for digit1, digit2 in zip(str(num1), str(num2)))
    
    return digit_sum",pass,fail,[],"[[12345, 9]]","
def digit_distance_nums(n1, n2):
    return sum([abs(int(c1) - int(c2)) for c1, c2 in zip(str(n1), str(n2))])
","""""""
Write a python function to find the sum of the per-digit difference between two integers.
assert digit_distance_nums(1,2) == 1
""""""
",digit_distance_nums
Mbpp/565,"def split_string(s):
    """"""Split a string into individual characters.""""""
    return list(s)

# Test the function
assert split_string('python') == ['p', 'y', 't', 'h', 'o', 'n']",fail,fail,[],[],"
def split(word): 
    return list(word)
","""""""
Write a python function to split a string into characters.
assert split('python') == ['p','y','t','h','o','n']
""""""
",split
Mbpp/562,"def find_max_length(lst):
    """"""
    Finds the length of the longest sublist in a given list.

    :param lst: A list of lists.
    :return: The length of the longest sublist.
    """"""
    max_length = 0
    for sublist in lst:
        if len(sublist) > max_length:
            max_length = len(sublist)
    return max_length

# Test cases
assert find_max_length([[1],[1,4],[5,6,7,8]]) == 4
assert find_max_length([[1,2,3],[4,5],[6,7,8]]) == 3
assert find_max_length([[1,2,3,4,5], [6,7,8,9], [10]]) == 5
assert find_max_length([[1,2,3,4], [5,6,7,8], [9]]) == 3",fail,fail,[],[],"
def Find_Max_Length(lst):  
    return len(max(lst, key = len))
","""""""
Write a python function to find the length of the longest sublists.
assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4
""""""
",Find_Max_Length
Mbpp/564,"def count_Pairs(lst):
    count = 0
    for i in range(len(lst)):
        for j in range(i + 1, len(lst)):
            if lst[i] != lst[j]:
                count += 1
    return count",fail,fail,"[[[1, 2, 1], 3]]","[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10]]","
def count_Pairs(arr,n): 
    cnt = 0; 
    for i in range(n): 
        for j in range(i + 1,n): 
            if (arr[i] != arr[j]): 
                cnt += 1; 
    return cnt; 
","""""""
Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.
assert count_Pairs([1,2,1],3) == 2
""""""
",count_Pairs
Mbpp/556,"def find_odd_pair(lst, target):
    """"""
    Count the number of pairs whose XOR value is odd.

    :param lst: List of integers.
    :param target: Target value for the pair's XOR result.
    :return: Number of pairs whose XOR is odd.
    """"""
    count = 0
    n = len(lst)
    for i in range(n):
        for j in range(i + 1, n):
            if (lst[i] ^ lst[j]) % 2 != 0:
                count += 1
    return count

# Test the function
assert find_odd_pair([5, 4, 7, 2, 1], 5) == 6",fail,fail,[],[],"
def find_Odd_Pair(A,N) : 
    oddPair = 0
    for i in range(0,N) :  
        for j in range(i+1,N) :  
            if ((A[i] ^ A[j]) % 2 != 0):  
                oddPair+=1  
    return oddPair  
","""""""
Write a python function to count the number of pairs whose xor value is odd.
assert find_Odd_Pair([5,4,7,2,1],5) == 6
""""""
",find_Odd_Pair
Mbpp/445,"def index_multiplication(tup1, tup2):
    # Ensure both tuples have the same length
    assert len(tup1) == len(tup2), ""Tuples must have the same length""
    
    result = []
    for i in range(len(tup1)):
        # Perform element-wise multiplication
        result.append(tup1[i] * tup2[i])
    
    return result",fail,fail,"[[[[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]]]","[[[[1, 1], [2, 2], [3, 3], [4, 4]], [[5, 5], [6, 6], [7, 7], [8, 8]]]]","
def index_multiplication(test_tup1, test_tup2):
  return tuple(tuple(a * b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
","""""""
Write a function to perform index wise multiplication of tuple elements in the given two tuples.
assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))
""""""
",index_multiplication
Mbpp/433,"def check_greater(arr, num):
    """"""
    Check if the given number is greater than all elements in the array.
    
    Args:
        arr (list): A list of integers.
        num (int): The number to compare against the elements in the array.
        
    Returns:
        bool: True if the number is greater than all elements in the array, False otherwise.
    """"""
    return num > max(arr)",pass,fail,[],"[[[], 10]]","
def check_greater(arr, number):
  return all(number > el for el in arr)
","""""""
Write a function to check whether the entered number is greater than the elements of the given array.
assert check_greater([1, 2, 3, 4, 5], 4) == False
""""""
",check_greater
Mbpp/453,"def sumofFactors(n):
    # Initialize the sum with zero
    sum = 0
    
    # Iterate through all numbers from 1 to n
    for i in range(1, n + 1):
        # Check if the current number is even
        if i % 2 == 0:
            # Add the even number to the sum
            sum += i
    
    return sum",fail,fail,[[18]],[[101]],"
import math 
def sumofFactors(n) : 
    if (n % 2 != 0) : 
        return 0
    return sum([i for i in range(2, n + 1) if n % i == 0 and i % 2 == 0])
","""""""
Write a python function to find the sum of even factors of a number.
assert sumofFactors(18) == 26
""""""
",sumofFactors
Mbpp/563,"def extract_values(string):
    """"""
    Extract values between quotation marks from a string.
    
    :param string: The input string.
    :return: A list containing the values between quotation marks.
    """"""
    return [word for word in string.split() if word.startswith('""') and word.endswith('""')]",fail,fail,"[['""Python"", ""PHP"", ""Java""']]","[['""red"" ""blue"" ""green"" ""yellow"" ""red"" ""blue"" ""green"" ""yellow""']]","
import re
def extract_values(text):
 return (re.findall(r'""(.*?)""', text))
","""""""
Write a function to extract values between quotation marks from a string.
assert extract_values('""Python"", ""PHP"", ""Java""')==['Python', 'PHP', 'Java']
""""""
",extract_values
Mbpp/559,"def max_sub_array_sum(arr):
    """"""
    Function to find the sum of the largest contiguous sublist in the given list.
    
    Args:
        arr (list): A list of integers.
        
    Returns:
        int: The sum of the largest contiguous sublist.
    """"""
    max_sum = arr[0]
    current_sum = arr[0]
    start = 0
    
    for i in range(1, len(arr)):
        if arr[i] > arr[i - 1]:
            current_sum = arr[i] + current_sum
            start = i
        else:
            current_sum = max(arr[i], current_sum)
    
    return current_sum",fail,fail,"[[[-2, -3, 4, -1, -2, 1, 5, -3], 8]]","[[[], 0]]","
def max_sub_array_sum(a, size):
  max_so_far = 0
  max_ending_here = 0
  for i in range(0, size):
    max_ending_here = max_ending_here + a[i]
    if max_ending_here < 0:
      max_ending_here = 0
    elif (max_so_far < max_ending_here):
      max_so_far = max_ending_here
  return max_so_far
","""""""
Write a function to find the sum of the largest contiguous sublist in the given list.
assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7
""""""
",max_sub_array_sum
Mbpp/462,"from itertools import combinations
def combinations_list(lst):
    return list(combinations(lst, r) for r in range(len(lst) + 1))",fail,fail,"[[['orange', 'red', 'green', 'blue']]]","[[['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']]]","
def combinations_list(list1):
    if len(list1) == 0:
        return [[]]
    result = []
    for el in combinations_list(list1[1:]):
        result += [el, el+[list1[0]]]
    return result
","""""""
Write a function to find all possible combinations of the elements of a given list.
assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]
""""""
",combinations_list
Mbpp/460,"def extract_first_elements(sublists):
    return [first_element for sublist in sublists for first_element in sublist]

# Test case
assert extract_first_elements([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",fail,fail,[],[],"
def Extract(lst): 
    return [item[0] for item in lst] 
","""""""
Write a python function to get the first element of each sublist.
assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]
""""""
",Extract
Mbpp/473,"def tuple_intersection(tuples_list):
    # Convert all tuples to sets to remove duplicates and order, then find intersection
    intersection_set = set(tuples_list[0])
    for tup in tuples_list[1:]:
        intersection_set &= set(tup)  # Use set intersection operator
    return intersection_set",fail,fail,"[[[[3, 4], [5, 6], [9, 10], [4, 5]], [[5, 4], [3, 4], [6, 5], [9, 11]]]]","[[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3], [7, 8, 9], [10, 11, 12]]]]","
def tuple_intersection(test_list1, test_list2):
  return set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])
","""""""
Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.
assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}
""""""
",tuple_intersection
Mbpp/568,"def empty_list(N):
    """"""
    Creates a list of N empty dictionaries.
    
    :param N: int, the number of dictionaries to create.
    :return: list, a list of N empty dictionaries.
    """"""
    return [] * N",fail,fail,[[5]],[[1]],"
def empty_list(length):
 return [{} for _ in range(length)]
","""""""
Write a function to create a list of N empty dictionaries.
assert empty_list(5)==[{},{},{},{},{}]
""""""
",empty_list
Mbpp/555,"def difference(n):
    # Sum of cubes of the first n natural numbers
    sum_of_cubes = n * (n + 1) * (2 * n + 1) // 6
    
    # Sum of the first n natural numbers
    sum_n = n * (n + 1) // 2
    
    # Calculate the difference
    difference = sum_of_cubes - sum_n
    
    return difference",fail,fail,[[3]],[[10]],"
def difference(n) :  
    S = (n*(n + 1))//2;  
    res = S*(S-1);  
    return res;  
","""""""
Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.
assert difference(3) == 30
""""""
",difference
Mbpp/448,"def cal_sum(n):
    """"""
    Calculate the sum of Perrin numbers.
    
    Args:
        n (int): The index of the Perrin number to calculate.
        
    Returns:
        int: The sum of the Perrin numbers up to the given index.
    """"""
    # Initialize the first two Perrin numbers
    perrin_numbers = [1, 2]
    
    # Generate Perrin numbers up to the given index
    for i in range(2, n):
        next_perrin_number = sum(perrin_numbers) * 2
        if next_perrin_number % 5 == 0:
            perrin_numbers.append(next_perrin_number)
    
    # Return the sum of Perrin numbers up to the given index
    return sum(perrin_numbers)",fail,fail,[[9]],[[-5]],"
def cal_sum(n): 
	a = 3
	b = 0
	c = 2
	if (n == 0): 
		return 3
	if (n == 1): 
		return 3
	if (n == 2): 
		return 5
	sum = 5
	while (n > 2): 
		d = a + b 
		sum = sum + d 
		a = b 
		b = c 
		c = d 
		n = n - 1
	return sum
","""""""
Write a function to calculate the sum of perrin numbers.
assert cal_sum(9) == 49
""""""
",cal_sum
Mbpp/557,"def toggle_string(s):
    """"""
    Function to toggle the case of all characters in a string.
    
    :param s: str, the input string
    :return: str, the string with all characters toggled between lower and upper case
    """"""
    return s.upper().lower()",fail,fail,[['Python']],[['uSB']],"
def toggle_string(string):
 return string.swapcase()
","""""""
Write a function to toggle the case of all characters in a string.
assert toggle_string(""Python"")==(""pYTHON"")
""""""
",toggle_string
Mbpp/567,"def issort_list(lst):
    """"""
    Check if a given list is sorted in ascending order.
    
    Args:
        lst (list): The list to be checked.
        
    Returns:
        bool: True if the list is sorted in ascending order, False otherwise.
    """"""
    # Check if the list is empty
    if not lst:
        return False
    
    # Compare the first and the last elements
    if lst[0] > lst[-1]:
        return False
    
    # Recursively check the sublists
    for i in range(1, len(lst) - 1):
        if lst[i] > lst[i + 1]:
            return False
    
    return True",pass,fail,[],[[[]]],"
def issort_list(list1):
    return all(a <= b for a, b in zip(list1, list1[1:]))
","""""""
Write a function to check whether a specified list is sorted or not.
assert issort_list([1,2,4,6,8,10,12,14,16,17])==True
""""""
",issort_list
Mbpp/475,"def sort_dict_by_value(d):
    return sorted(d.items(), key=lambda x: x[1])

# Test case
assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87}) == [('Chemistry', 87), ('Physics', 83), ('Math', 81)]",fail,fail,[],[],"
def sort_counter(dict1):
 return sorted(dict1.items(), key=lambda x: x[1], reverse=True)
","""""""
Write a function to sort a dictionary by value.
assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]
""""""
",sort_counter
Mbpp/576,"def is_Sub_Array(sub_list, main_list):
    """"""
    Check if a sublist is a part of a given main list.
    
    Args:
        sub_list (list): The sublist to be checked.
        main_list (list): The main list to check against.
        
    Returns:
        bool: True if sub_list is a sublist of main_list, False otherwise.
    """"""
    # Convert both lists to sets for efficient membership checking
    sub_set = set(sub_list)
    main_set = set(main_list)
    
    # Check if all elements of the sub_list are in the main_list
    return sub_set.issubset(main_set)",pass,fail,[],"[[[], [1, 2, 3]]]","
def is_Sub_Array(A,B): 
    a = 0
    b = 0
    while a < len(A) and b < len(B):
        if A[a] == B[b]:
            a += 1
            b += 1
        else:
            a += 1
    return b == len(B)
","""""""
Write a python function to check whether a list is sublist of another or not.
assert is_Sub_Array([1,4,3,5],[1,2]) == False
""""""
",is_Sub_Array
Mbpp/572,"def two_unique_nums(*lists):
    # Create an empty list to store unique elements
    unique_elements = []
    
    # Iterate through each list
    for list_ in lists:
        # Convert the list to a set to remove duplicates
        unique_set = set(list_)
        
        # Convert the set back to a list and append to the unique_elements list
        unique_elements.extend(list(unique_set))
    
    # Return the list of unique elements
    return unique_elements",fail,fail,"[[[1, 2, 3, 2, 3, 4, 5]]]","[[[1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 8, 9, 5, 6]]]","
def two_unique_nums(nums):
  return [n for n in nums if nums.count(n)==1]
","""""""
Write a python function to remove duplicate numbers from a given number of lists.
assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]
""""""
",two_unique_nums
Mbpp/577,"def last_Digit_Factorial(n):
    # Calculate the factorial of the number
    factorial = 1
    for i in range(1, n + 1):
        factorial *= i
    
    # Get the last digit of the factorial
    last_digit = factorial % 10
    
    return last_digit",pass,fail,[],[[2.5]],"
def last_Digit_Factorial(n): 
    if (n == 0): 
      return 1
    elif (n <= 2): 
      return n  
    elif (n == 3): 
      return 6
    elif (n == 4): 
      return 4 
    else: 
      return 0
","""""""
Write a python function to find the last digit in factorial of a given number.
assert last_Digit_Factorial(4) == 4
""""""
",last_Digit_Factorial
Mbpp/581,"def surface_area(base_edge, height):
    """"""
    Calculate the surface area of a square pyramid.

    Args:
        base_edge (int): The length of the base edge.
        height (int): The height of the pyramid.

    Returns:
        int: The surface area of the pyramid.
    """"""
    # Calculate the slant height using the Pythagorean theorem
    slant_height = (base_edge ** 2 + height ** 2) ** 0.5

    # Calculate the surface area using the formula for a square pyramid
    # 2 * (base area + 4 * slant height * side of base)
    base_area = base_edge ** 2
    surface_area = 2 * (base_area + 4 * slant_height * base_edge)

    return surface_area

# Test the function with the given assertion
assert surface_area(3, 4) == 33",fail,fail,[],[],"
def surface_Area(b,s): 
    return 2 * b * s + pow(b,2) 
","""""""
Write a python function to find the surface area of a square pyramid with a given base edge and height.
assert surface_Area(3,4) == 33
""""""
",surface_Area
Mbpp/586,"def split_and_join(arr, n):
    """"""
    Split a list at the nth element and add the first part to the end.
    
    :param arr: List to be split.
    :param n: Index at which to split the list.
    :return: Modified list with the first part appended to the end.
    """"""
    # Check if the index is valid
    if n < 0 or n >= len(arr):
        raise IndexError(""Index out of range for the given list."")
    
    # Split the list at the specified index
    first_part = arr[:n]
    second_part = arr[n:]
    
    # Join the two parts by appending the first part to the end of the second part
    result = second_part + first_part
    
    return result

# Test the function with the provided example
assert split_and_join([12,10,5,6,52,36], 2) == [5,6,52,36,12,10]",fail,fail,[],[],"
def split_Arr(l, n):
  return l[n:] + l[:n]
","""""""
Write a python function to split a list at the nth eelment and add the first part to the end.
assert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]
""""""
",split_Arr
Mbpp/592,"def sum_Of_product(n):
    # Calculate the sum of the product of consecutive binomial coefficients
    # The formula for the sum of the product of consecutive binomial coefficients (n choose k) * (n choose (k+1)) is:
    # (n + 1) * (n - 1)
    return (n + 1) * (n - 1)",fail,fail,[[3]],[[10]],"
def binomial_Coeff(n, k): 
    C = [0] * (k + 1); 
    C[0] = 1; # nC0 is 1 
    for i in range(1,n + 1):  
        for j in range(min(i, k),0,-1): 
            C[j] = C[j] + C[j - 1]; 
    return C[k]; 
def sum_Of_product(n): 
    return binomial_Coeff(2 * n, n - 1); 
","""""""
Write a python function to find the sum of the product of consecutive binomial co-efficients.
assert sum_Of_product(3) == 15
""""""
",sum_Of_product
Mbpp/583,"def catalan_number(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        catalan_values = [1, 1]
        for i in range(2, n + 1):
            catalan_values.append(catalan_values[i - 1] + catalan_values[i - 2])
        return catalan_values[n]",fail,fail,[[10]],[[3]],"
def catalan_number(num):
    if num <= 1:
         return 1   
    res_num = 0
    for i in range(num):
        res_num += catalan_number(i) * catalan_number(num - i - 1)
    return res_num
","""""""
Write a function which returns nth catalan number.
assert catalan_number(10)==16796
""""""
",catalan_number
Mbpp/587,"def list_to_tuple(lst):
    """"""
    Convert a list to a tuple.
    
    :param lst: A list of elements.
    :return: The list converted to a tuple.
    """"""
    return tuple(lst)

# Test the function
assert list_to_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)",fail,fail,[],[],"
def list_tuple(listx):
  return tuple(listx)
","""""""
Write a function to convert a list to a tuple.
assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)
""""""
",list_tuple
Mbpp/580,"def extract_even(nested_tuple):
    result = []
    stack = []
    for item in nested_tuple:
        if isinstance(item, tuple):
            stack.append(item)
        else:
            if len(stack) % 2 == 0:
                result.append(item)
            stack.pop()
    return tuple(result)",fail,fail,"[[[4, 5, [7, 6, [2, 4]], 6, 8]]]","[[[1, 2, 3, [4, 5, [6, 7, [8, 9, [10, 11, [12, 13, [14, 15, [16, 17, [18, 19, [20]]]]]]]]]]]]","
def even_ele(test_tuple, ): 
	res = tuple() 
	for ele in test_tuple: 
		if isinstance(ele, tuple): 
			res += (even_ele(ele), ) 
		elif ele % 2 == 0: 
			res += (ele, ) 
	return res 
def extract_even(test_tuple):
	return even_ele(test_tuple)
","""""""
Write a function to remove uneven elements in the nested mixed tuple.
assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)
""""""
",extract_even
Mbpp/593,"def removezero_ip(ip_address):
    """"""
    Remove leading zeroes from an IP address.
    
    :param ip_address: str
    :return: str
    """"""
    return ip_address.replace('0', '')",pass,fail,[],[['0.0.0.0']],"
import re
def removezero_ip(ip):
 return re.sub('\.[0]*', '.', ip)
","""""""
Write a function to remove leading zeroes from an ip address.
assert removezero_ip(""216.08.094.196"")==('216.8.94.196')
""""""
",removezero_ip
Mbpp/614,"def cumulative_sum(tuples):
    total = 0
    for tup in tuples:
        for num in tup:
            total += num
    return total

# Test case
assert cumulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30",fail,fail,[],[],"
def cummulative_sum(test_list):
  return sum(map(sum, test_list))
","""""""
Write a function to find the cumulative sum of all the values that are present in the given tuple list.
assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30
""""""
",cummulative_sum
Mbpp/598,"def armstrong_number(n):
    """"""Check if a given number is an Armstrong number.""""""
    # Convert the number to a string to easily access each digit
    str_n = str(n)
    
    # Calculate the sum of the cubes of its digits
    sum_of_cubes = sum(int(digit) ** 3 for digit in str_n)
    
    # An Armstrong number of three digits is of the form abc where a^3 + b^3 + c^3 = 153
    # For numbers with more than three digits, the logic extends similarly.
    # Here we check if the sum of the cubes of its digits equals the number itself
    
    return sum_of_cubes == n",pass,fail,[],[[3]],"
def armstrong_number(number):
    order = len(str(number))
    return sum([int(i) ** order for i in str(number)]) == number
","""""""
Write a function to check whether the given number is armstrong or not.
assert armstrong_number(153)==True
""""""
",armstrong_number
Mbpp/622,"def get_median(list1, list2):
    # Merge the two lists into one sorted list
    merged_list = sorted(list1 + list2)
    
    # If the length of the merged list is odd, the median is the middle element
    if len(merged_list) % 2 == 1:
        return merged_list[len(merged_list) // 2]
    
    # If the length of the merged list is even, the median is the average of the two middle elements
    else:
        return (merged_list[len(merged_list) // 2 - 1] + merged_list[len(merged_list) // 2]) / 2",fail,fail,"[[[1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5]]","[[[1, 4, 7, 10, 13, 16, 19, 22, 25, 28], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29], 10]]","
def get_median(arr1, arr2, n):
  i = 0
  j = 0
  m1 = -1
  m2 = -1
  count = 0
  while count < n + 1:
    count += 1
    if i == n:
      m1 = m2
      m2 = arr2[0]
      break
    elif j == n:
      m1 = m2
      m2 = arr1[0]
      break
    if arr1[i] <= arr2[j]:
      m1 = m2
      m2 = arr1[i]
      i += 1
    else:
      m1 = m2
      m2 = arr2[j]
      j += 1
  return (m1 + m2)/2
","""""""
Write a function to find the median of two sorted lists of same size.
assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0
""""""
",get_median
Mbpp/590,"import math
def polar_rect(r, theta):
    """"""
    Converts polar coordinates (r, theta) to rectangular (x, y) coordinates.

    Args:
        r (float): The radius.
        theta (float): The angle in radians.

    Returns:
        Tuple of floats (x, y):
            x: The rectangular coordinate.
            y: The imaginary part if theta is not an integer multiple of pi.
    """"""
    # Calculate the rectangular coordinates
    x = r * math.cos(theta)
    y = r * math.sin(theta)

    # Handle the case where theta is not an integer multiple of pi
    if theta % (math.pi * 2) != 0:
        y = 1j * y

    return (x, y)",fail,fail,"[[3, 4]]","[[0, 0]]","
import cmath
def polar_rect(x,y):
    cn = cmath.polar(complex(x, y))
    cn1 = cmath.rect(2, cmath.pi)
    return (cn, cn1)
","""""""
Write a function to convert polar coordinates to rectangular coordinates.
assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))
""""""
",polar_rect
Mbpp/596,"import sys
def tuple_size(tup):
    """"""
    Calculate the size in bytes of a given tuple.
    
    :param tup: Tuple to measure the size of.
    :return: Size in bytes of the tuple.
    """"""
    # Initialize the size to 0
    size = 0
    
    # Iterate over each element in the tuple
    for elem in tup:
        # Add the size of each element to the total size
        size += sys.getsizeof(elem)
    
    return size",fail,fail,"[[['A', 1, 'B', 2, 'C', 3]]]","[[[[1, 'Raju'], [2, 'Nikhil'], [3, 'Deepanshu']]]]","
import sys 
def tuple_size(tuple_list):
  return sys.getsizeof(tuple_list)
","""""""
Write a function to find the size in bytes of the given tuple.
assert tuple_size((""A"", 1, ""B"", 2, ""C"", 3) ) == sys.getsizeof((""A"", 1, ""B"", 2, ""C"", 3))
""""""
",tuple_size
Mbpp/589,"def perfect_squares(start, end):
    """"""Return a list of perfect squares between start and end inclusive.""""""
    result = []
    for i in range(start, end + 1):
        square = i ** 2
        result.append(square)
    return result",fail,fail,"[[1, 30]]","[[-10, -1]]","
import math
def perfect_squares(a, b):
    if a > b:
        a, b = b, a
    if b < 0:
        return []
    if a < 0:
        a = 0
    return list(filter(lambda x: math.sqrt(x).is_integer(), range(a, b+1)))
","""""""
Write a function to find perfect squares between two given numbers.
assert perfect_squares(1,30)==[1, 4, 9, 16, 25]
""""""
",perfect_squares
Mbpp/610,"def remove_kth_element(lst, k):
    if len(lst) < k:
        raise IndexError(""List has fewer than k elements"")
    return lst[:k] + lst[k+1:]",fail,fail,"[[[1, 1, 2, 3, 4, 4, 5, 1], 3]]","[[[1, 2, 3, 4, 5], 1]]","
def remove_kth_element(list1, k):
    return list1[:k-1] + list1[k:]
","""""""
Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.
assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]
""""""
",remove_kth_element
Mbpp/611,"def max_of_nth(matrix, n):
    """"""
    Given a matrix represented as a list of lists, returns the max element of the nth column.
    
    Args:
    matrix (list): A list of lists representing the matrix.
    n (int): The index of the column to find the maximum value.

    Returns:
    int: The maximum value in the nth column.
    """"""
    # Ensure the input is valid
    if not all(isinstance(row, list) for row in matrix):
        raise ValueError(""Matrix must be a list of lists."")
    
    # Ensure the column index is valid
    if not isinstance(n, int) or n < 0 or n >= len(matrix):
        raise ValueError(""Column index must be a non-negative integer less than the number of columns."")
    
    # Extract the nth column
    column = [row[n] for row in matrix]
    
    # Return the maximum value in the column
    return max(column)",pass,fail,[],"[[[[-5, -2, -10], [-8, -3, -7]], 2]]","
def max_of_nth(test_list, N):
  return max([sub[N] for sub in test_list])
","""""""
Write a function which given a matrix represented as a list of lists returns the max of the n'th column.
assert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19
""""""
",max_of_nth
Mbpp/624,"def to_uppercase(string):
    """"""
    Converts a given string to uppercase.
    
    :param string: The input string to convert.
    :return: The string converted to uppercase.
    """"""
    return string.upper()

# Test case
assert to_uppercase(""person"") == ""PERSON""",fail,fail,[],[],"
def is_upper(string):
  return string.upper()
","""""""
Write a python function to convert a given string to uppercase.
assert is_upper(""person"") ==""PERSON""
""""""
",is_upper
Mbpp/605,"def is_prime(num):
    """"""Check if the given integer is a prime number.""""""
    if num <= 1:
        return False
    elif num <= 3:
        return True
    elif num % 2 == 0 or num % 3 == 0:
        return False
    i = 5
    while i * i <= num:
        if num % i == 0 or num % (i + 2) == 0:
            return False
        i += 6
    return True

# Test the function
assert is_prime(13) == True",fail,fail,[],[],"
import math
def prime_num(num):
  if num <= 1:
    return False
  for i in range(2, int(math.sqrt(num)) + 1):
    if num % i == 0:
      return False
  return True
","""""""
Write a function to check if the given integer is a prime number.
assert prime_num(13)==True
""""""
",prime_num
Mbpp/607,"import re
def find_literals(text, pattern):
    # Use the re module to search for the regex pattern
    match = re.search(pattern, text)
    
    # If no match is found, return None for all parameters
    if not match:
        return None, None, None
    
    # Extract the matching substring
    match_substring = match.group()
    
    # Get the start and end indices of the match
    start_index = match.start()
    end_index = match.end()
    
    return match_substring, start_index, end_index",pass,fail,[],"[['', 'rfvPtELLC']]","
import re
def find_literals(text, pattern):
  match = re.search(pattern, text)
  if match is None:
    return None
  s = match.start()
  e = match.end()
  return (match.re.pattern, s, e)
","""""""
Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.
assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)
""""""
",find_literals
Mbpp/620,"def largest_subset(nums):
    """"""
    Finds the size of the largest subset of a list of numbers
    such that every pair is divisible.
    """"""
    # Create a dictionary to store the divisibility information
    # between each pair of numbers
    divisibility = {}
    
    # Populate the dictionary with divisibility information
    for i in range(len(nums)):
        for j in range(i + 1, len(nums)):
            if nums[i] % nums[j] == 0:
                divisibility[nums[i] * 2] = [nums[j]]
            else:
                # If the pair is not divisible, remove all previous entries
                # that include the current number or its multiples
                if nums[j] in divisibility:
                    del divisibility[nums[j] * 2]
    
    # Initialize the result with the size of the entire list
    result_size = len(nums)
    
    # Iterate through the dictionary to find the largest valid subset
    max_subset_size = 0
    for key, value in divisibility.items():
        if len(value) > max_subset_size:
            max_subset_size = len(value)
    
    return max_subset_size",fail,fail,"[[[1, 3, 6, 13, 17, 18]]]","[[[34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]]]","
def largest_subset(a):
	n = len(a)
	dp = [0 for _ in range(n)]
	dp[n - 1] = 1; 
	for i in range(n - 2, -1, -1):
		mxm = 0
		for j in range(i + 1, n):
			if a[j] % a[i] == 0 or a[i] % a[j] == 0:
				mxm = max(mxm, dp[j])
		dp[i] = 1 + mxm
	return max(dp)
","""""""
Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.
assert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4
""""""
",largest_subset
Mbpp/619,"def move_num(input_string):
    # Split the string into words and numbers
    words_and_numbers = input_string.split()
    
    # Initialize an empty list to store the words
    words = []
    
    # Iterate through the split elements
    for element in words_and_numbers:
        # If the element is a number, append it to a new list
        if isinstance(element, int) or isinstance(element, float):
            numbers.append(element)
        else:
            words.append(element)
    
    # Join the words back into a string
    output_string = ' '.join(words)
    
    # Append the numbers to the end of the output string
    output_string += ' ' + ' '.join(numbers)
    
    return output_string",fail,fail,[['I1love143you55three3000thousand']],"[['Hello! My age is 28. I was born on the 1st of January, 1992.']]","
def move_num(test_str):
  num_str = ''.join(i for i in test_str if i.isdigit())
  else_str = ''.join(i for i in test_str if not i.isdigit())
  return else_str + num_str
","""""""
Write a function to move all the numbers to the end of the given string.
assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'
""""""
",move_num
Mbpp/612,"def merge(sublists):
    result = [[''] * 2 for _ in range(len(sublists))]
    for i, sublist in enumerate(sublists):
        result[i][0] = sublist[0]
        result[i][1] = sublist[1]
    return result",fail,fail,"[[[['x', 'y'], ['a', 'b'], ['m', 'n']]]]","[[[['x', 1], ['y', 2], [True, 'z']]]]","
def merge(lst):  
    return [list(ele) for ele in list(zip(*lst))] 
","""""""
Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.
assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]
""""""
",merge
Mbpp/603,"def get_lucid_numbers(n):
    """"""
    Returns a list of all lucid (prime) numbers less than or equal to a given integer n.
    """"""
    def is_lucid(num):
        """"""Helper function to check if a number is lucid (prime).""""""
        if num < 2:
            return False
        for i in range(2, int(num ** 0.5) + 1):
            if num % i == 0:
                return False
        return True

    lucid_numbers = [i for i in range(2, n + 1) if is_lucid(i)]
    return lucid_numbers

# Test the function
assert get_lucid_numbers(10) == [1, 2, 3, 5, 7]",fail,fail,[],[],"
def get_ludic(n):
	ludics = []
	for i in range(1, n + 1):
		ludics.append(i)
	index = 1
	while(index != len(ludics)):
		first_ludic = ludics[index]
		remove_index = index + first_ludic
		while(remove_index < len(ludics)):
			ludics.remove(ludics[remove_index])
			remove_index = remove_index + first_ludic - 1
		index += 1
	return ludics
","""""""
Write a function to get all lucid numbers smaller than or equal to a given integer.
assert get_ludic(10) == [1, 2, 3, 5, 7]
""""""
",get_ludic
Mbpp/629,"def find_even_numbers(numbers):
    """"""
    Returns a list containing only the even numbers from the input list.
    """"""
    even_numbers = [num for num in numbers if num % 2 == 0]
    return even_numbers

# Test the function
assert find_even_numbers([1, 2, 3, 4, 5]) == [2, 4]",fail,fail,[],[],"
def Split(l): 
    return [num for num in l if num % 2 == 0]
","""""""
Write a python function to find even numbers from a list of numbers.
assert Split([1,2,3,4,5]) == [2,4]
""""""
",Split
Mbpp/615,"def average_tuple(tuples):
    averages = []
    for inner_tuple in tuples:
        average = sum(inner_tuple) / len(inner_tuple)
        averages.append(average)
    return averages",fail,fail,"[[[[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]]]","[[[[7, 8, 9], [-2, -4, -6], [0, 20, 30]]]]","
def average_tuple(nums):
    result = [sum(x) / len(x) for x in zip(*nums)]
    return result
","""""""
Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.
assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]
""""""
",average_tuple
Mbpp/604,"def reverse_words(text):
    # Split the text into words
    words = text.split()
    
    # Reverse each word and join them back together with spaces
    reversed_words = ' '.join(word[::-1] for word in words)
    
    return reversed_words",fail,fail,[['python program']],[['word']],"
def reverse_words(s):
	return ' '.join(reversed(s.split()))
","""""""
Write a function to reverse words seperated by spaces in a given string.
assert reverse_words(""python program"")==(""program python"")
""""""
",reverse_words
Mbpp/626,import math,fail,fail,[],[],"
def triangle_area(r) :  
    if r < 0 : 
        return None
    return r * r 
","""""""
Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.
assert triangle_area(-1) == None
""""""
",triangle_area
Mbpp/623,"def nth_power(nums, n):
    """"""
    Compute the n-th power of each number in a list.
    
    Args:
    nums (list): A list of numbers.
    n (int): The power to raise each number in the list to.
    
    Returns:
    list: A new list with each number in nums raised to the power of n.
    """"""
    return [num ** n for num in nums]

# Test the function
assert nth_power([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",fail,fail,[],[],"
def nth_nums(nums, n):
 nth_nums = list(map(lambda x: x ** n, nums))
 return nth_nums
","""""""
Write a function to compute the n-th power of each number in a list.
assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
""""""
",nth_nums
Mbpp/608,"def bell_Number(n):
    if n == 0:
        return 1
    else:
        return n * bell_Number(n - 1)",fail,fail,[[3]],[[10]],"
def bell_Number(n): 
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1):
        bell[i][0] = bell[i-1][i-1]
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] 
    return bell[n][0] 
","""""""
Write a python function to find nth bell number.
assert bell_Number(2) == 2
""""""
",bell_Number
Mbpp/635,"def heap_sort(lst):
    """"""
    Sorts a list using the heap sort algorithm.
    
    Args:
        lst (list): A list of integers to be sorted.
        
    Returns:
        list: The sorted list.
    """"""
    # Base case: if the list has zero or one element, it's already sorted
    if len(lst) <= 1:
        return lst
    
    # Build a max heap from the input list
    max_heap = []
    for i in range(len(lst)):
        max_heap.append(lst[i])
        # Ensure the max heap property is maintained
        heapify(max_heap, i)
    
    # Extract elements from the max heap and append them to the sorted list
    sorted_list = []
    while max_heap:
        # Extract the maximum element
        sorted_list.append(max_heap.pop(0))
        # Reduce the heap by one level
        heapify(max_heap, 0)
    
    return sorted_list",fail,pass,"[[[1, 3, 5, 7, 9, 2, 4, 6, 8, 0]]]",[],"
import heapq as hq
def heap_sort(iterable):
    hq.heapify(iterable)
    return [hq.heappop(iterable) for _ in range(len(iterable))]
","""""""
Write a function to sort the given list.
assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
""""""
",heap_sort
Mbpp/631,"def replace_spaces_and_underscores(text):
    # Replace spaces with underscores
    text = text.replace(' ', '_')
    
    # Replace underscores with spaces
    text = text.replace('_', ' ')
    
    return text

# Test the function
assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'",fail,fail,[],[],"
def replace_spaces(text):
  return """".join("" "" if c == ""_"" else (""_"" if c == "" "" else c) for c in text)
","""""""
Write a function to replace whitespaces with an underscore and vice versa in a given string.
assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'
""""""
",replace_spaces
Mbpp/730,"def remove_consecutive_duplicates(lst):
    """"""
    Remove consecutive duplicates from a given list.
    
    Args:
        lst (list): The input list with possible consecutive duplicates.
        
    Returns:
        list: The list with consecutive duplicates removed.
    """"""
    result = []
    seen = set()
    for item in lst:
        if item not in seen:
            seen.add(item)
            result.append(item)
    return result

# Test case
assert remove_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]",fail,fail,[],[],"
from itertools import groupby
def consecutive_duplicates(nums):
    return [key for key, _ in groupby(nums)] 
","""""""
Write a function to remove consecutive duplicates of a given list.
assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]
""""""
",consecutive_duplicates
Mbpp/735,"def toggle_middle_bits(n):
    # Convert the number to a binary string
    binary_str = bin(n)[2:]
    
    # Find the length of the binary string (excluding the '0b' prefix)
    length = len(binary_str)
    
    # If the length is odd, append a '1' to make it even
    if length % 2 != 0:
        binary_str += '1'
    
    # Convert the binary string back to an integer
    result = int(binary_str)
    
    return result",fail,fail,[[9]],[[2147483647]],"
def toggle_middle_bits(n): 
    binary = bin(n)[2:]
    toggled = ''.join(['0' if i == '1' else '1' for i in binary[1:-1]])
    return int(binary[0] + toggled + binary[-1], 2)
","""""""
Write a python function to toggle bits of the number except the first and the last bit. 
assert toggle_middle_bits(9) == 15
""""""
",toggle_middle_bits
Mbpp/720,"def add_dict_to_tuple(original_tuple, dictionary):
    # Convert the dictionary to a tuple
    dict_as_tuple = tuple(dictionary.items())
    
    # Concatenate the original tuple and the tuple representation of the dictionary
    result_tuple = original_tuple + dict_as_tuple
    
    return result_tuple",fail,fail,"[[[4, 5, 6], {'MSAM': 1, 'is': 2, 'best': 3}]]","[[[], {}]]","
def add_dict_to_tuple(test_tup, test_dict):
  return test_tup + (test_dict, )
","""""""
Write a function to add a dictionary to the tuple. The output should be a tuple.
assert add_dict_to_tuple((4, 5, 6), {""MSAM"" : 1, ""is"" : 2, ""best"" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})
""""""
",add_dict_to_tuple
Mbpp/633,"def pair_xor_Sum(numbers):
    """"""
    Calculate the sum of the XOR of all pairs of numbers in the given list.
    
    Args:
        numbers (list): A list of integers.
        
    Returns:
        int: The sum of the XOR of all pairs.
    """"""
    n = len(numbers)
    sum_xor = 0
    
    for i in range(n):
        for j in range(i + 1, n):
            sum_xor += numbers[i] ^ numbers[j]
    
    return sum_xor",fail,fail,"[[[5, 9, 7, 6], 4]]","[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10]]","
def pair_xor_Sum(arr,n) : 
    ans = 0 
    for i in range(0,n) :    
        for j in range(i + 1,n) :   
            ans = ans + (arr[i] ^ arr[j])          
    return ans 
","""""""
Write a python function to find the sum of xor of all pairs of numbers in the given list.
assert pair_xor_Sum([5,9,7,6],4) == 47
""""""
",pair_xor_Sum
Mbpp/734,"def sum_Of_Subarray_Prod(lst):
    """"""
    Calculate the sum of products of all possible sublists of a given list.
    
    Example:
    >>> sum_Of_Subarray_Prod([1, 2, 3])
    20
    """"""
    n = len(lst)
    total_sum = 0
    
    # Iterate over all possible lengths of sublists (from 1 to n)
    for i in range(1, n + 1):
        # Calculate the sum of products for sublists of length i
        subprod_sum = 1
        for j in range(i):
            subprod_sum *= lst[j]
        total_sum += subprod_sum
    
    return total_sum",fail,pass,"[[[1, 2, 3]]]",[],"
def sum_Of_Subarray_Prod(arr):
    result = 0  # final result
    partial = 0 # partial sum
    # stimulate the recursion
    while arr != []:
        partial = arr[-1] * (1 + partial)
        result += partial
        arr.pop()
    return result
","""""""
Write a python function to find sum of products of all possible sublists of a given list. 
assert sum_Of_Subarray_Prod([1,2,3]) == 20
""""""
",sum_Of_Subarray_Prod
Mbpp/728,"def sum_lists(list1, list2):
    """"""
    This function takes two lists as input and returns a new list where each element is the sum of the corresponding elements from the input lists.
    
    :param list1: A list of integers.
    :param list2: A list of integers.
    :return: A new list with the sums of corresponding elements from the input lists.
    """"""
    return [a + b for a, b in zip(list1, list2)]

# Test the function
assert sum_lists([10, 20, 30], [15, 25, 35]) == [25, 45, 65]",fail,fail,[],[],"
def sum_list(lst1,lst2):
  return [a + b for a, b in zip(lst1, lst2)] 
","""""""
Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].
assert sum_list([10,20,30],[15,25,35])==[25,45,65]
""""""
",sum_list
Mbpp/725,"def extract_quotation(text):
    """"""
    Extract values between quotation marks "" "" of the given string.
    
    Args:
        text (str): The input string containing quoted values.
        
    Returns:
        list: A list containing the values between quotation marks "" "".
    """"""
    return [word for word in text.split() if word.startswith('""') and word.endswith('""')]",fail,fail,"[['Cortex ""A53"" Based ""multi"" tasking ""Processor""']]","[['This is a ""nested \'quote\'"" example']]","
import re
def extract_quotation(text1):
  return re.findall(r'""(.*?)""', text1)
","""""""
Write a function to extract values between quotation marks "" "" of the given string.
assert extract_quotation('Cortex ""A53"" Based ""multi"" tasking ""Processor""') == ['A53', 'multi', 'Processor']
""""""
",extract_quotation
Mbpp/741,"def all_characters_same(string):
    """"""
    Check if all characters in the string are the same.
    
    Args:
        string (str): The input string to check.
        
    Returns:
        bool: True if all characters in the string are the same, False otherwise.
    """"""
    # Convert the string to a list to easily iterate over characters
    char_list = list(string)
    
    # Check if the length of the list is 1 (meaning all characters are the same)
    return len(char_list) == 1

# Test cases",fail,fail,[],[],"
def all_Characters_Same(s) :
    return all(ch == s[0] for ch in s[1:])
","""""""
Write a python function to check whether all the characters are same or not.
assert all_Characters_Same(""python"") == False
""""""
",all_Characters_Same
Mbpp/781,"def count_divisors(n):
    """"""Return the count of divisors of the given number n.""""""
    divisors = 0
    for i in range(1, int(n**0.5) + 1):
        if n % i == 0:
            divisors += 1
            if i != n // i:
                divisors += 1
    return divisors",fail,fail,[[10]],[[1]],"
import math 
def count_divisors(n) : 
    cnt = 0
    for i in range(1, (int)(math.sqrt(n)) + 1) : 
        if (n % i == 0) : 
            if (n / i == i) : 
                cnt = cnt + 1
            else : 
                cnt = cnt + 2
    return cnt % 2 == 0
","""""""
Write a python function to check whether the count of divisors is even. 
assert count_divisors(10)
""""""
",count_divisors
Mbpp/639,"def sum_long_names(names):
    # Filter out names that start with a lowercase letter
    filtered_names = [name for name in names if name[0].isupper()]
    
    # Calculate the sum of lengths of the remaining names
    total_length = sum(len(name) for name in filtered_names)
    
    return total_length

# Test the function with the provided example
assert sum_long_names(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16",fail,fail,[],[],"
def sample_nam(sample_names):
  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))
  return len(''.join(sample_names))
","""""""
Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.
assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16
""""""
",sample_nam
Mbpp/753,"def min_k(records, k):
    # Sort the records by the first element (assuming it's the primary key for sorting)
    records.sort(key=lambda x: x[0])
    
    # Return the first k records after sorting
    return records[:k]",fail,fail,"[[[['tanmay', 14], ['Amer', 11], ['Ayesha', 9], ['SKD', 16]], 1]]","[[[['Manjeet', 10], ['Akshat', 10], ['Akash', 10], ['Nikhil', 10]], 2]]","
def min_k(test_list, K):
  res = sorted(test_list, key = lambda x: x[1])[:K]
  return (res) 
","""""""
Write a function to find minimum k records from tuple list.  - in this case a verbatim copy of test cases
assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]
""""""
",min_k
Mbpp/758,"def count_lists(sublists):
    # Convert each sublist to a tuple
    tuple_list = [(sublist, count) for sublist, count in enumerate(sublists, 1)]
    
    # Create a dictionary where keys are tuples of sublists and values are their counts
    result = {}
    for sublist_tuple, count in tuple_list:
        if sublist_tuple in result:
            result[sublist_tuple] += count
        else:
            result[sublist_tuple] = count
    
    return result

# Test the function with the provided example
assert count_lists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",fail,fail,[],[],"
def unique_sublists(list1):
    return {tuple(x): list1.count(x) for x in list1}
","""""""
Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.
assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}
""""""
",unique_sublists
Mbpp/745,"def divisible_by_digits(startnum, endnum):
    def is_divisible_by_digits(n):
        # Convert number to string to iterate over its digits
        str_n = str(n)
        # Check if the number is divisible by each digit it contains
        for digit in str_n:
            if n % int(digit) != 0:
                return False
        return True

    # Initialize the list to store numbers meeting the criteria
    result = []
    
    # Iterate through the range
    for num in range(startnum, endnum + 1):
        if is_divisible_by_digits(num):
            result.append(num)
    
    return result",fail,fail,"[[1, 22]]","[[100, 200]]","
def divisible_by_digits(startnum, endnum):
    return [n for n in range(startnum, endnum+1) \
                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]
","""""""
Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. 
assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]
""""""
",divisible_by_digits
Mbpp/742,"import math
def area_tetrahedron(side_length):
    """"""
    Calculate the area of a regular tetrahedron given the side length.

    Args:
        side_length (float): The length of a side of the tetrahedron.

    Returns:
        float: The area of the tetrahedron.
    """"""
    # Formula for the area of a regular tetrahedron: (sqrt(2) / 12) * side_length ** 2
    area = (math.sqrt(2) / 12) * math.pow(side_length, 2)
    return area",fail,fail,[[3]],[[1000000]],"
import math
def area_tetrahedron(side):
  return math.sqrt(3)*(side*side)
","""""""
Write a function to caluclate the area of a tetrahedron.
assert area_tetrahedron(3)==15.588457268119894
""""""
",area_tetrahedron
Mbpp/759,"def is_decimal(string):
    """"""
    Check if a given string represents a decimal number with a precision of 2.
    
    Args:
        string (str): The input string to be checked.
        
    Returns:
        bool: True if the string represents a decimal number with a precision of 2, False otherwise.
    """"""
    try:
        # Attempt to convert the string to a float
        float_value = float(string)
        # Check if the conversion was successful and if the number has exactly 2 decimal places
        return len(str(float_value).split('.')[1]) == 2
    except ValueError:
        # If the string cannot be converted to a float, it's not a decimal number
        return False",pass,fail,[],[['-123.11']],"
def is_decimal(num):
    import re
    dnumre = re.compile(r""""""^[0-9]+(\.[0-9]{1,2})?$"""""")
    return dnumre.search(num) is not None
","""""""
Write a function to check whether a given string is a decimal number with a precision of 2.
assert is_decimal('123.11')==True
""""""
",is_decimal
Mbpp/722,"def filter_students(data, min_height, min_weight):
    """"""
    Filter students from the data dictionary whose height and weight are above the given minimum values.
    
    :param data: dict, students' data with names as keys and (height, weight) as values.
    :param min_height: float, the minimum acceptable height.
    :param min_weight: float, the minimum acceptable weight.
    :return: dict, a new dictionary containing only the students who meet the height and weight criteria.
    """"""
    filtered_data = {}
    for student, details in data.items():
        if details[0] >= min_height and details[1] >= min_weight:
            filtered_data[student] = details
    return filtered_data

# Test the function with the provided example
data = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}
min_height = 6.0
min_weight = 70

assert filter_students(data, min_height, min_weight) == {'Cierra Vega': (6.2, 70)}",fail,fail,[],[],"
def filter_data(students,h,w):
    return {k: s for k, s in students.items() if s[0] >= h and s[1] >= w}
","""""""
The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.
assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}
""""""
",filter_data
Mbpp/751,"def check_min_heap(arr):
    n = len(arr)
    for i in range(n, -1, -1):
        if arr[i] > arr[i + 1]:
            return False
    return True",fail,fail,"[[[1, 2, 3, 4, 5, 6]]]","[[[8, 3, 9, 6, 7, 5, 1]]]","
def check_min_heap_helper(arr, i):
    if 2 * i + 2 > len(arr):
      return True
    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)
    right_child = (2 * i + 2 == len(arr)) or  \
                (arr[i] <= arr[2 * i + 2] and \
                 check_min_heap_helper(arr, 2 * i + 2))
    return left_child and right_child
def check_min_heap(arr):
  return check_min_heap_helper(arr, 0)
","""""""
Write a function to check if the given array represents min heap or not. 
assert check_min_heap([1, 2, 3, 4, 5, 6]) == True
""""""
",check_min_heap
Mbpp/740,"def tuple_to_dict(tup):
    result = {}
    for i in range(len(tup) - 1):
        result[tup[i]] = tup[i + 1]
    return result",fail,fail,"[[[1, 5, 7, 10, 13, 5]]]","[[[10, 20, 30, 40, 50, 60, 70, 80]]]","
def tuple_to_dict(test_tup):
  return dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))
","""""""
Write a function to convert the given tuple to a key-value dictionary using adjacent elements. 
assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}
""""""
",tuple_to_dict
Mbpp/754,"def extract_common_index_list(l1, l2, l3):
    common_indices = []
    for i in range(len(l1)):
        if l1[i] == l2[i] == l3[i]:
            common_indices.append(i)
    return common_indices

# Test cases
assert extract_common_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == [1, 7]
assert extract_common_index_list([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == []
assert extract_common_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) == []
assert extract_common_index_list([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]) == []",fail,fail,[],[],"
def extract_index_list(l1, l2, l3):
    return [a for a, b, c in zip(l1, l2, l3) if a == b == c]
","""""""
We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.
assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]
""""""
",extract_index_list
Mbpp/773,"def occurance_substring(main_string, substring):
    """"""
    Finds the occurrence and position of the substrings within a string.
    
    Parameters:
    main_string (str): The main string in which to search for substrings.
    substring (str): The substring to search for within the main string.

    Returns:
    tuple: A tuple containing the occurrence of the substring (as a string) and its starting position (as an integer).
    None if there is no match.
    """"""
    # Convert both strings to lowercase for case-insensitive matching
    main_string_lower = main_string.lower()
    substring_lower = substring.lower()

    # Initialize variables
    occurance = 0
    position = 0

    # Iterate over the main string
    for i in range(len(main_string_lower)):
        # Check if the substring starts at the current position
        if main_string_lower[i: i + len(substring_lower)] == substring_lower:
            occurance = i + 1  # Position is 1-indexed
            break

    # Return the result as a tuple
    return (occurance, position)",fail,fail,"[['python programming, python language', 'python']]","[['', '']]","
import re
def occurance_substring(text,pattern):
 for match in re.finditer(pattern, text):
    s = match.start()
    e = match.end()
    return (text[s:e], s, e)
 return None
","""""""
Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.
assert occurance_substring('python programming, python language','python')==('python', 0, 6)
""""""
",occurance_substring
Mbpp/737,"import re
def check_str(str):
    """"""
    Check if the given string starts with a vowel using regex.
    
    Args:
    str (str): The string to be checked.
    
    Returns:
    bool: True if the string starts with a vowel, False otherwise.
    """"""
    vowels = 'aeiou'
    pattern = '^' + re.escape(vowels)
    return re.match(pattern, str) is not None",fail,fail,[['annie']],[['Anna18']],"
import re 
def check_str(string): 
	regex = '^[aeiouAEIOU][A-Za-z0-9_]*'
	return re.search(regex, string)
","""""""
Write a function to check whether the given string is starting with a vowel or not using regex.
assert check_str(""annie"")
""""""
",check_str
Mbpp/638,"def wind_chill(velocity, temperature):
    # Wind Chill Index formula adapted from the National Weather Service
    # WC = 13.12 + 0.6215 * T - 11.37 * V^0.16 + 0.3965 * T * V^0.16
    # where T is in °C and V is in km/h

    # Convert temperature from Celsius to Kelvin
    temp_kelvin = temperature + 273.15

    # Calculate the wind chill index using the formula
    wc = 13.12 + 0.6215 * temp_kelvin - 11.37 * (velocity ** 0.16) + 0.3965 * temp_kelvin * (velocity ** 0.16)

    # Round to the next integer
    wc_rounded = round(wc)

    return wc_rounded",fail,fail,"[[120, 35]]","[[0, 0]]","
import math
def wind_chill(v,t):
 windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)
 return int(round(windchill, 0))
","""""""
Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.
assert wind_chill(120,35)==40
""""""
",wind_chill
Mbpp/755,"def second_smallest(numbers):
    # Remove duplicates and sort the list
    unique_sorted = sorted(set(numbers))
    
    # If the list has only one element, return None
    if len(unique_sorted) == 1:
        return None
    
    # Return the second element in the sorted list
    return unique_sorted[1]",pass,fail,[],[[[]]],"
def second_smallest(numbers):
  sorted_set = sorted(set(numbers))
  if len(sorted_set) < 2:
    return None
  return sorted_set[1]
","""""""
Write a function to find the second smallest number in a list.
assert second_smallest([1, 2, -8, -2, 0, -2])==-2
""""""
",second_smallest
Mbpp/739,"def find_Index(n):
    # Initialize the smallest triangular number with n digits
    triangular_number = 1
    
    # Loop to find the smallest triangular number with n digits
    while len(str(triangular_number)) < n:
        triangular_number += 1
    
    # Return the index of this triangular number
    return triangular_number - 1",fail,fail,[[2]],[[5]],"
import math 
def find_Index(n): 
    x = math.sqrt(2 * math.pow(10,(n - 1)))
    return round(x)
","""""""
Write a python function to find the index of smallest triangular number with n digits. 
assert find_Index(2) == 4
""""""
",find_Index
Mbpp/771,"def check_expression(expr):
    """"""
    Check if the given expression is balanced.
    
    Args:
        expr (str): The expression as a string.
        
    Returns:
        bool: True if the expression is balanced, False otherwise.
    """"""
    stack = []
    opening_braces = {'{': 1, '[': 1}
    closing_braces = {'}': -1, ']': -1}
    
    for char in expr:
        if char in opening_braces:
            stack.append(opening_braces[char])
        elif char in closing_braces:
            if stack and stack[-1] == closing_braces[char]:
                stack.pop()
            else:
                return False
        else:
            stack.append(char)
    
    return len(stack) == 0",fail,fail,[['{()}[{}]']],[['']],"
from collections import deque
def check_expression(exp):
    if len(exp) == 0 or len(exp) % 2 == 1:
        return False
    stack = deque()
    for ch in exp:
        if ch == '(' or ch == '{' or ch == '[':
            stack.append(ch)
        if ch == ')' or ch == '}' or ch == ']':
            if not stack:
                return False
            top = stack.pop()
            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):
                return False
    return not stack
","""""""
Write a function to check if the given expression is balanced or not. 
assert check_expression(""{()}[{}]"") == True
""""""
",check_expression
Mbpp/764,"def count_digits(number_str):
    """"""
    Function to count the number of digits in a given string.
    
    Args:
        number_str (str): The input string.
        
    Returns:
        int: The count of digits in the input string.
    """"""
    return sum(1 for char in number_str if char.isdigit())

# Test the function
assert count_digits('program2bedone') == 1",fail,fail,[],[],"
def number_ctr(s):
    return sum(c.isdigit() for c in s)
","""""""
Write a python function to count number of digits in a given string.
assert number_ctr('program2bedone') == 1
""""""
",number_ctr
Mbpp/721,"def maxAverageOfPath(matrix):
    N = len(matrix)
    
    # Initialize variables to keep track of the maximum average path and its corresponding path
    max_avg = 0
    max_path = []
    
    # Iterate through all possible paths
    for i in range(N):
        for j in range(N):
            # Initialize current path cost and length
            current_cost = 0
            current_length = 0
            
            # Explore all right and down moves
            while j < N:
                current_cost += matrix[i][j]
                if j + 1 < N:  # Move down
                    current_length += 1
                    j += 1
                else:  # Move right
                    current_length += 1
                    i += 1
            # Calculate the average for the current path
            avg = current_cost / current_length if current_length > 0 else 0
            # Update maximum average path if current path is better
            if avg > max_avg:
                max_avg = avg
                max_path = [row[j] for row in matrix for j in range(N)]
    
    return max_avg, max_path
matrix = [[1, 2, 3], [6, 5, 4], [7, 3, 9]]",fail,fail,"[[[[1, 2, 3], [6, 5, 4], [7, 3, 9]]]]","[[[[0, 0, 0], [0, 0, 0], [0, 0, 0]]]]","
def maxAverageOfPath(cost):
  N = len(cost)
  dp = [[0 for _ in range(N + 1)] for _ in range(N + 1)]
  dp[0][0] = cost[0][0]
  for i in range(1, N):
    dp[i][0] = dp[i - 1][0] + cost[i][0]
  for j in range(1, N):
    dp[0][j] = dp[0][j - 1] + cost[0][j]
  for i in range(1, N):
    for j in range(1, N):
      dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]
  # all paths are of length 2 * N - 1, so just divide by that
  return dp[N - 1][N - 1] / (2 * N - 1)
","""""""
Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.
assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2
""""""
",maxAverageOfPath
Mbpp/794,"def text_starta_endb(text):
    """"""
    Check if a string ends with 'a' followed by anything and ends in 'b'.
    :param text: str
    :return: bool
    """"""
    return text.endswith('ab') and text.endswith('b')",fail,fail,[['aabbbb']],[['aabb']],"
import re
def text_starta_endb(text):
    patterns = 'a.*?b$'
    return re.search(patterns,  text)
","""""""
Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.
assert text_starta_endb(""aabbbb"")
""""""
",text_starta_endb
Mbpp/796,"def sum_of_dictionary_items(dictionary):
    return sum(value for key, value in dictionary.items())

# Test case
assert sum_of_dictionary_items({'a': 100, 'b':200, 'c':300}) == 600",fail,fail,[],[],"
def return_sum(d):
  return sum(d.values())
","""""""
Write function to find the sum of all items in the given dictionary.
assert return_sum({'a': 100, 'b':200, 'c':300}) == 600
""""""
",return_sum
Mbpp/752,"def jacobsthal_num(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        a, b = 1, 1
        for _ in range(2, n + 1):
            a, b = b, 2 * b % 1
        return b",fail,fail,[[5]],[[100]],"
def jacobsthal_num(n): 
	dp = [0] * (n + 1) 
	dp[0] = 0
	dp[1] = 1
	for i in range(2, n+1): 
		dp[i] = dp[i - 1] + 2 * dp[i - 2] 
	return dp[n]
","""""""
Write a function to find the nth jacobsthal number.  0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...
assert jacobsthal_num(5) == 11
""""""
",jacobsthal_num
Mbpp/643,"def text_match_wordz_middle(text):
    """"""
    Check if a string contains 'z' but not at the start or end of any word.
    """"""
    words = text.split()
    for word in words:
        if 'z' in word and not word.startswith('z') and not word.endswith('z'):
            return True
    return False",pass,fail,[],[['zzzxyabczzz']],"
import re
def text_match_wordz_middle(text):
	return re.search(r'\Bz\B',  text) is not None
","""""""
Write a function that checks if a strings contains 'z', except at the start and end of the word.
assert text_match_wordz_middle(""pythonzabc."")==True
""""""
",text_match_wordz_middle
Mbpp/780,"from itertools import combinations
def find_combinations(tuples):
    # Generate all possible combinations of the tuples
    all_combinations = list(combinations(tuples, 2))
    
    # Calculate the sum of each combination
    sums = [(a + b, b) for a, b in all_combinations]
    
    return sums
tuples = [(2, 4), (6, 7), (5, 1), (6, 10)]",fail,fail,"[[[[1, 2, 3], [3, 4, 5]]]]","[[[[100, 200], [300, 400], [500, 600], [700, 800]]]]","
from itertools import combinations 
def find_combinations(test_list):
  return [tuple(map(sum, zip(*t))) for t in combinations(test_list, 2)]
","""""""
Write a function to find the combinations of sums with tuples in the given tuple list. 
assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]
""""""
",find_combinations
Mbpp/782,"def odd_length_sum(arr):
    """"""
    Function to find the sum of all subarrays of odd length.

    Args:
        arr (list): A list of integers.

    Returns:
        int: The sum of all subarrays of odd length.

    Example:
        >>> odd_length_sum([1, 2, 4])
        14
    """"""
    n = len(arr)
    total_sum = 0

    # Iterate over all possible starting indices for subarrays
    for i in range(n):
        # Calculate the length of the current subarray
        subarray_length = i + 1

        # Check if the subarray length is odd
        if subarray_length % 2 != 0:
            # Calculate the sum of the current subarray
            subarray_sum = sum(arr[i:i+subarray_length])
            total_sum += subarray_sum

    return total_sum",fail,fail,"[[[1, 2, 4]]]","[[[4, 3, 2, 1, 9, 10, 7]]]","
def odd_length_sum(arr):
    sum_ = 0
    n = len(arr)
    for i in range(n):
        # arr[i] occurs (i + 1) * (n - i) times in all subarrays
        times = ((i + 1) * (n - i) + 1) // 2
        sum_ += arr[i] * times
    return sum_
","""""""
Write a python function to find the sum of all odd length subarrays. 
assert odd_length_sum([1,2,4]) == 14
""""""
",odd_length_sum
Mbpp/786,"def right_insertion(arr, val):
    """"""
    Function to find the right insertion point for a specified value in sorted order.
    
    Parameters:
    arr (list): The sorted list.
    val (int): The value to insert.
    
    Returns:
    int: The index at which the value should be inserted to maintain sorted order.
    """"""
    # If the value is greater than the last element in the list, insert it at the end
    if val > arr[-1]:
        return len(arr)
    
    # Otherwise, find the correct position before the last element
    for i in range(len(arr) - 1, 0, -1):
        if val < arr[i]:
            return i
    
    # If the value is less than all elements, it should be inserted at the beginning
    return 0",fail,fail,"[[[1, 2, 4, 5], 3]]","[[[], 6]]","
import bisect
def right_insertion(a, x):
    return bisect.bisect_right(a, x)
","""""""
Write a function to locate the right insertion point for a specified value in sorted order.
assert right_insertion([1,2,4,5],6)==4
""""""
",right_insertion
Mbpp/736,"def left_insertion(arr, val):
    """"""
    Locate the left insertion point for a specified value in sorted order.
    
    Args:
        arr (list): A sorted list of integers.
        val (int): The value to insert into the list.
        
    Returns:
        int: The index at which the value should be inserted to maintain sort order.
    """"""
    # If the value is smaller than the smallest element in the array, it should be inserted at the beginning.
    if val < arr[0]:
        return 0
    
    # Otherwise, we need to find the correct insertion point.
    for i in range(1, len(arr)):
        if arr[i] > val:
            return i
    
    # If the value is equal to the largest element, it can be inserted at the end.
    return len(arr)",pass,fail,[],"[[[], 1]]","
import bisect
def left_insertion(a, x):
    return bisect.bisect_left(a, x)
","""""""
Write a function to locate the left insertion point for a specified value in sorted order. 
assert left_insertion([1,2,4,5],6)==4
""""""
",left_insertion
Mbpp/778,"def pack_consecutive_duplicates(lst):
    result = []
    seen = set()
    for item in lst:
        if item not in seen:
            seen.add(item)
            result.append([item])
        else:
            seen.discard(item)
            if len(result) > 1:
                result[-1].append(item)
    return result",fail,fail,"[[[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]]]","[[[2, 5, 3, 1, 1, 0, 4, 4, 2, 3, 3]]]","
from itertools import groupby
def pack_consecutive_duplicates(list1):
    return [list(group) for _, group in groupby(list1)]
","""""""
Write a function to pack consecutive duplicates of a given list elements into sublists.
assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]
""""""
",pack_consecutive_duplicates
Mbpp/769,"def list_difference(list1, list2):
    """"""
    Returns the difference between two lists.
    
    Args:
        list1 (list): The first list.
        list2 (list): The second list.
        
    Returns:
        list: A list containing the elements that are in list1 but not in list2.
    """"""
    return [item for item in list1 if item not in list2]

# Test the function
assert list_difference([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 20, 30, 15]",fail,fail,[],[],"
def Diff(li1,li2):
    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))
 
","""""""
Write a python function to get the difference between two lists.
assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]
""""""
",Diff
Mbpp/801,"def test_three_equal(a, b, c):
    count = 0
    if a == b == c:
        count = 3
    return count",fail,fail,"[[1, 2, 2]]","[[10, 10, 20]]","
def test_three_equal(x,y,z):
  result = set([x,y,z])
  if len(result) == 3:
    return 0
  elif len(result) == 2:
    return 2
  else:
    return 3
","""""""
Write a python function to count the number of equal numbers from three given integers.
assert test_three_equal(1,1,1) == 3
""""""
",test_three_equal
Mbpp/799,"def left_rotate(num, d):
    """"""
    Rotate left bits by d bits a given number.
    
    Args:
        num (int): The number to be rotated.
        d (int): The number of bits to rotate.
        
    Returns:
        int: The number after rotating left by d bits.
    """"""
    # Ensure that the number of bits to rotate (d) is within the range of 0 to 32
    if d < 0 or d > 32:
        raise ValueError(""d must be an integer between 0 and 32 inclusive."")
    
    # Convert the number to a string to manipulate individual bits
    num_str = str(num)
    
    # Pad the number with leading zeros to make it 32 bits long
    padded_num_str = '0' * (32 - len(num_str)) + num_str
    
    # Rotate the bits left by d positions
    rotated_str = padded_num_str[-d:] + padded_num_str[:-d]
    
    # Convert the rotated string back to an integer
    rotated_num = int(rotated_str)
    
    return rotated_num",fail,fail,"[[16, 2]]","[[1, 1]]","
def left_rotate(n,d):   
    INT_BITS = 32
    return (n << d)|(n >> (INT_BITS - d))  
","""""""
Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.
assert left_rotate(16,2) == 64
""""""
",left_rotate
Mbpp/749,"def sort_numeric_strings(string_list):
    # Filter out non-numeric strings
    numeric_strings = [s for s in string_list if any(char.isdigit() for char in s)]
    
    # Sort the numeric strings numerically
    numeric_strings.sort()
    
    return numeric_strings",fail,fail,"[[['4', '12', '45', '7', '0', '100', '200', '-12', '-500']]]","[[['10000000000', '99999999', '88888888', '7777777', '666666', '-55555', '-4444', '-333', '222', '111', '10', '9', '8', '7', '6', '5', '4', '3', '2', '1']]]","
def sort_numeric_strings(nums_str):
    return sorted([int(x) for x in nums_str])
","""""""
Write a function to sort a given list of strings of numbers numerically. 
assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]
""""""
",sort_numeric_strings
Mbpp/763,"def find_min_diff(arr):
    # Initialize minimum difference to a large number
    min_diff = float('inf')
    
    # Iterate through the array to find the minimum difference
    for i in range(1, len(arr)):
        diff = abs(arr[i] - arr[i-1])
        if diff < min_diff:
            min_diff = diff
    
    return min_diff",fail,fail,"[[[1, 5, 3, 19, 18, 25], 6]]","[[[15, 12, 20, 30, 8, 4, 19, 37, 22, 28, 11, 25], 12]]","
def find_min_diff(arr,n): 
    arr = sorted(arr) 
    diff = 10**20 
    for i in range(n-1): 
        if arr[i+1] - arr[i] < diff: 
            diff = arr[i+1] - arr[i]  
    return diff 
","""""""
Write a python function to find the minimum difference between any two elements in a given array. 
assert find_min_diff((1,5,3,19,18,25),6) == 1
""""""
",find_min_diff
Mbpp/775,"def odd_position(lst):
    """"""
    Check if every odd index in the list contains an odd number of occurrences.
    
    Args:
        lst (list): A list of integers.
        
    Returns:
        bool: True if every odd index contains an odd number of occurrences of odd numbers; False otherwise.
    """"""
    # Initialize a counter for odd numbers at odd indices
    odd_count = 0
    
    # Iterate over the list starting from index 1 (first odd index)
    for i in range(1, len(lst), 2):
        # Check if the element at the odd index is odd
        if lst[i] % 2 != 0:
            # Increment the counter if the number is odd
            odd_count += 1
    
    # Return whether the counter is odd (which means there was at least one odd number at an odd index)
    return odd_count % 2 != 0",fail,fail,"[[[2, 1, 4, 3, 6, 7, 6, 3]]]","[[[2, 5, 4, 3, 6, 7, 8, 9]]]","
def odd_position(nums):
	return all(n % 2 == 1 for n in nums[1::2])
","""""""
Write a python function to check whether every odd index contains odd numbers of a given list.
assert odd_position([2,1,4,3,6,7,6,3]) == True
""""""
",odd_position
Mbpp/644,"def reverse_array_up_to_k(arr, k):
    """"""
    Reverses an array up to a given position.

    Args:
        arr (list): The input array.
        k (int): The position up to which the array should be reversed.

    Returns:
        list: The reversed array up to the given position.
    """"""
    # If the array has fewer elements than the specified position, return the original array
    if len(arr) < k:
        return arr

    # Reverse the part of the array from the second element to the given position
    reversed_part = arr[k:] + arr[:k-1]
    return reversed_part

# Test the function
assert reverse_array_up_to_k([1, 2, 3, 4, 5, 6], 4) == [4, 3, 2, 1, 5, 6]",fail,fail,[],[],"
def reverse_Array_Upto_K(input, k): 
  return input[k-1::-1] + input[k:]
","""""""
Write a python function to reverse an array upto a given position.
assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]
""""""
",reverse_Array_Upto_K
Mbpp/757,"def count_reverse_pairs(string_list):
    count = 0
    for i in range(len(string_list)):
        reversed_string = string_list[i][::-1]
        if string_list[i] == reversed_string:
            count += 1
    return count",fail,fail,"[[['julia', 'best', 'tseb', 'for', 'ailuj']]]","[[['abc', 'cba', 'def', 'fed', 'hij', 'jih', 'klm', 'mlk']]]","
def count_reverse_pairs(test_list):
  return sum(test_list[i+1:].count(s[::-1]) for i, s in enumerate(test_list))
","""""""
Write a function to count the pairs of reverse strings in the given string list. 
assert count_reverse_pairs([""julia"", ""best"", ""tseb"", ""for"", ""ailuj""])== 2
""""""
",count_reverse_pairs
Mbpp/790,"def even_position(lst):
    """"""
    Check if every even index in the list contains an even number.
    
    Args:
        lst (list): A list of integers.
        
    Returns:
        bool: True if every even index contains an even number, False otherwise.
    """"""
    # Iterate over the list and check the condition for even indices
    for i in range(0, len(lst), 2):  # Step 2 to only consider even indices
        if lst[i] % 2 != 0:  # Check if the number at the even index is odd
            return False
    
    return True",pass,fail,[],"[[[2, 1, 4, 2, 6, 1, 8, 2, 10, 1, 12]]]","
def even_position(nums):
	return all(nums[i]%2==i%2 for i in range(len(nums)))
","""""""
Write a python function to check whether every even index contains even numbers of a given list.
assert even_position([3,2,1]) == False
""""""
",even_position
Mbpp/788,"def create_new_tuple(string, list_elements):
    return (string, *list_elements)

# Test case
assert create_new_tuple([""WEB"", ""is""], ""best"") == ('WEB', 'is', 'best')",fail,fail,[],[],"
def new_tuple(test_list, test_str):
  return tuple(test_list + [test_str])
","""""""
Write a function to create a new tuple from the given string and list.
assert new_tuple([""WEB"", ""is""], ""best"") == ('WEB', 'is', 'best')
""""""
",new_tuple
Mbpp/791,"def remove_nested(tup):
    """"""Remove nested tuples from a given tuple.""""""
    result = []
    for item in tup:
        if isinstance(item, tuple):
            result.extend(remove_nested(item))
        else:
            result.append(item)
    return tuple(result)",fail,fail,"[[[1, 5, 7, [4, 6], 10]]]","[[[2, 6, 8, [5, 7], 11, [[2, 9], [6, 3]], 4]]]","
def remove_nested(test_tup):
  return tuple(e for e in test_tup if not isinstance(e, tuple))
","""""""
Write a function to remove tuples from the given tuple.
assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)
""""""
",remove_nested
Mbpp/793,"def last_position(arr, element):
    """"""
    Finds the last position of an element in a sorted array.

    Args:
        arr (list): A sorted list of integers.
        element (int): The element to find in the array.

    Returns:
        int: The last position of the element in the array, or -1 if the element is not found.
    """"""
    try:
        pos = arr.rfind(element)
        if pos != -1:
            return pos
        else:
            return -1
    except ValueError:
        return -1

# Test cases
assert last_position([1, 2, 3], 1) == 0
assert last_position([1, 2, 3], 4) == -1
assert last_position([1, 2, 3, 4, 5], 3) == 3
assert last_position([1, 2, 3, 4, 5], 6) == -1",fail,fail,[],[],"
def last(arr,x):
    return len(arr)-arr[::-1].index(x) - 1
","""""""
Write a python function to find the last position of an element in a sorted array.
assert last([1,2,3],1) == 0
""""""
",last
Mbpp/785,"def tuple_str_int(tuple_str):
    # Split the string by comma to get individual elements
    elements = tuple_str.split(',')
    
    # Convert each element to an integer
    int_elements = [int(element) for element in elements]
    
    # Return the integer tuple
    return int_elements",fail,fail,"[['(7, 8, 9)']]","[['(1000000, 2000000, 3000000)']]","
def tuple_str_int(test_str):
  return tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))
","""""""
Write a function to convert tuple string to integer tuple.
assert tuple_str_int(""(7, 8, 9)"") == (7, 8, 9)
""""""
",tuple_str_int
Mbpp/770,"def odd_num_sum(n):
    """"""
    Calculate the sum of the fourth power of the first n odd natural numbers.
    
    :param n: int, the number of terms to sum
    :return: int, the sum of the fourth power of the first n odd natural numbers
    """"""
    total_sum = 0
    for i in range(1, n + 1, 2):  # Iterate over odd numbers
        total_sum += i ** 4
    return total_sum",fail,fail,[[2]],[[2]],"
def odd_num_sum(n) : 
    j = 0
    sm = 0
    for i in range(1,n + 1) : 
        j = (2*i-1) 
        sm = sm + (j*j*j*j)   
    return sm 
","""""""
Write a python function to find the sum of fourth power of first n odd natural numbers.
assert odd_num_sum(2) == 82
""""""
",odd_num_sum
Mbpp/806,"def max_run_uppercase(s):
    """"""
    Finds the maximum run of uppercase characters in the given string.
    
    :param s: str, the input string
    :return: int, the length of the maximum run of uppercase characters
    """"""
    max_count = 0
    current_count = 0
    
    for char in s:
        if char.isupper():
            current_count += 1
            max_count = max(max_count, current_count)
        else:
            current_count = 0
    
    return max_count",pass,fail,[],[['Aaa']],"
def max_run_uppercase(test_str):
  cnt = 0
  res = 0
  for idx in range(0, len(test_str)):
    if test_str[idx].isupper():
      cnt += 1
    else:
      res = cnt
      cnt = 0
  if test_str[len(test_str) - 1].isupper():
    res = cnt
  return res
","""""""
Write a function to find maximum run of uppercase characters in the given string.
assert max_run_uppercase('GeMKSForGERksISBESt') == 5
""""""
",max_run_uppercase
Mbpp/808,"def check_K(tuples, k):
    """"""
    Check if the given tuples contain the k or not.
    
    Args:
        tuples (list/tuple): A list or tuple of tuples.
        k (int): The value to check for in the tuples.
        
    Returns:
        bool: True if the tuple contains k, False otherwise.
    """"""
    for tup in tuples:
        if k in tup:
            return True
    return False",fail,fail,"[[[10, 4, 5, 6, 8], 6]]","[[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [4, 5, 6]]]","
def check_K(test_tup, K):
  return K in test_tup
","""""""
Write a function to check if the given tuples contain the k or not.
assert check_K((10, 4, 5, 6, 8), 6) == True
""""""
",check_K
Mbpp/809,"def check_smaller(t1, t2):
    """"""
    Check if each element of the second tuple is smaller than its corresponding element in the first tuple.
    :param t1: First tuple
    :param t2: Second tuple
    :return: Boolean indicating if all elements in t2 are smaller than their corresponding elements in t1
    """"""
    return all(el1 < el2 for el1, el2 in zip(t1, t2))",fail,fail,"[[[1, 2, 3], [2, 3, 4]]]","[[[3, 7, 11, 15, 19], [2, 6, 10, 14, 18]]]","
def check_smaller(test_tup1, test_tup2):
  return all(x > y for x, y in zip(test_tup1, test_tup2))
","""""""
Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.
assert check_smaller((1, 2, 3), (2, 3, 4)) == False
""""""
",check_smaller
Mbpp/805,"def max_sum_list(lst):
    """"""
    Returns the list in a list of lists whose sum of elements is the highest.
    
    Example:
    >>> max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])
    [10, 11, 12]
    """"""
    max_sum = 0
    max_list = []
    
    for sub_list in lst:
        sub_sum = sum(sub_list)
        if sub_sum > max_sum:
            max_sum = sub_sum
            max_list = [elem for elem in sub_list if elem > 0]  # Keep only positive numbers for the max sum
        elif sub_sum == max_sum:
            max_list.append(sub_list)
    
    return max_list",pass,fail,[],[[[[]]]],"
def max_sum_list(lists):
 return max(lists, key=sum)
","""""""
Write a function that returns the list in a list of lists whose sum of elements is the highest.
assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]
""""""
",max_sum_list
Mbpp/630,"def get_coordinates(coord_tuple):
    """"""
    Extract all adjacent coordinates from a given coordinate tuple.
    
    Args:
        coord_tuple (tuple): A tuple of coordinates (x, y).
        
    Returns:
        list: A list of lists, where each inner list represents a pair of adjacent coordinates.
    """"""
    x_coords = coord_tuple[0]
    y_coords = coord_tuple[1]
    
    # Initialize lists to store coordinates
    coords = [[x, y] for x in range(x_coords, x_coords + y_coords + 1)] + [[x, y] for x in range(x_coords + 1, x_coords + y_coords + 1)]
    
    return coords",fail,fail,"[[[3, 4]]]","[[[1, 1, 1]]]","
def adjac(ele, sub = []): 
  if not ele: 
     yield sub 
  else: 
     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) 
                for idx in adjac(ele[1:], sub + [j])] 
def get_coordinates(test_tup):
  return list(adjac(test_tup))
","""""""
Write a function to extract all the adjacent coordinates of the given coordinate tuple.
assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]
""""""
",get_coordinates
Mbpp/765,"def is_polite(n):
    """"""
    Determines if a number is polite.
    A number is polite if it can be expressed as the sum of two or more consecutive integers.
    """"""
    # Initialize the count of polite numbers found
    count = 0
    # Start from 1 and iterate upwards
    for i in range(1, n + 1):
        # Check if the current number can be expressed as the sum of two or more consecutive integers
        if n == i:
            # If it's exactly n, it's polite by itself
            count += 1
        else:
            # Check if i can be expressed as the sum of two or more consecutive integers
            # This is done by checking if (i - 1) is a multiple of 2 and i - 2*count >= 1
            if (i - 1) % 2 == 0 and i - 2 * count >= 1:
                count += 1
    # Return True if the count of polite numbers found is greater than or equal to n
    return count >= n",fail,fail,[[7]],[[10000000]],"
import math 
def is_polite(n): 
	n = n + 1
	return (int)(n+(math.log((n + math.log(n, 2)), 2))) 
","""""""
Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/
assert is_polite(7) == 11
""""""
",is_polite
Mbpp/632,"def move_zero(lst):
    """"""
    Moves all zeroes to the end of the given list.
    
    Args:
    lst (list): The input list.
    
    Returns:
    list: The list with all zeroes moved to the end.
    """"""
    # Initialize an empty list to store zeroes
    zeroes = []
    
    # Iterate through the input list
    for num in lst:
        # If the number is zero, append it to the zeroes list
        if num == 0:
            zeroes.append(num)
        # Otherwise, append the number to the output list
        else:
            lst.append(num)
    
    # Concatenate the zeroes list to the end of the output list
    return lst + zeroes",fail,fail,"[[[1, 0, 2, 0, 3, 4]]]","[[[2, 3, 4, 0, 0, 7, 0, 5, 6, 0, 0, 9, 0, 8, 10, 0, 0, 12, 13, 14, 0]]]","
def move_zero(num_list):
    zeros = [0] * num_list.count(0)
    front = [i for i in num_list if i != 0]
    return front + zeros
","""""""
Write a python function to move all zeroes to the end of the given list.
assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]
""""""
",move_zero
Mbpp/748,"def capital_words_spaces(text):
    # Split the text into words
    words = text.split()
    
    # Iterate over each word
    for i, word in enumerate(words):
        # If the word starts with a capital letter
        if word[0].isupper():
            # Insert a space before it
            words.insert(i, ' ')
    
    # Join the words back into a string
    return ' '.join(words)",fail,fail,[['Python']],[['MyNameIsAIAndIAmHereToHelpYou']],"
import re
def capital_words_spaces(str1):
  return re.sub(r""(\w)([A-Z])"", r""\1 \2"", str1)
","""""""
Write a function to put spaces between words starting with capital letters in a given string.
assert capital_words_spaces(""Python"") == 'Python'
""""""
",capital_words_spaces
Mbpp/255,"from itertools import product
def combinations_colors(lst, n):
    """"""
    Generate all combinations (with repetition) of the elements of the list and return a list with a tuple for each combination.
    
    :param lst: List of elements.
    :param n: Length of each combination.
    :return: List of tuples representing all combinations.
    """"""
    return list(product(lst, repeat=n))",fail,fail,"[[['Red', 'Green', 'Blue'], 2]]","[[['A', 'B', 'C', 'D'], 4]]","
from itertools import combinations_with_replacement 
def combinations_colors(l, n):
    return list(combinations_with_replacement(l, n))
","""""""
Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.
assert combinations_colors( [""Red"",""Green"",""Blue""],1)==[('Red',), ('Green',), ('Blue',)]
""""""
",combinations_colors
