{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    # Convert lists to sets to remove duplicates and for efficient intersection\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Use the intersection method to find common elements\n    shared_elements = set1.intersection(set2)\n    \n    return shared_elements"}
{"task_id": "Mbpp/3", "solution": "import math\ndef is_not_prime(n):\n    \"\"\"\n    Determines if a number is not prime.\n    \n    :param int n: The number to check for primality.\n    :return bool: True if the number is not prime, False otherwise.\n    \"\"\"\n    # Base cases\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    \n    # Check divisibility up to the square root of n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\ndef heap_queue_largest(numbers, n):\n    \"\"\"\n    Returns the n largest integers from a given list of numbers in descending order.\n    \n    :param numbers: List of integers.\n    :param n: The number of largest integers to return.\n    :return: List of n largest integers in descending order.\n    \"\"\"\n    # Convert the list to a min-heap (which is a max-queue when accessed in reverse)\n    heapq.heapify(numbers)\n    \n    # Extract the top n elements from the heap\n    result = [heapq.heappop(numbers) for _ in range(n)]\n    \n    return result"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(a, b):\n    \"\"\"\n    Check if two numbers differ at exactly one bit position.\n    \n    Args:\n        a (int): The first number.\n        b (int): The second number.\n        \n    Returns:\n        bool: True if the numbers differ at exactly one bit position, False otherwise.\n    \"\"\"\n    # Convert numbers to binary strings\n    a_bin = bin(a)[2:]  # bin() returns '0bxxxx', so [2:] to remove '0b'\n    b_bin = bin(b)[2:]  # similarly for b\n    \n    # Compare the binary strings character by character\n    # If they differ at exactly one position, the lengths will be equal and there will be one position where they differ\n    return len(a_bin) == len(b_bin) and (a_bin != b_bin)"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(text):\n    # Split the text into words\n    words = text.split()\n    \n    # Filter words that are at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    \n    # Convert the list to a set for unique words\n    unique_long_words = set(long_words)\n    \n    return unique_long_words"}
{"task_id": "Mbpp/8", "solution": "def square_nums(lst):\n    \"\"\"\n    Function to find squares of individual elements in a list.\n    \n    Args:\n        lst (list): A list of integers.\n        \n    Returns:\n        list: A new list containing the squares of the elements in the input list.\n    \"\"\"\n    return [x ** 2 for x in lst]"}
{"task_id": "Mbpp/9", "solution": "def find_rotations(s):\n    \"\"\"\n    Finds the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Convert the string to a list to easily handle rotations\n    s_list = list(s)\n    \n    # Initialize the minimum rotations to a large number\n    min_rotations = float('inf')\n    \n    # Iterate over all possible starting indices\n    for i in range(len(s)):\n        # Generate all rotations starting from the current index\n        rotations = [s_list[j:] + s_list[:j] for j in range(len(s))]\n        \n        # Check if any rotation is equal to the original string\n        for rotation in rotations:\n            if rotation == s:\n                # Update the minimum rotations if a shorter rotation sequence is found\n                min_rotations = min(min_rotations, len(rotations))\n    \n    return min_rotations\n\n# Test cases\nassert find_rotations(\"aaaa\") == 1\nassert find_rotations(\"abab\") == 1\nassert find_rotations(\"abcabc\") == 2\nassert find_rotations(\"abcd\") == 0  # No rotation needed since it's already a palindrome"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(string, char):\n    \"\"\"\n    Remove the first and last occurrences of a given character from the string.\n    \n    Args:\n        string (str): The input string.\n        char (char): The character to be removed from the string.\n        \n    Returns:\n        str: The string after removing the first and last occurrences of the given character.\n    \"\"\"\n    # Check if the string is empty or the character is not present\n    if not string or char not in string:\n        return string\n    \n    # Remove the first and last occurrences\n    string = string[1:-1]\n    \n    return string"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n    \n    # Sort the matrix based on the row sums in ascending order\n    sorted_matrix = sorted(matrix, key=lambda x: row_sums.index(x[0]))\n    \n    return sorted_matrix"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    # The volume V of a triangular prism is given by the formula:\n    # V = base * height * length\n    return base * height * length"}
{"task_id": "Mbpp/16", "solution": "import re"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    \"\"\"\n    Returns the perimeter of a square given its side length.\n    \n    Args:\n        side_length (int): The length of a side of the square.\n        \n    Returns:\n        int: The perimeter of the square.\n    \"\"\"\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(first_string, second_string):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n    \n    Args:\n        first_string (str): The first string from which characters are to be removed.\n        second_string (str): The string containing characters to be removed from the first string.\n        \n    Returns:\n        str: The first string with characters from the second string removed.\n    \"\"\"\n    result = \"\"\n    for char in first_string:\n        if char not in second_string:\n            result += char\n    return result"}
{"task_id": "Mbpp/19", "solution": "def has_duplicates(lst):\n    # Set to store unique elements\n    unique_elements = set()\n    \n    # Iterate through the list\n    for element in lst:\n        # If the element is already in the set, it's a duplicate\n        if element in unique_elements:\n            return True\n        # Otherwise, add it to the set\n        unique_elements.add(element)\n    \n    # If we've gone through the entire list without finding duplicates\n    return False\n\n# Test cases\nassert has_duplicates([1, 2, 3, 4, 5]) == False\nassert has_duplicates([1, 1, 2, 3, 4, 5]) == True\nassert has_duplicates([1, 2, 3, 4, 5, 5]) == True\nassert has_duplicates([1, 2, 3, 4, 6]) == False"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    \"\"\"\n    Check if the given number is a Woodall number.\n    \n    A Woodall number of the form 2^n - 1 is a prime number.\n    \"\"\"\n    # Check if n is a power of 2\n    if n < 2:\n        return False\n    \n    # Calculate 2^n - 1\n    candidate = 2 ** n - 1\n    \n    # Check if the candidate is a prime number\n    if candidate > 1:\n        for i in range(2, int(candidate ** 0.5) + 1):\n            if candidate % i == 0:\n                return False\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/56", "solution": "def check(num):\n    # Calculate the reverse of the number\n    reverse = int(str(num)[::-1])\n    \n    # Calculate twice the reverse\n    twice_reverse = 2 * reverse\n    \n    # Check if the given number is one less than twice its reverse\n    if num == twice_reverse - 1:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    \"\"\"\n    Finds the largest possible number that can be formed using the digits in the list.\n    \"\"\"\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    \n    # Initialize the result with the first digit\n    max_num = digits[0]\n    \n    # Iterate through the remaining digits\n    for digit in digits[1:]:\n        # If the current digit is greater than the last digit in max_num, update max_num\n        if digit > max_num[-1]:\n            max_num = digit + max_num\n    \n    return max_num"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(num1, num2):\n    \"\"\"\n    Check if two integers have opposite signs.\n    \n    Args:\n        num1 (int): The first integer.\n        num2 (int): The second integer.\n        \n    Returns:\n        bool: True if num1 and num2 have opposite signs, False otherwise.\n    \"\"\"\n    return num1 * num2 < 0"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    \"\"\"Check if a number is an octagonal number.\"\"\"\n    # Correct formula for octagonal numbers: O_n = 3n^2 - 2n\n    return 3*n*n - 2*n == 11*(n + 1) + 2"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    # Initialize a counter for valid substrings\n    count = 0\n    \n    # Iterate over the string from index 0 to the second last\n    for i in range(len(s) - 1):\n        # Calculate the sum of the digits of the current substring\n        digit_sum = sum(int(digit) for digit in s[i: i + len(s)])\n        \n        # Check if the sum of digits equals the length of the substring\n        if digit_sum == len(s[i: i + len(s)]):\n            count += 1\n    \n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(lst):\n    \"\"\"\n    Finds the smallest number in a given list.\n    \n    Args:\n    lst (list): A list of numbers.\n    \n    Returns:\n    int: The smallest number in the list.\n    \"\"\"\n    return min(lst)"}
{"task_id": "Mbpp/63", "solution": "def max_difference(tuples):\n    if not tuples:\n        return 0\n    \n    max_diff = 0\n    for t1, t2 in zip(tuples, tuples[1:]):\n        diff = abs(t1[0] - t2[0]) + abs(t1[1] - t2[1])\n        max_diff = max(max_diff, diff)\n    \n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    \"\"\"\n    Function to flatten a list and sum all of its elements recursively.\n    \"\"\"\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \n    :param numbers: List of numbers\n    :return: Count of positive numbers in the list\n    \"\"\"\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    \"\"\"Calculate the nth Bell number using the recurrence relation.\"\"\"\n    if n == 0:\n        return 1\n    bell = [1]  # Initialize with the first Bell number (B0 = 1)\n    for i in range(1, n + 1):\n        bell.append(sum(bell[:i]))\n    return bell[n]"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    \"\"\"\n    Check if the given array is monotonic.\n    \n    Args:\n        arr (list): The input array.\n        \n    Returns:\n        bool: True if the array is monotonic (either all increasing or all decreasing),\n              False otherwise.\n    \"\"\"\n    increasing = all(arr[i] < arr[i + 1] for i in range(len(arr) - 1))\n    decreasing = all(arr[i] > arr[i + 1] for i in range(len(arr) - 1))\n    \n    return increasing or decreasing"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(sublist, main_list):\n    \"\"\"\n    Check if the given sublist is a subset of the main list.\n    \n    Args:\n        sublist (list): The sublist to be checked.\n        main_list (list): The main list to check against.\n        \n    Returns:\n        bool: True if sublist is a subset of main_list, False otherwise.\n    \"\"\"\n    # Convert both lists to sets to efficiently check for subset relationship\n    sublist_set = set(sublist)\n    main_list_set = set(main_list)\n    \n    # Check if every element of the sublist_set is in main_list_set\n    return sublist_set.issubset(main_list_set)"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    # Check if all tuples have the same length\n    common_length = len(tuples[0])\n    for tup in tuples:\n        if len(tup) != common_length:\n            return False\n    return True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    \"\"\"\n    Sorts a list of elements in ascending order.\n    \n    Args:\n        lst (list): A list of elements to be sorted.\n        \n    Returns:\n        list: The sorted list.\n    \"\"\"\n    return sorted(lst)"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    \"\"\"\n    Check if a given number can be represented as the difference of two squares.\n    \n    Args:\n        n (int): The number to be checked.\n        \n    Returns:\n        bool: True if n can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    # Check if n is a perfect square\n    root_n = int(n ** 0.5)\n    if root_n * root_n != n:\n        return False\n    \n    # Check if (root_n + x) ** 2 - (root_n - x) ** 2 = n\n    # Simplifies to (2 * root_n * x) ** 2 = n\n    # Therefore, x must be an integer such that n / (2 * root_n ** 2) is an integer\n    for x in range(-root_n, root_n + 1):\n        if (n / (2 * root_n ** 2)) % 1 == 0:\n            return True\n    \n    return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns1, patterns2):\n    \"\"\"\n    Check if two lists follow the same pattern.\n\n    Args:\n        patterns1 (list): A list of strings representing the first pattern.\n        patterns2 (list): A list of strings representing the second pattern.\n\n    Returns:\n        bool: True if both patterns follow the same sequence, False otherwise.\n    \"\"\"\n    # Sort both lists to ensure comparison is case-insensitive\n    patterns1.sort()\n    patterns2.sort()\n\n    # Compare the sorted lists\n    return patterns1 == patterns2"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    \"\"\"\n    Finds tuples in the list where all elements are divisible by k.\n    \n    Args:\n    tuples_list (list): A list of tuples.\n    k (int): The divisor to check for divisibility.\n    \n    Returns:\n    list: A list of tuples where all elements are divisible by k.\n    \"\"\"\n    result = []\n    for tup in tuples_list:\n        if all(el % k == 0 for el in tup):\n            result.append(tup)\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_Diff(n):\n    \"\"\"\n    Check if a number is divisible by 11.\n    \"\"\"\n    return n % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    Check if the length of the word is odd.\n    \n    Args:\n        word (str): The word to check.\n        \n    Returns:\n        bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n    \n    :param n: int, the position of the tetrahedral number\n    :return: int, the nth tetrahedral number\n    \"\"\"\n    # Formula for the nth tetrahedral number: T(n) = n*(n+1)*(n+2)/6\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n\n    :param radius: float, the radius of the sphere\n    :return: float, the volume of the sphere\n    \"\"\"\n    return (4/3) * math.pi * radius**3"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b"}
{"task_id": "Mbpp/85", "solution": "import math\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n    \n    Args:\n        radius (float): The radius of the sphere.\n        \n    Returns:\n        float: The surface area of the sphere.\n    \"\"\"\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n    \n    Args:\n        n (int): The position of the centered hexagonal number to calculate.\n        \n    Returns:\n        int: The nth centered hexagonal number.\n    \"\"\"\n    # Correct formula for the nth centered hexagonal number\n    return 3 * n * (n - 1) + 1"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    # Merge dict2 and dict3 first\n    merged_dict2_3 = {**dict2, **dict3}\n    \n    # Merge the result with dict1\n    final_dict = {**dict1, **merged_dict2_3}\n    \n    return final_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    \"\"\"\n    Function to get the frequency of all elements in a list.\n    \n    Args:\n        lst (list): A list of elements.\n        \n    Returns:\n        dict: A dictionary where keys are the unique elements from the list and values are their corresponding frequencies.\n    \"\"\"\n    frequency_dict = {}\n    for element in lst:\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        else:\n            frequency_dict[element] = 1\n    return frequency_dict"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    \"\"\"\n    Finds the closest smaller number than n.\n\n    :param n: int\n    :return: int\n    \"\"\"\n    if n < 0:\n        return None  # Return None for negative numbers as there is no smaller negative number\n    else:\n        return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_longest_word(words):\n    \"\"\"\n    Returns the length of the longest word in the given list.\n\n    Args:\n    words (list): A list of strings representing words.\n\n    Returns:\n    int: The length of the longest word in the list.\n    \"\"\"\n    if not words:\n        return 0\n\n    longest_length = 0\n    longest_word = \"\"\n\n    for word in words:\n        word_length = len(word)\n        if word_length > longest_length:\n            longest_length = word_length\n            longest_word = word\n\n    return longest_length\n\n# Test the function\nassert len_longest_word([\"python\", \"PHP\", \"bigdata\"]) == 7"}
{"task_id": "Mbpp/91", "solution": "def find_substring(strings, substring):\n    \"\"\"\n    Check if a substring is present in a list of strings.\n    \n    :param strings: List of strings.\n    :param substring: The substring to search for.\n    :return: True if the substring is found in any string in the list, False otherwise.\n    \"\"\"\n    for s in strings:\n        if substring in s:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": ""}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n    assert power(3, 4) == 81\n    \"\"\"\n    if b == 0:\n        return 1  # Handling the case where any number to the power 0 is 1\n    elif b == 1:\n        return a  # Any number to the power 1 is itself\n    else:\n        result = 1\n        while b > 0:\n            if b % 2 == 1:  # odd number\n                result *= a\n            a *= a  # square the base\n            b //= 2  # divide the exponent by 2\n        return result"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples):\n    # Sort the tuples based on the second element (index 1)\n    sorted_tuples = sorted(tuples, key=lambda x: x[1])\n    \n    # Return the first tuple from the sorted list\n    return sorted_tuples[0]"}
{"task_id": "Mbpp/95", "solution": "def find_min_length(list_of_lists):\n    \"\"\"\n    Finds the length of the smallest list in a list of lists.\n\n    :param list_of_lists: A list where each element is a list.\n    :return: The length of the smallest list in list_of_lists.\n    :assertion: assert find_min_length([[1],[1,2]]) == 1\n    \"\"\"\n    min_length = float('inf')\n    for sublist in list_of_lists:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n\n# Test case\nassert find_min_length([[1],[1,2]]) == 1"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    \"\"\"Return the number of divisors of the given integer n.\"\"\"\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:  # Only increment if i is not the square root of n\n                count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lst):\n    # Flatten the list of lists\n    flat_list = [item for sublist in lst for item in sublist]\n    \n    # Create a dictionary to store frequencies\n    freq_dict = {}\n    \n    # Iterate through the flattened list to count frequencies\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    \n    return freq_dict"}
{"task_id": "Mbpp/98", "solution": "import math\ndef multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal_number):\n    if decimal_number == 0:\n        return '0'\n    \n    binary = ''\n    while decimal_number > 0:\n        remainder = decimal_number % 2\n        binary = str(remainder) + binary\n        decimal_number = decimal_number // 2\n    return binary.lstrip('0')"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    # Function to check if a number is a palindrome\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    # Start checking from n + 1\n    for i in range(n + 1, 100000):  # Arbitrary large limit to ensure we find the next palindrome\n        if is_palindrome(i):\n            return i\n\n    # If no palindrome found within the limit, return None\n    return None"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    \"\"\"\n    Function to find the kth element in the given array using 1-based indexing.\n    \n    Args:\n    arr (list): The input array.\n    k (int): The index of the kth element (1-based indexing).\n    \n    Returns:\n    int: The kth element in the array.\n    \"\"\"\n    if len(arr) < k:\n        raise IndexError(\"The array does not contain enough elements for the given index.\")\n    \n    return arr[k - 1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_case_string):\n    # Split the snake case string into words\n    words = snake_case_string.split('_')\n    \n    # Capitalize the first letter of each word and join them together\n    camel_case_string = ''.join(word.capitalize() for word in words)\n    \n    # Convert the entire camel case string to lowercase\n    camel_case_string = camel_case_string.lower()\n    \n    return camel_case_string"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m).\n\n    :param n: Integer representing the row index.\n    :param m: Integer representing the column index.\n    :return: The Eulerian number a(n, m).\n    \"\"\"\n    if m > n:\n        return 0\n\n    # Base case: m = 1\n    if m == 1:\n        return n + 1\n\n    # Recursive case: m > 1\n    return (n * eulerian_num(n - 1, m - 1) + eulerian_num(n - 1, m)) // (m + 1)"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(sublists):\n    # Sort each sublist in the given list of lists\n    sorted_sublists = [sorted(sublist) for sublist in sublists]\n    return sorted_sublists"}
{"task_id": "Mbpp/105", "solution": "def count_true_booleans(lst):\n    \"\"\"\n    Count the number of True values in the given list.\n\n    :param lst: List of booleans\n    :return: Integer representing the count of True values\n    \"\"\"\n    return sum(1 for value in lst if value)\n\n# Test case\nassert count_true_booleans([True, False, True]) == 2"}
{"task_id": "Mbpp/106", "solution": "def add_lists(list_to_add, tuples_to_append):\n    # Ensure the input types are compatible\n    if not isinstance(list_to_add, list) or not all(isinstance(item, int) for item in list_to_add):\n        raise TypeError(\"First argument must be a list of integers.\")\n    if not all(isinstance(t, tuple) for t in tuples_to_append):\n        raise TypeError(\"Second argument must be a list of tuples.\")\n\n    # Append the list to each tuple\n    result = []\n    for t in tuples_to_append:\n        result.append(t + list_to_add)\n\n    return result"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    # Combine all lists into a single list\n    combined_list = list1 + list2 + list3\n    \n    # Sort the combined list\n    sorted_list = sorted(combined_list)\n    \n    return sorted_list"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_str, rotations):\n    # Function to rotate a binary string\n    def rotate(binary_str):\n        return binary_str[-1] + binary_str[:-1]\n\n    # Convert binary string to integer\n    num = int(binary_str, 2)\n\n    # Check if the number is odd\n    if num % 2 != 0:\n        return 1  # There is exactly one odd number (the number itself)\n\n    # Calculate the total number of odd numbers after rotations\n    # Each rotation shifts the bits to the left, which affects the parity (odd/even nature) of the number\n    # A single bit rotation changes the parity if the rotation count is odd\n    # For example, rotating '0011' (3 in binary) by 1 gives '1100' (4 in decimal), which is even\n    \n    # If the number of rotations is odd, the parity will change for at least one number\n    # If the number of rotations is even, the parity will remain the same for all numbers\n    \n    # If the number of rotations is odd, there will be exactly one odd number after rotation\n    if rotations % 2 != 0:\n        return 1\n    else:\n        return 0"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    # Flatten the nested lists into a single list\n    flat_list = [item for sublist in nested_lists for item in sublist]\n    \n    # Convert the flat list to a set to remove duplicates\n    unique_elements = set(flat_list)\n    \n    # Convert the set back to a list to match the expected output format\n    result = list(unique_elements)\n    \n    return result"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    \"\"\"\n    Check if a string represents an integer.\n    \"\"\"\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    result = 0\n    for num in tup:\n        result = result * 10 + int(num)  # Convert each digit to its corresponding place value and sum them up\n    return result"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    \"\"\"\n    Converts a string to a list of strings split on the space character.\n\n    :param input_string: The string to be split.\n    :return: A list of words from the input string.\n    \"\"\"\n    return input_string.split()"}
{"task_id": "Mbpp/119", "solution": "def find_single_element(arr):\n    # Initialize a dictionary to keep track of element counts\n    element_counts = {}\n    \n    # Iterate through the array\n    for num in arr:\n        # If the element is not in the dictionary, add it with a count of 1\n        if num not in element_counts:\n            element_counts[num] = 1\n        # If the element is already in the dictionary, increment its count\n        else:\n            element_counts[num] += 1\n    \n    # The element that appears only once is the key with a count of 1\n    for num, count in element_counts.items():\n        if count == 1:\n            return num\n\n    # If no such element is found, return None\n    return None\n\n# Test the function with the provided example\nassert find_single_element([1, 1, 2, 2, 3]) == 3"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples):\n    # Initialize variables to keep track of the maximum product and the tuple with this maximum product\n    max_product = float('-inf')\n    max_product_tuple = None\n\n    # Iterate over all possible pairs of tuples\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            # Calculate the product of the numbers from each tuple in the pair\n            product = tuples[i][0] * tuples[j][0] if len(tuples[i]) == 1 and len(tuples[j]) == 1 else max(tuples[i][0] * tuples[j][0], max_product_tuple(tuples[i]) * max_product_tuple(tuples[j]))\n\n            # Update the maximum product and the tuple if the current product is greater\n            if product > max_product:\n                max_product = product\n                max_product_tuple = (tuples[i], tuples[j])\n\n    return max_product_tuple\ntuples = [(2, 7), (2, 6), (1, 8), (4, 9)]"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(limit):\n    def sum_of_divisors(n):\n        \"\"\"Returns the sum of proper divisors of n.\"\"\"\n        total = 0\n        for i in range(1, n // 2 + 1):\n            if n % i == 0:\n                total += i\n        return total\n\n    def is_amicable(num, other):\n        \"\"\"Checks if two numbers are amicable.\"\"\"\n        return sum_of_divisors(num) == other and sum_of_divisors(other) == num\n\n    total_sum = 0\n    for num in range(1, limit + 1):\n        if is_amicable(num, num):\n            total_sum += num\n            total_sum += sum_of_divisors(num)\n\n    return total_sum"}
{"task_id": "Mbpp/124", "solution": "import math\nimport cmath\ndef angle_complex(z):\n    \"\"\"\n    Calculate the angle (in radians) of a complex number z.\n    \n    Args:\n        z (complex): A complex number represented as a + bj.\n        \n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    # Extract the real and imaginary parts\n    real = z.real\n    imag = z.imag\n    \n    # Calculate the magnitude (modulus) of the complex number\n    magnitude = math.sqrt(real**2 + imag**2)\n    \n    # Calculate the angle using the arctangent of the imaginary part over the real part\n    # Ensuring the angle is within the range [-pi, pi] by adjusting for the quadrant\n    angle_radians = math.atan2(imag, real)\n    \n    # Adjust the angle to be within the range [-pi, pi]\n    if angle_radians < 0:\n        angle_radians += math.pi\n    elif angle_radians > math.pi:\n        angle_radians -= 2 * math.pi\n    \n    return angle_radians"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    # Initialize counters for 0s and 1s\n    count_0 = 0\n    count_1 = 0\n    \n    # Iterate through the binary string\n    for digit in binary_string:\n        if digit == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n    \n    # Calculate the maximum difference between counts of 0s and 1s\n    max_diff = abs(count_0 - count_1)\n    \n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(a, b):\n    # Function to find all divisors of a number\n    def find_divisors(n):\n        divisors = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n\n    # Find divisors of both numbers\n    divisors_a = find_divisors(a)\n    divisors_b = find_divisors(b)\n\n    # Find common divisors\n    common_divisors = set(divisors_a).intersection(divisors_b)\n\n    # Calculate the sum of common divisors\n    sum_common = sum(common_divisors)\n\n    return sum_common\n\n# Test the function with the given example\nassert sum_common_divisors(10, 15) == 6"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    \"\"\"\n    Multiply two integers.\n    \n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        \n    Returns:\n        int: The product of a and b.\n    \"\"\"\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, words):\n    \"\"\"\n    Finds words longer than n characters from a given list of words.\n\n    :param n: The minimum length of words to be returned.\n    :type n: int\n    :param words: A list of words.\n    :type words: list(str)\n    :return: A list of words longer than n characters.\n    :rtype: list(str)\n    \"\"\"\n    return [word for word in words if len(word) > n]"}
{"task_id": "Mbpp/129", "solution": "def is_magic_square(matrix):\n    # Check if the matrix is a square matrix (number of rows == number of columns)\n    if len(matrix) != len(matrix[0]):\n        return False\n\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(column) for column in zip(*matrix)]\n\n    # A matrix is a magic square if all row sums, column sums, and the diagonal sums are equal\n    return len(set(row_sums)) == 1 and len(set(col_sums)) == 1 and sum(matrix[i][i] for i in range(len(matrix))) == row_sums[0] and sum(matrix[i][len(matrix)-i-1] for i in range(len(matrix))) == col_sums[0]\n\n# Test the function with the provided example\nassert is_magic_square([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    \"\"\"\n    Finds the item with the maximum frequency in a given list.\n    \n    :param lst: A list of integers.\n    :return: The item with the maximum frequency in the list.\n    :assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]) == 2\n    \"\"\"\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    \n    max_freq_item = max(frequency, key=frequency.get)\n    return max_freq_item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(string):\n    vowels = 'aeiouAEIOU'\n    reversed_vowels = ''\n    for char in string:\n        if char in vowels:\n            reversed_vowels += vowels[-1]\n        else:\n            reversed_vowels += char\n    return reversed_vowels"}
{"task_id": "Mbpp/132", "solution": "def tup_to_str(tup):\n    \"\"\"Convert a tuple to a string.\"\"\"\n    return ' '.join(tup)\n\n# Test case\nassert tup_to_str(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')) == \"exercises\""}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    \"\"\"\n    Calculate the sum of negative numbers in a given list of numbers.\n    \n    :param numbers: List of numbers\n    :return: Sum of negative numbers in the list\n    \"\"\"\n    return sum(x for x in numbers if x < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    \"\"\"\n    Calculate the nth hexagonal number.\n    \n    Args:\n        n (int): The position of the hexagonal number to calculate.\n        \n    Returns:\n        int: The nth hexagonal number.\n    \"\"\"\n    # Correct formula for the nth hexagonal number\n    return (n * (5 * n - 3)) // 2"}
{"task_id": "Mbpp/137", "solution": "def zero_to_non_zero_ratio(arr):\n    \"\"\"\n    Calculate the ratio of zeroes to non-zeroes in an array of integers.\n    \n    :param arr: List of integers.\n    :return: Ratio of zeroes to non-zeroes as a float.\n    \"\"\"\n    zero_count = arr.count(0)\n    non_zero_count = len(arr) - zero_count\n    if non_zero_count == 0:\n        return float('inf')  # Return infinity if there are no non-zero elements\n    else:\n        return zero_count / non_zero_count\n\n# Test cases\nassert math.isclose(zero_to_non_zero_ratio([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\nassert math.isclose(zero_to_non_zero_ratio([2, -1, 5, 6, 0, -3]), 0.333333, rel_tol=0.001)\nassert math.isclose(zero_to_non_zero_ratio([0, 0, 0]), 3.0, rel_tol=0.001)\nassert math.isclose(zero_to_non_zero_ratio([1, 1, 1, 1]), float('inf'), rel_tol=0.001)"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    # Convert the number to binary and remove the '0b' prefix\n    binary_representation = bin(n)[2:]\n    \n    # Initialize a variable to keep track of the sum of powers of 2\n    sum_of_powers = 0\n    \n    # Iterate over each digit in the binary representation\n    for digit in binary_representation:\n        # If the digit is '1', add the corresponding power of 2 to the sum\n        if digit == '1':\n            power_of_two = 2 ** (int(binary_representation.index('1') - 1))\n            sum_of_powers += power_of_two\n    \n    # Check if the sum equals the original number\n    return sum_of_powers == n"}
{"task_id": "Mbpp/139", "solution": "import math\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle given its radius.\n\n    :param radius: float, the radius of the circle\n    :return: float, the circumference of the circle\n    \"\"\"\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    flat_set = set()\n    for sublist in lst:\n        for item in sublist:\n            flat_set.add(item)\n    return flat_set"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(lst):\n    \"\"\"\n    Sorts a list of elements in ascending order.\n    \"\"\"\n    return sorted(lst)"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Count the number of identical items in the same position across three given lists.\n\n    :param list1: First list\n    :param list2: Second list\n    :param list3: Third list\n    :return: The count of identical items in the same position across all three lists\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_abs_diff(arr):\n    \"\"\"\n    Function to find the maximum difference between any two elements in a given array.\n    \n    Args:\n        arr (list): A list of integers.\n        \n    Returns:\n        int: The maximum absolute difference between any two elements in the array.\n    \"\"\"\n    max_diff = 0\n    min_val = float('inf')\n    \n    for num in arr:\n        min_val = min(min_val, num)\n        max_diff = max(max_diff, abs(num - min_val))\n    \n    return max_diff\n\n# Test the function\nassert max_abs_diff([2, 1, 5, 3]) == 4"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    \"\"\"\n    Finds integers x and y such that ax + by = n.\n    Returns a tuple (x, y) if a solution exists, otherwise returns None.\n    \"\"\"\n    # Check if the equation has a solution\n    if (a * n) % b == 0 or (b * n) % a == 0:\n        # Calculate x and y\n        x = (n * a) // b\n        y = (n * b) // a\n        return (x, y)\n    else:\n        return None"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(original_list, elements_to_remove):\n    \"\"\"\n    Remove all elements from the original list that are present in the list of elements to remove.\n    \n    Args:\n        original_list (list): The original list from which elements are to be removed.\n        elements_to_remove (list): A list of elements to be removed from the original list.\n        \n    Returns:\n        list: The original list with elements to be removed.\n    \"\"\"\n    return [item for item in original_list if item not in elements_to_remove]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    \"\"\"\n    Calculate the sum (n - 2*i) for i ranging from 0 to n // 2.\n    \n    Example:\n    assert sum_series(6) == 12\n    \n    Args:\n    n (int): The upper limit for the sum calculation.\n    \n    Returns:\n    int: The sum of the series.\n    \"\"\"\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        total_sum += n - 2 * i\n    return total_sum"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    # Convert the string to lowercase for case-insensitive comparison\n    s = s.lower()\n    \n    # Initialize a counter for characters at alphabet positions\n    count = 0\n    \n    # Iterate over each character in the string\n    for char in s:\n        # Check if the character is a letter (a-z or A-Z)\n        if char.isalpha():\n            # Check if the position in the string matches the position in the alphabet\n            if ord(char) == ord('a') + i or ord(char) == ord('e') + i:\n                count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if (lst[i] ^ lst[j]) & 1 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 that is greater than or equal to n.\n    :param n: int, the input number.\n    :return: int, the smallest power of 2 >= n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        while n < 1:\n            n <<= 1  # Left shift n by 1 bit, equivalent to multiplying by 2\n        return n"}
{"task_id": "Mbpp/168", "solution": "def count_occurrences(lst, num):\n    \"\"\"\n    Count the number of occurrences of a given number in a list.\n\n    Args:\n        lst (list): The input list.\n        num (int): The number to count occurrences of.\n\n    Returns:\n        int: The count of occurrences of the given number in the list.\n    \"\"\"\n    return lst.count(num)\n\n# Test cases\nassert count_occurrences([1, 2, 3], 4) == 0\nassert count_occurrences([1, 2, 2, 3, 3], 3) == 3\nassert count_occurrences([1, 2, 3, 4, 4, 4], 4) == 4"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start_index, end_index):\n    \"\"\"\n    Function to find the sum of numbers in a list within a range specified by two indices.\n    \n    Args:\n        lst (list): The input list of numbers.\n        start_index (int): The starting index in the list.\n        end_index (int): The ending index in the list.\n        \n    Returns:\n        int: The sum of numbers in the list from start_index to end_index inclusive.\n    \"\"\"\n    return sum(lst[start_index:end_index+1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    # A regular pentagon has 5 equal sides.\n    return 5 * side_length"}
{"task_id": "Mbpp/172", "solution": "def count_occurrence(input_string):\n    \"\"\"\n    Function to count the number of occurrences of the string 'std' in a given string.\n    \n    Args:\n        input_string (str): The input string in which to search for 'std'.\n        \n    Returns:\n        int: The count of occurrences of 'std' in the input string.\n    \"\"\"\n    count = 0\n    for char in input_string:\n        if char == 'std':\n            count += 1\n    return count\n\n# Test the function\nassert count_occurrence(\"letstdlenstdporstd\") == 3"}
{"task_id": "Mbpp/222", "solution": "def check_type(tup):\n    \"\"\"\n    Check if all elements in the tuple have the same data type.\n    \n    Args:\n    tup (tuple): A tuple of elements to be checked.\n    \n    Returns:\n    bool: True if all elements in the tuple are of the same data type, False otherwise.\n    \"\"\"\n    # Convert the tuple to a list for easier iteration\n    t_list = list(tup)\n    \n    # Check if all elements are of the same type\n    if len(set(type(x) for x in t_list)) == 1:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    # Check if the array length is valid\n    if len(arr) != n:\n        return False\n\n    # Count occurrences of the element\n    count = arr.count(element)\n\n    # Determine if the element is the majority\n    majority_threshold = n // 2 + 1\n    if count > majority_threshold:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    \"\"\"\n    Count the number of set bits (binary digits with value 1) in a given number.\n    \n    :param n: int\n    :return: int\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def remove_odd_index_chars(string):\n    \"\"\"\n    Remove characters at odd indices from a given string.\n\n    :param string: The input string.\n    :return: The string with characters at odd indices removed.\n    \"\"\"\n    result = []\n    for i in range(len(string)):\n        if i % 2 == 0:\n            result.append(string[i])\n    return ''.join(result)\n\n# Test cases\nassert remove_odd_index_chars('abcdef') == 'ace'\nassert remove_odd_index_chars('hello') == 'hell'\nassert remove_odd_index_chars('1234567890') == '123456789'\nassert remove_odd_index_chars('Python') == 'Pthon'"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    Returns the minimum value among three numbers.\n    \n    Args:\n        a (int/built-in): The first number.\n        b (int/built-in): The second number.\n        c (int/built-in): The third number.\n        \n    Returns:\n        int: The minimum value among a, b, and c.\n    \"\"\"\n    return min(a, b, c)"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string, char):\n    return string.replace(' ', char)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    # Sort the list in descending order\n    lst.sort(reverse=True)\n    \n    # Return the first n items from the sorted list\n    return lst[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n    \n    Parameters:\n    r (float): The radius of the base of the cylinder.\n    h (float): The height of the cylinder.\n    \n    Returns:\n    float: The lateral surface area of the cylinder.\n    \"\"\"\n    return 2 * math.pi * r * h"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    \"\"\"\n    Calculate the volume of a cube given its side length.\n\n    :param side_length: The length of a side of the cube.\n    :return: The volume of the cube.\n    \"\"\"\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    \"\"\"\n    Sets all even bits of a given number.\n\n    :param n: int\n    :return: int\n    \"\"\"\n    # Convert the number to binary and filter only the even bits (0s)\n    even_bits = '1' * (n // 2) + '0' * (n % 2)\n    return int(even_bits, 2)"}
{"task_id": "Mbpp/237", "solution": "def check_occurrences(tuples_list):\n    occurrences = {}\n    for tup in tuples_list:\n        if tup in occurrences:\n            occurrences[tup] += 1\n        else:\n            occurrences[tup] = 1\n    return occurrences\n\n# Test the function with the provided example\nassert check_occurrences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(string):\n    # Initialize the count to zero\n    count = 0\n    \n    # Iterate over the string using sliding window approach\n    for i in range(len(string)):\n        # Initialize the length of the current substring to 1\n        substring_length = 1\n        \n        # Extend the substring length as long as possible\n        while i + substring_length < len(string):\n            substring_length += 1\n            i += 1\n        \n        # Count the current substring\n        count += substring_length\n    \n    # Return the total count of non-empty substrings\n    return count"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 1  # Base case: an empty sequence\n\n    count = 0\n    for i in range(1, m + 1):\n        if n > 0:\n            count += get_total_number_of_sequences(i * 2, n - 1)\n        else:\n            count += 1  # If n is 0, just add 1 for the empty sequence\n\n    return count"}
{"task_id": "Mbpp/240", "solution": "def replace_last_element(first_list, second_list):\n    \"\"\"\n    Replaces the last element of the first list with the elements of the second list.\n\n    Args:\n        first_list (list): The first list to modify.\n        second_list (list): The list to use for replacing the last element of first_list.\n\n    Returns:\n        list: The modified first list.\n    \"\"\"\n    # Ensure both lists have the same length\n    assert len(first_list) == len(second_list), \"Lists must have the same length\"\n\n    # Replace the last element of the first list\n    first_list[-1] = second_list[-1]\n\n    return first_list\n\n# Test the function\nassert replace_last_element([1, 3, 5, 7, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8]"}
{"task_id": "Mbpp/242", "solution": "def count_characters(string):\n    \"\"\"\n    Function to count the total number of characters in a string.\n    \n    Args:\n        string (str): The input string.\n        \n    Returns:\n        int: The total number of characters in the string.\n    \"\"\"\n    return len(string)\n\n# Test case\nassert count_characters(\"python programming\") == 18"}
{"task_id": "Mbpp/244", "solution": "def next_Perfect_Square(n):\n    \"\"\"\n    Returns the next perfect square greater than a given number.\n    \n    :param n: The given number.\n    :return: The next perfect square greater than n.\n    \"\"\"\n    # Calculate the square root of the given number\n    root = int(n ** 0.5) + 1\n    \n    # The next perfect square is the square of the next integer after the root\n    next_perfect_square = root ** 2\n    \n    return next_perfect_square"}
{"task_id": "Mbpp/245", "solution": "def max_bitonic_subsequence_sum(arr):\n    n = len(arr)\n    if n < 2:\n        return 0  # No bitonic subsequence possible\n\n    # Initialize variables\n    max_sum = 0\n    current_sum = 0\n    start = 0\n    end = 0\n\n    # Iterate through the array\n    for i in range(1, n):\n        # If current element is greater than the last element in the subsequence\n        if arr[i] > arr[end]:\n            current_sum += arr[i]\n            end = i\n        else:\n            # Update current_sum and check if it's the maximum so far\n            current_sum = arr[i]\n            if current_sum > max_sum:\n                max_sum = current_sum\n            start = end - 1  # Move the start to just before the peak\n\n    # Return the maximum sum of the bitonic subsequence\n    return max_sum\n\n# Test the function with the provided example\nassert max_bitonic_subsequence_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    \"\"\"\n    Function to find the length of the longest palindromic subsequence in the given string.\n    :param s: str, the input string\n    :return: int, the length of the longest palindromic subsequence\n    \"\"\"\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    # Base case: single character palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Fill the dp table\n    for i in range(1, n):\n        for j in range(i):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # The length of the longest palindromic subsequence is the maximum value in the dp table\n    return max(dp[n - 1])"}
{"task_id": "Mbpp/250", "solution": "def count_occurrences(tup, element):\n    \"\"\"\n    Count the occurrences of a given element in a tuple.\n\n    Args:\n        tup (tuple): A tuple containing elements.\n        element (int/float): The element to count occurrences of.\n\n    Returns:\n        int: The count of occurrences of the given element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == element:\n            count += 1\n    return count\n\n# Test cases\nassert count_occurrences((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4) == 0\nassert count_occurrences((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 5) == 1\nassert count_occurrences((a, b, c, d, e, f, g, h, i, j, k, l), 3) == 2"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    \"\"\"\n    Inserts an element before each element in the list and returns the resulting list.\n\n    Args:\n        lst (list): The original list.\n        element (any): The element to insert before each item in the list.\n\n    Returns:\n        list: The modified list with the specified element inserted before each item.\n    \"\"\"\n    return [element + item for item in lst]"}
{"task_id": "Mbpp/252", "solution": "import math\ndef convert(c):\n    \"\"\"\n    Converts a complex number to polar coordinates (magnitude, angle).\n\n    Args:\n        c (complex): A complex number in the form of `x + yi`.\n\n    Returns:\n        Tuple: A tuple containing the magnitude and angle of the complex number in polar form.\n    \"\"\"\n    # Extract real and imaginary parts\n    real = c.real\n    imag = c.imag\n\n    # Calculate the magnitude (r)\n    r = math.sqrt(real**2 + imag**2)\n\n    # Calculate the angle (theta) in radians\n    theta = math.atan2(imag, real)\n\n    # Convert the angle to degrees for better readability (optional)\n    theta_degrees = math.degrees(theta)\n\n    return r, theta"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    \"\"\"\n    Returns the number of integer elements in a given list.\n    \n    :param lst: List of elements.\n    :return: Integer count in the list.\n    \"\"\"\n    return sum(1 for element in lst if isinstance(element, int))"}
{"task_id": "Mbpp/255", "solution": "from itertools import product\ndef combinations_colors(lst, n):\n    \"\"\"\n    Generate all combinations (with repetition) of the elements of the list and return a list with a tuple for each combination.\n    \n    :param lst: List of elements.\n    :param n: Length of each combination.\n    :return: List of tuples representing all combinations.\n    \"\"\"\n    return list(product(lst, repeat=n))"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    \"\"\"\n    Function to count the number of prime numbers less than a given non-negative number.\n    \n    Args:\n        n (int): A non-negative number.\n        \n    Returns:\n        int: The count of prime numbers less than n.\n    \"\"\"\n    primes_count = 0\n    \n    # Function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Count primes up to n\n    for possible_prime in range(2, n):\n        if is_prime(possible_prime):\n            primes_count += 1\n    \n    return primes_count"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    # Temporarily store the first number\n    temp = a\n    \n    # Swap the numbers\n    a = b\n    b = temp\n    \n    # Return the swapped numbers as a tuple\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuples_list):\n    # Sort tuples in descending order based on the sum of their elements\n    tuples_list.sort(key=lambda x: sum(x), reverse=True)\n    return tuples_list"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    \"\"\"\n    Finds the nth Newman-Shanks-Williams prime number.\n\n    :param n: The position of the nth Newman-Shanks-Williams prime to find.\n    :return: The nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    # Initialize the first known Newman-Shanks-Williams prime\n    prime = 7  # The 3rd prime number\n\n    # Function to find the next prime number using a more efficient method\n    def find_next_prime(prime):\n        \"\"\"\n        Finds the next prime number using the Sieve of Eratosthenes optimized approach.\n        \n        :param prime: The current prime number.\n        :return: The next prime number.\n        \"\"\"\n        candidate = prime + 2  # Start checking from the next even number\n        while True:\n            if all(candidate % i != 0 for i in range(2, int(candidate ** 0.5) + 1)):\n                return candidate\n            candidate += 2\n\n    # Calculate the nth Newman-Shanks-Williams prime\n    for _ in range(n - 1):\n        prime = find_next_prime(prime)\n\n    return prime"}
{"task_id": "Mbpp/261", "solution": "def division_elements(t1, t2):\n    \"\"\"\n    Perform element-wise division operation across two tuples.\n    \n    Args:\n        t1 (tuple): The first tuple of numbers.\n        t2 (tuple): The second tuple of numbers.\n        \n    Returns:\n        tuple: A tuple where each element is the result of dividing the corresponding elements from the input tuples.\n    \"\"\"\n    return tuple(a / b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    \"\"\"\n    Splits a list into two parts where the length of the first part is L.\n    :param lst: The input list.\n    :param L: The desired length of the first part of the list.\n    :return: A tuple containing the two resulting lists.\n    \"\"\"\n    if len(lst) < L:\n        return ([], lst)\n    \n    first_part = lst[:L]\n    second_part = lst[L:]\n    \n    return (first_part, second_part)"}
{"task_id": "Mbpp/264", "solution": "def dog_age(years):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n\n    Args:\n        years (int): The actual age of the dog in human years.\n\n    Returns:\n        int: The corresponding age in dog's years.\n    \"\"\"\n    # For the first two years, a dog year is equal to 10.5 human years.\n    if years <= 2:\n        return years * 10.5\n    # For ages greater than 2, each dog year equals 4 human years.\n    else:\n        return 21 + (years - 2) * 4"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    \"\"\"\n    Splits a list into sublists every nth element.\n\n    Args:\n        lst (list): The original list.\n        n (int): The index at which to split the list.\n\n    Returns:\n        list: A list of sublists, each containing every nth element starting from the first.\n    \"\"\"\n    result = []\n    for i in range(0, len(lst), n):\n        result.append(lst[i:i+n])\n    return result"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Args:\n        side_length (int): The length of a side of the cube.\n\n    Returns:\n        int: The lateral surface area of the cube.\n    \"\"\"\n    # The lateral surface area of a cube is given by 6 * side_length^2\n    lateral_area = 6 * (side_length ** 2)\n    return lateral_area"}
{"task_id": "Mbpp/267", "solution": "def square_sum(n):\n    \"\"\"Return the sum of the squares of the first n odd natural numbers.\"\"\"\n    total = 0\n    for i in range(1, n + 1, 2):  # Iterate over the first n odd numbers\n        total += i ** 2\n    return total\n\n# Test the function with the given assertion\nassert square_sum(2) == 10"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    # Correct formula for the nth star number: S_n = 6n(n-1) + 1\n    return 6 * n * (n - 1) + 1"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    Returns the ASCII value of a given character.\n    \n    :param char: The character for which the ASCII value is to be returned.\n    :return: The ASCII value of the character.\n    \"\"\"\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    \"\"\"\n    Calculate the sum of even numbers at even positions in a list.\n    \n    :param lst: List of integers.\n    :return: Sum of even numbers at even positions.\n    \"\"\"\n    sum_even = 0\n    for i in range(0, len(lst), 2):  # Iterate over even positions\n        if lst[i] % 2 == 0:  # Check if the number is even\n            sum_even += lst[i]\n    return sum_even"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    \"\"\"\n    Calculate the sum of the first n even natural numbers raised to the fifth power.\n    \"\"\"\n    total_sum = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            total_sum += i ** 5\n    return total_sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    return [item[2] for item in tuples_list]"}
{"task_id": "Mbpp/273", "solution": "def subtract_elements(t1, t2):\n    \"\"\"\n    Function to subtract elements of two tuples at the same index.\n    \n    Args:\n        t1 (tuple): A tuple of elements.\n        t2 (tuple): Another tuple of elements.\n        \n    Returns:\n        tuple: A new tuple where each element is the difference between the corresponding elements in t1 and t2.\n    \"\"\"\n    result = ()\n    for i, val1 in enumerate(t1):\n        result += (val1 - t2[i],)\n    return result\n\n# Test case\nassert subtract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Calculate the sum of binomial coefficients at even indices for a given positive integer n.\n    \n    Args:\n        n (int): A positive integer.\n        \n    Returns:\n        int: The sum of binomial coefficients at even indices.\n    \"\"\"\n    # Calculate the sum of binomial coefficients at even indices\n    sum_even = sum(binomial_coefficient(i, n // 2) for i in range(0, n, 2))\n    return sum_even"}
{"task_id": "Mbpp/276", "solution": "import math\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculate the volume of a cylinder.\n    \n    Args:\n        radius (float): The radius of the base of the cylinder.\n        height (float): The height of the cylinder.\n        \n    Returns:\n        float: The volume of the cylinder.\n    \"\"\"\n    return math.pi * radius ** 2 * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n):\n    \"\"\"\n    Filter a dictionary to include only entries with values greater than or equal to n.\n    \n    Args:\n    dictionary (dict): The input dictionary.\n    n (int): The threshold value.\n    \n    Returns:\n    dict: The filtered dictionary.\n    \"\"\"\n    filtered_dict = {key: value for key, value in dictionary.items() if value >= n}\n    return filtered_dict"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for i, element in enumerate(tup):\n        if isinstance(element, tuple):\n            count += 1\n            if count == 1:\n                return count  # Return the count as soon as the first nested tuple is found\n        else:\n            count += 1\n    return count  # Return the total count of elements before the first tuple"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Check if a number is a decagonal number.\n    A decagonal number is a number that can be expressed as the sum of consecutive odd numbers starting from 1.\n    For example, the 3rd decagonal number is 1 + 3 + 5 + 7 = 16.\n    The formula to find the nth decagonal number is:\n    D(n) = 4 * (n * (n + 1)) // 2 + 1\n    \"\"\"\n    if n < 1:\n        return False\n    decagonal_number = 4 * (n * (n + 1)) // 2 + 1\n    return decagonal_number == n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    \"\"\"\n    Function to find an element in a list and return a tuple containing a boolean indicating its presence and its index (or -1 if not found).\n    :param arr: List of elements.\n    :param element: Element to search for.\n    :return: Tuple (boolean, index).\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    \"\"\"\n    Check if all elements in the list are unique.\n    \n    Args:\n    lst (list): A list of elements.\n    \n    Returns:\n    bool: True if all elements in the list are unique, False otherwise.\n    \"\"\"\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    \"\"\"\n    Subtracts two lists element-wise.\n    \n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n        \n    Returns:\n        list: The result of subtracting corresponding elements from both lists.\n    \"\"\"\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(number):\n    # Convert the number to a string to iterate over each digit\n    digits = list(number)\n    \n    # Initialize a dictionary to store the frequency of each digit\n    digit_freq = {}\n    \n    # Count the frequency of each digit\n    for digit in digits:\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for freq in digit_freq.values():\n        if freq > int(digit):\n            return False\n    \n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    \"\"\"\n    Check if all elements in the list are equal to the given element.\n    \n    Args:\n        lst (list): A list of elements to be checked.\n        element (any): The element to compare against each item in the list.\n        \n    Returns:\n        bool: True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "solution": "def text_match_two_three(text):\n    # Check if 'a' is followed by exactly two 'b's\n    if text.startswith('ab'):\n        return True\n    # Check if 'a' is followed by exactly three 'b's\n    elif text.startswith('abb'):\n        return True\n    # If neither condition is met, return False\n    else:\n        return False"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, rep):\n    # Find the length of the array\n    n = len(arr)\n    \n    # Initialize variables to store the maximum sum and the corresponding sub-array indices\n    max_sum = 0\n    max_sub_array = []\n    \n    # Iterate through each possible starting index of a sub-array\n    for i in range(n):\n        # Calculate the sum of the sub-array starting from the current index\n        sub_sum = sum(arr[i:i+n])\n        \n        # Repeat the array 'k' times and append the current sub-array to the result\n        repeated_sub_sum = sub_sum * rep\n        if repeated_sub_sum > max_sum:\n            max_sum = repeated_sub_sum\n            max_sub_array = [arr[j] for j in range(i, i+n+1)]\n    \n    return max_sum, max_sub_array"}
{"task_id": "Mbpp/287", "solution": "def square_sum(n):\n    \"\"\"\n    Calculate the sum of squares of the first n even natural numbers.\n    \n    Args:\n        n (int): The number of even natural numbers to consider.\n        \n    Returns:\n        int: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    total_sum = 0\n    for i in range(2, n + 1, 2):  # Iterate over even numbers\n        total_sum += i ** 2\n    return total_sum\n\n# Test the function with the given assertion\nassert square_sum(2) == 20"}
{"task_id": "Mbpp/290", "solution": "def max_length(lst):\n    \"\"\"\n    Function to find the list of maximum length in a list of lists.\n    \n    :param lst: A list of lists.\n    :return: A tuple where the first element is the length of the longest list and the second element is the longest list itself.\n    \"\"\"\n    max_len = 0\n    longest_list = []\n    \n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            longest_list = sublist\n    \n    return (max_len, longest_list)"}
{"task_id": "Mbpp/292", "solution": "def find_quotient(dividend, divisor):\n    \"\"\"\n    Finds the quotient of two numbers, rounded down to the nearest integer.\n    \n    Args:\n        dividend (int): The dividend number.\n        divisor (int): The divisor number.\n        \n    Returns:\n        int: The quotient, rounded down to the nearest integer.\n    \"\"\"\n    if divisor == 0:\n        raise ValueError(\"Divisor cannot be zero.\")\n    return dividend // divisor\n\n# Test cases\nassert find_quotient(10, 3) == 3\nassert find_quotient(15, 4) == 3\nassert find_quotient(20, 5) == 4\nassert find_quotient(25, 5) == 5\nassert find_quotient(30, 0)  # This should raise a ValueError"}
{"task_id": "Mbpp/293", "solution": "import math\ndef otherside_rightangle(a, b):\n    # Pythagorean theorem: c^2 = a^2 + b^2\n    c = math.sqrt(a**2 + b**2)\n    return c"}
{"task_id": "Mbpp/294", "solution": "def find_max_value(lst):\n    \"\"\"\n    Finds the maximum value in a given heterogeneous list.\n    \n    :param lst: A list containing various data types.\n    :return: The maximum value in the list.\n    \"\"\"\n    if not lst:\n        return None\n    \n    # Sort the list first by whether the element is an integer (True for integers, False for non-integers)\n    # Then sort lexicographically by the elements themselves\n    sorted_lst = sorted(lst, key=lambda x: (isinstance(x, int), x))\n    \n    # Return the maximum value from the sorted list\n    return sorted_lst[-1]\n\n# Test the function with the provided example\nassert find_max_value(['Python', 3, 2, 4, 5, 'version']) == 5"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    \"\"\"\n    Function to count inversions in an array.\n    \n    Args:\n        arr (list): A list of integers.\n        \n    Returns:\n        int: The number of inversions in the array.\n    \"\"\"\n    inv_count = 0\n    n = len(arr)\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    \n    return inv_count"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    \"\"\"Flattens a given nested list structure.\"\"\"\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(tuples):\n    # Initialize the maximum aggregate to a very low value\n    max_aggregate_value = float('-inf')\n    \n    # Iterate through each tuple in the list\n    for tup in tuples:\n        # Extract the first element (name) and the second element (score)\n        name, score = tup\n        \n        # Update the maximum aggregate if the current score is higher\n        if score > max_aggregate_value:\n            max_aggregate_value = score\n            \n    return max_aggregate_value"}
{"task_id": "Mbpp/300", "solution": "import math\ndef count_binary_seq(n):\n    # Base case: n = 0\n    if n == 0:\n        return 1\n    \n    # Recursive case: sum of first n bits must equal sum of last n bits\n    total_count = 0\n    \n    # For each bit (0 or 1) in the middle n-1 positions, there are 2 choices\n    for middle_bit in (0, 1):\n        count = 2 ** (n - 1)\n        # Sum of first n bits equals sum of last n bits when the middle bit is 0\n        if middle_bit == 0:\n            total_count += count\n        # Sum of first n bits equals sum of last n bits when the middle bit is 1\n        else:\n            total_count += count\n    \n    return total_count"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    \"\"\"\n    Function to find the depth of a dictionary.\n\n    Args:\n        d (dict): A dictionary to analyze.\n\n    Returns:\n        int: The depth of the dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        raise ValueError(\"Input must be a dictionary.\")\n    \n    depth = 0\n    items = d.items()\n    \n    for item in items:\n        k, v = item\n        if isinstance(v, dict):\n            depth += 1\n            items.extend(v.items())\n        else:\n            depth += 1\n    \n    return depth"}
{"task_id": "Mbpp/305", "solution": "def start_with_p(word_list):\n    \"\"\"\n    Returns two words from a list of words starting with the letter 'p'.\n    \n    :param word_list: List of words\n    :return: Tuple of two words starting with 'p'\n    \"\"\"\n    result = []\n    for word in word_list:\n        if word.lower().startswith('p'):\n            result.append(word)\n    return result\n\n# Test case\nassert start_with_p([\"Python PHP\", \"Java JavaScript\", \"c c++\"]) == ('Python', 'PHP')"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, i, k):\n    \"\"\"\n    Finds the maximum sum of an increasing subsequence from the prefix up to the ith index\n    and including the kth element which is after i (k > i).\n    \"\"\"\n    # Initialize variables\n    n = len(arr)\n    if i >= n or k >= n:\n        return 0  # Return 0 if the indices are out of bounds\n\n    # Initialize variables for dynamic programming\n    dp = [0] * (k + 1)\n    prev = [-1] * (k + 1)\n    max_sum = 0\n\n    # Base case: if the first element is the kth element after i"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, num_largest_products):\n    # Initialize a list to store the largest products\n    largest_products = []\n\n    # Iterate over the first list and the second list simultaneously\n    for i, factor1 in enumerate(list1):\n        for factor2 in enumerate(list2):\n            # Calculate the product and add it to the list if it's not already included\n            product = factor1 * factor2\n            if product not in largest_products or len(largest_products) < num_largest_products:\n                largest_products.append(product)\n\n    # Return the list of the specified number of largest products\n    return largest_products\nlist1 = [1, 2, 3, 4, 5, 6]\nlist2 = [3, 6, 8, 9, 10, 6]"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"Return the maximum of two numbers.\"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(string):\n    return tuple(string.replace(\" \", \"\"))"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Sets the left most unset bit in the binary representation of a given number.\n\n    Args:\n        n (int): The number to modify.\n\n    Returns:\n        int: The number with the left most unset bit set.\n    \"\"\"\n    # Convert the number to its binary representation\n    binary_representation = bin(n)[2:]\n    \n    # Find the position of the first unset bit from the left\n    left_most_unset_bit_index = binary_representation.find('0')\n    \n    # If there are no unset bits (all bits are 1), return the original number\n    if left_most_unset_bit_index == len(binary_representation):\n        return n\n    \n    # Set the left most unset bit to 1\n    new_binary_representation = binary_representation[:left_most_unset_bit_index] + '1' + binary_representation[left_most_unset_bit_index:]\n    \n    # Convert the new binary representation back to an integer\n    result = int(new_binary_representation, 2)\n    \n    return result"}
{"task_id": "Mbpp/312", "solution": "import math\ndef volume_cone(r, h):\n    \"\"\"\n    Calculate the volume of a cone given the radius (r) and height (h).\n    :param r: float, the radius of the base of the cone.\n    :param h: float, the height of the cone.\n    :return: float, the volume of the cone.\n    \"\"\"\n    return (1/3) * math.pi * r**2 * h"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    \"\"\"\n    Returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize the highest power of 2\n    power_of_2 = 0\n    \n    # Loop to find the highest power of 2 <= n\n    while 2 ** power_of_2 <= n:\n        power_of_2 += 1\n    \n    return power_of_2"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    # Base cases\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    \n    # Initialize the first two Lucas numbers\n    lucas = [0, 1]\n    \n    # Generate the Lucas sequence up to the nth term\n    for i in range(2, n):\n        lucas.append(lucas[i-1] + lucas[i-2])\n    \n    return lucas[n-1]"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_str):\n    \"\"\"\n    Apply a given format string to all elements in a list.\n\n    :param lst: List of elements to format.\n    :param format_str: Format string to apply to each element.\n    :return: List with formatted elements.\n    \"\"\"\n    return [format_str.format(*args) for args in zip(*lst)]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(list1, list2, list3):\n    result = {}\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            result[list1[i]] = {list2[list1[i]]: list3[i]}\n    return result\nlist1 = [\"S001\", \"S002\", \"S003\", \"S004\"]\nlist2 = [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"]\nlist3 = [85, 98, 89, 92]"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    # Base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    # Initialize memoization dictionary\n    memo = {}\n    \n    # Recursive function to compute the maximum sum\n    def helper(n):\n        # Check if the value is in the memoization dictionary\n        if n in memo:\n            return memo[n]\n        \n        # Base cases for division\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        \n        # Calculate the sum for the current division\n        current_sum = helper(n // 2) + helper(n // 3) + helper(n // 4) + helper(n // 5)\n        \n        # Store the result in memoization dictionary\n        memo[n] = current_sum\n        \n        return current_sum\n    \n    # Call the helper function with the input n\n    return helper(n)"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    \"\"\"Check if a tuple contains no duplicates.\"\"\"\n    return len(tup) == len(set(tup))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(string):\n    \"\"\"\n    Finds the first non-repeated character in a given string.\n\n    :param string: The input string.\n    :return: The first non-repeated character, or None if all characters are repeated.\n    \"\"\"\n    char_count = {}\n    for char in string:\n        char_count[char] = char_count.get(char, 0) + 1\n\n    for char in string:\n        if char_count[char] == 1:\n            return char\n\n    return None"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    # Sort the numbers\n    sorted_numbers = sorted([a, b, c])\n    \n    # Calculate the median\n    n = len(sorted_numbers)\n    if n % 2 == 1:\n        # If odd, return the middle number\n        return sorted_numbers[n // 2]\n    else:\n        # If even, return the average of the two middle numbers\n        return (sorted_numbers[n // 2 - 1] + sorted_numbers[n // 2]) / 2.0"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    \"\"\"\n    Compute the sum of digits of each number in a given list.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        int: The sum of the digits of all numbers in the list.\n    \"\"\"\n    total_sum = 0\n    for num in numbers:\n        total_sum += sum(int(digit) for digit in str(num))\n    return total_sum"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    \"\"\"Return the minimum of two numbers a and b.\"\"\"\n    if a < b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    \"\"\"\n    Check if an element exists within a tuple.\n    \n    Args:\n        tuplex (tuple): The tuple to search within.\n        element (str): The element to check for existence.\n        \n    Returns:\n        bool: True if the element exists in the tuple, False otherwise.\n    \"\"\"\n    return element in tuplex"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(num):\n    \"\"\"\n    Determine if the parity (odd or even nature) of the given number is odd.\n    \n    :param num: The number to check for odd parity.\n    :return: True if the number is odd, False otherwise.\n    \"\"\"\n    if num % 2 == 1:\n        return True  # The number is odd\n    else:\n        return False  # The number is even"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(tuples):\n    min_product = float('inf')\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            product = tuple(a * b for a, b in zip(tuples[i], tuples[j]))\n            min_product = min(min_product, product)\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def find_minimum(lst):\n    \"\"\"\n    Finds the minimum value in a given heterogeneous list.\n    \n    :param lst: A list containing various data types.\n    :return: The minimum value in the list.\n    :assert: assert find_minimum(['Python', 3, 2, 4, 5, 'version']) == 2\n    \"\"\"\n    # Filter the list to only include integers and find the minimum\n    min_val = min(x for x in lst if isinstance(x, (int, float)))\n    return min_val\n\n# Test case\nassert find_minimum(['Python', 3, 2, 4, 5, 'version']) == 2"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    \"\"\"\n    Remove all odd numbers from a given list.\n    \n    Args:\n    numbers (list): A list of numbers.\n    \n    Returns:\n    list: A new list with all odd numbers removed.\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extract the nth element from a given list of tuples.\n\n    :param lst: A list of tuples.\n    :param n: The index of the tuple to extract.\n    :return: The nth element from the first n tuples in the list.\n    \"\"\"\n    if n > len(lst):\n        return \"Index out of range\"\n    else:\n        return lst[n]\nn = 0"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check if any value in seq1 exists in seq2.\n    :param seq1: List or iterable of values.\n    :param seq2: List or iterable of values.\n    :return: Boolean indicating whether there is an overlap.\n    \"\"\"\n    for value in seq1:\n        if value in seq2:\n            return True\n    return False"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    # Initialize variables to keep track of the maximum product and the pair producing it\n    max_prod = float('-inf')\n    max_pair = (None, None)\n    \n    # Iterate through the array to find the pair with the highest product\n    for i in range(len(arr)):\n        # Skip zero since multiplying by zero will always result in zero\n        if arr[i] == 0:\n            continue\n        \n        # Initialize current product and pair\n        current_prod = arr[i]\n        current_pair = (arr[i],)\n        \n        # Update current product by multiplying with the next element\n        for j in range(i + 1, len(arr)):\n            current_prod *= arr[j]\n            current_pair = (current_pair[0], arr[j])\n            \n            # Check if the current product is greater than max_prod\n            if current_prod > max_prod:\n                max_prod = current_prod\n                max_pair = current_pair\n    \n    return max_pair"}
{"task_id": "Mbpp/418", "solution": "def find_max_length_element(lst):\n    \"\"\"\n    Finds the element in a list of lists with the maximum length.\n    \n    Args:\n        lst (list): A list of lists.\n        \n    Returns:\n        element (any): The element from the list with the maximum length.\n    \"\"\"\n    max_length = max(len(sublist) for sublist in lst)\n    for element in [item for sublist in lst for item in sublist]:\n        if len(element) == max_length:\n            return element\n\n    # If no element has the maximum length, return None\n    return None\n\n# Test case\nassert find_max_length_element([['A'],['A','B'],['A','B','C']]) == ['A', 'B', 'C']"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(numbers)"}
{"task_id": "Mbpp/420", "solution": "def cube_sum(n):\n    \"\"\"\n    Calculate the cube sum of the first n even natural numbers.\n    \n    Args:\n        n (int): The number of even natural numbers to consider.\n        \n    Returns:\n        int: The sum of their cubes.\n    \"\"\"\n    cube_sum_value = 0\n    for i in range(2, 2*n, 2):  # Iterate over the first n even numbers\n        cube_sum_value += i ** 3\n    \n    return cube_sum_value\n\n# Test the function with the given assertion\nassert cube_sum(2) == 72"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup, delim=' '):\n    # Convert each element of the tuple to a string and join them using the specified delimiter\n    return delim.join(str(x) for x in tup)"}
{"task_id": "Mbpp/422", "solution": "def find_average_of_cube(n):\n    \"\"\"\n    Calculate the average of the cubes of the first n natural numbers.\n    \n    Args:\n        n (int): The number of natural numbers to consider.\n        \n    Returns:\n        float: The average of the cubes of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of the first n natural numbers using the formula\n    sum_of_cubes = (n * (n + 1)) // 2 ** 2\n    \n    # Calculate the average by dividing the sum by n\n    average = sum_of_cubes / n\n    \n    return average\n\n# Test the function with the given assertion\nassert find_average_of_cube(2) == 4.5"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tup):\n    \"\"\"Extract the last character from each string in the given tuple.\"\"\"\n    return [s[-1] for s in tup]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    \"\"\"\n    Count the number of sublists containing a particular element.\n\n    :param lst: List of lists.\n    :param element: Element to search for in sublists.\n    :return: Number of sublists containing the element.\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_odd_numbers(numbers):\n    \"\"\"\n    Filter odd numbers from a given list.\n\n    Args:\n    numbers (list): A list of integers.\n\n    Returns:\n    list: A new list containing only the odd numbers from the input list.\n    \"\"\"\n    return [num for num in numbers if num % 2 != 0]\n\n# Test the function\nassert filter_odd_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 3, 5, 7, 9]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_str):\n    # Split the input date string into year, month, and day components\n    year, month, day = map(int, date_str.split('-'))\n    \n    # Construct the new date string in the desired format\n    new_date_str = f\"{day}-{month}-{year}\"\n    \n    return new_date_str"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    # Initialize variables for shell sort\n    gap = len(arr) // 2\n    while gap > 0:\n        # Inner loop to sort segments of size 'gap'\n        for i in range(gap, len(arr)):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def extract_elementwise_and_tuples(tup1, tup2):\n    # Initialize lists to store the results\n    elementwise = []\n    tuples = []\n\n    # Iterate over the elements of the first tuple\n    for i in range(len(tup1)):\n        # If the current elements of both tuples are equal, append 1 to the tuples list\n        if tup1[i] == tup2[i]:\n            tuples.append(1)\n        # Otherwise, append 0 to the elementwise list\n        else:\n            elementwise.append(0)\n\n    # Convert the lists to tuples\n    return tuple(elementwise), tuple(tuples)\n\n# Test the function with the provided example\nresult = extract_elementwise_and_tuples((10, 4, 6, 9), (5, 2, 3, 3))"}
{"task_id": "Mbpp/430", "solution": "import math\ndef parabola_directrix(a, b, c):\n    \"\"\"\n    Calculate the directrix of a parabola given by the equation y = ax^2 + bx + c.\n    \n    Parameters:\n    a (float): Coefficient of x^2\n    b (float): Coefficient of x\n    c (float): Constant term\n    \n    Returns:\n    float: The directrix of the parabola\n    \"\"\"\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Calculate the directrix\n    if discriminant > 0:\n        # Real and distinct roots\n        root1 = (-b + math.sqrt(discriminant)) / (2 * a)\n        root2 = (-b - math.sqrt(discriminant)) / (2 * a)\n        directrix = root1 + (c / (2 * a))\n    elif discriminant == 0:\n        # Real and repeated roots\n        root = -b / (2 * a)\n        directrix = root + c / (2 * a)\n    else:\n        # Complex roots\n        raise ValueError(\"The parabola has complex roots and does not have a directrix.\")\n    \n    return directrix"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, h):\n    \"\"\"\n    Calculate the median length of a trapezium.\n\n    Parameters:\n    a (int): The length of the top base.\n    b (int): The length of the bottom base.\n    h (int): The height of the trapezium.\n\n    Returns:\n    int: The median length of the trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = (a + b) / 2 * h\n\n    # Calculate the total perimeter\n    perimeter = a + b + 2 * h\n\n    # The median length is half of the perimeter\n    median_length = perimeter / 2\n\n    return median_length"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    \"\"\"\n    Check if the given number is greater than all elements in the array.\n    \n    Args:\n        arr (list): A list of integers.\n        num (int): The number to compare against the elements in the array.\n        \n    Returns:\n        bool: True if the number is greater than all elements in the array, False otherwise.\n    \"\"\"\n    return all(num > x for x in arr)"}
{"task_id": "Mbpp/435", "solution": "def last_digit(n):\n    \"\"\"\n    Returns the last digit of the given number.\n    \"\"\"\n    return n % 10\n\n# Test cases\nassert last_digit(123) == 3\nassert last_digit(456) == 6\nassert last_digit(789) == 9\nassert last_digit(0) == 0"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(numbers):\n    \"\"\"\n    Returns a list containing only the negative numbers from the input list.\n    \n    :param numbers: List of numbers\n    :return: List of negative numbers\n    \"\"\"\n    return [num for num in numbers if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    \"\"\"\n    Remove odd characters from a string.\n    \n    :param s: str, the input string\n    :return: str, the string with odd characters removed\n    \"\"\"\n    # Convert the string to a list of characters\n    char_list = list(s)\n    \n    # Remove odd-indexed characters (0-based index)\n    char_list = char_list[1::2]\n    \n    # Join the list back into a string\n    return ''.join(char_list)"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    # Convert each integer to a string and join them together\n    # Then convert the resulting string back to an integer\n    return int(''.join(map(str, numbers)))"}
{"task_id": "Mbpp/440", "solution": "import re\ndef find_adverb_position(sentence):\n    words = sentence.split()\n    for i, word in enumerate(words):\n        if word.endswith('ly'):\n            return i, word, word\n    return None, None, None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(side_length):\n    \"\"\"\n    Calculate the surface area of a cube given its side length.\n\n    Args:\n        side_length (int): The length of a side of the cube.\n\n    Returns:\n        int: The surface area of the cube.\n    \"\"\"\n    # A cube has 6 faces, each of which is a square with side length 'side_length'\n    # The area of one face is side_length ** 2\n    # The total surface area is 6 * (side_length ** 2)\n    surface_area = 6 * (side_length ** 2)\n    return surface_area"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tup1, tup2):\n    # Ensure both tuples have the same length\n    assert len(tup1) == len(tup2), \"Tuples must have the same length\"\n    \n    result = []\n    for i in range(len(tup1)):\n        # Perform element-wise multiplication\n        result.append(tup1[i] * tup2[i])\n    \n    return result"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tuple_list, element_list):\n    \"\"\"\n    Count the occurrence of all elements in the list within a tuple.\n    \n    Args:\n        tuple_list (tuple): A tuple containing elements to be checked.\n        element_list (list): A list of elements to count occurrences of in tuple_list.\n        \n    Returns:\n        int: The total count of occurrences of elements in element_list within tuple_list.\n    \"\"\"\n    count = 0\n    for element in element_list:\n        count += tuple_list.count(element)\n    return count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(lst):\n    \"\"\"\n    Function to find cubes of individual elements in a list.\n    \n    Args:\n        lst (list): A list of integers.\n        \n    Returns:\n        list: A list containing the cubes of the elements in the input list.\n    \"\"\"\n    return [x**3 for x in lst]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of Perrin numbers.\n    \n    Args:\n        n (int): The index of the Perrin number to calculate.\n        \n    Returns:\n        int: The sum of the Perrin numbers up to the given index.\n    \"\"\"\n    # Initialize the first two Perrin numbers\n    perrin_numbers = [1, 2]\n    \n    # Generate Perrin numbers up to the given index\n    for i in range(2, n):\n        next_perrin_number = sum(perrin_numbers) * 2\n        if next_perrin_number % 5 == 0:\n            perrin_numbers.append(next_perrin_number)\n    \n    # Return the sum of Perrin numbers up to the given index\n    return sum(perrin_numbers)"}
{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    \"\"\"\n    Extract specified size of strings from a given list of string values.\n\n    :param string_list: List of strings.\n    :param size: The number of strings to extract.\n    :return: A list containing the specified number of strings from the input list.\n    \"\"\"\n    return string_list[:size]\nstring_list = ['Python', 'list', 'exercises', 'practice', 'solution']\nsize = 8"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(string):\n    return string.replace(' ', '')"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    # Initialize the sum with zero\n    sum = 0\n    \n    # Iterate through all numbers from 1 to n\n    for i in range(1, n + 1):\n        # Check if the current number is even\n        if i % 2 == 0:\n            # Add the even number to the sum\n            sum += i\n    \n    return sum"}
{"task_id": "Mbpp/454", "solution": "def text_match_wordz(text):\n    \"\"\"\n    Check if the text contains the word 'z'.\n    \n    :param text: The input text to check.\n    :return: True if the word 'z' is found, False otherwise.\n    \"\"\"\n    return 'z' in text.lower()"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    \"\"\"\n    Check if the given month number contains 31 days.\n    \n    Args:\n        month (int): The number representing the month (1-12).\n        \n    Returns:\n        bool: True if the month has 31 days, False otherwise.\n    \"\"\"\n    # Months with 31 days\n    thirty_one_days_months = [1, 3, 5, 7, 8, 10, 12]\n    \n    if month in thirty_one_days_months:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    reversed_list = []\n    for string in string_list:\n        reversed_list.append(string[::-1])\n    return reversed_list"}
{"task_id": "Mbpp/457", "solution": "def find_min_sublist(lst):\n    \"\"\"\n    Finds the sublist with the minimum length in the given list.\n    \n    Args:\n        lst (list): A list of integers or any comparable elements.\n        \n    Returns:\n        sublist (list): The sublist with the minimum length.\n    \"\"\"\n    min_length = len(lst)\n    min_sublist = []\n    \n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sublist = lst[i:j]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n    \n    return min_sublist\n\n# Test cases\nassert find_min_sublist([1, 1, 2, 1, 2, 3]) == [1]\nassert find_min_sublist([1, 2, 3]) == [1]\nassert find_min_sublist([1, 1, 1, 1]) == [1]\nassert find_min_sublist([]) == []"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Args:\n        length (int or float): The length of the rectangle.\n        width (int or float): The width of the rectangle.\n\n    Returns:\n        int: The area of the rectangle.\n    \"\"\"\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(input_string):\n    result = ''\n    for char in input_string:\n        if char.islower():\n            result += char\n    return result"}
{"task_id": "Mbpp/460", "solution": "def extract_first_elements(sublists):\n    return [first_element for sublist in sublists for first_element in sublist]\n\n# Test case\nassert extract_first_elements([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]"}
{"task_id": "Mbpp/462", "solution": "from itertools import chain, combinations\ndef combinations_list(lst):\n    # Generate all combinations using itertools.combinations\n    return list(chain(*[combinations(lst, r) for r in range(len(lst) + 1)]))"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    \"\"\"\n    Function to find the maximum product subarray of the given array.\n    \n    Args:\n        arr (list): A list of integers.\n        \n    Returns:\n        int: The maximum product of a contiguous subarray.\n    \"\"\"\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    current_product = arr[0]\n    \n    for num in arr[1:]:\n        current_product *= num\n        if current_product > max_product:\n            max_product = current_product\n        else:\n            current_product = num\n    \n    return max_product"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    \"\"\"\n    Function to drop empty items from a given dictionary.\n    \n    Args:\n        dictionary (dict): A dictionary containing items, some of which may be None.\n        \n    Returns:\n        dict: The original dictionary with all None values removed.\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    \"\"\"\n    Function to find the maximum product formed by multiplying numbers of an increasing subsequence.\n    \n    Args:\n        arr (list): A list of integers.\n        \n    Returns:\n        int: The maximum product of an increasing subsequence.\n    \"\"\"\n    # Initialize variables\n    max_prod = 0\n    curr_prod = 1\n    start = 0\n    end = 0\n    \n    # Iterate through the array\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            # Update current product\n            curr_prod *= arr[i]\n            \n            # Update start and end indices if current product is greater\n            if curr_prod > max_prod:\n                max_prod = curr_prod\n                start = i - 1\n                end = i\n    \n    return max_prod"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    # Ensure the tuple has at least two elements\n    if len(tup) < 2:\n        raise ValueError(\"Tuple must have at least two elements for pairwise addition.\")\n    \n    # Perform pairwise addition of neighboring elements\n    result = []\n    for i in range(len(tup) - 1):\n        result.append(tup[i] + tup[i + 1])\n    \n    return result"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    \"\"\"\n    Finds the product of the array elements modulo n.\n    \n    Args:\n    arr (list): A list of integers.\n    n (int): The modulus value.\n    \n    Returns:\n    int: The product of the array elements modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n  # Update product modulo n after each multiplication\n    \n    return product"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    \"\"\"\n    Check if the given list contains consecutive numbers.\n    \n    Args:\n        lst (list): A list of integers.\n        \n    Returns:\n        bool: True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n    # Sort the list in ascending order\n    sorted_lst = sorted(lst)\n    \n    # Check for consecutive numbers\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i + 1] - sorted_lst[i] != 1:\n            return False\n    \n    return True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuples_list):\n    # Convert all tuples to frozenset to remove duplicates and maintain order, then find intersection\n    intersection_set = frozenset(tuples_list[0])\n    for tup in tuples_list[1:]:\n        intersection_set &= frozenset(tup)\n    return {tuple(sorted(set(item))) for item in intersection_set}"}
{"task_id": "Mbpp/474", "solution": "def replace_char(word, char_to_replace, replacement_char):\n    \"\"\"\n    Replaces all occurrences of a specified character in a string with another character.\n    \n    :param word: The input string.\n    :param char_to_replace: The character to be replaced.\n    :param replacement_char: The character to replace the specified character with.\n    :return: The modified string.\n    \"\"\"\n    return word.replace(char_to_replace, replacement_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_dict_by_value(d):\n    return sorted(d.items(), key=lambda x: x[1])\n\n# Test case\nassert sort_dict_by_value({'Math':81, 'Physics':83, 'Chemistry':87}) == [('Chemistry', 87), ('Physics', 83), ('Math', 81)]"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    # Check if the array is empty\n    if not arr:\n        return None\n    \n    # Find the minimum and maximum values\n    min_val = min(arr)\n    max_val = max(arr)\n    \n    # Calculate the sum of the minimum and maximum values\n    big_sum = min_val + max_val\n    \n    return big_sum"}
{"task_id": "Mbpp/477", "solution": "def is_lower(input_str):\n    \"\"\"\n    Converts the given string to lower case.\n    \n    :param input_str: The input string to convert to lower case.\n    :return: The input string converted to lower case.\n    \"\"\"\n    return input_str.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(input_str):\n    result = \"\"\n    for char in input_str:\n        if char.isupper():\n            result += char\n    return result"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(number):\n    \"\"\"\n    Returns the first digit of the given number.\n    \n    :param number: An integer.\n    :return: The first digit of the number.\n    \"\"\"\n    # Convert the number to a string to easily access the first character\n    first_char = str(number)[0]\n    \n    # Check if the number is positive to avoid negative sign issues\n    if first_char >= '0':\n        return int(first_char)\n    else:\n        return None  # or raise an exception if negative numbers are not allowed"}
{"task_id": "Mbpp/554", "solution": "def odd_numbers(numbers):\n    \"\"\"\n    Returns a list containing only the odd integers from the input list.\n    \"\"\"\n    return [num for num in numbers if num % 2 != 0]\n\n# Test the function\nassert odd_numbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    # Sum of cubes of the first n natural numbers\n    sum_of_cubes = n * (n + 1) * (2 * n + 1) // 6\n    \n    # Sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    \n    # Calculate the difference\n    difference = sum_of_cubes - sum_n\n    \n    return difference"}
{"task_id": "Mbpp/556", "solution": "def find_odd_pair(lst, target):\n    \"\"\"\n    Count the number of pairs whose XOR value is odd.\n\n    :param lst: List of integers.\n    :param target: Target value for the pair's XOR result.\n    :return: Number of pairs whose XOR is odd.\n    \"\"\"\n    count = 0\n    n = len(lst)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (lst[i] ^ lst[j]) % 2 != 0:\n                count += 1\n    return count\n\n# Test the function\nassert find_odd_pair([5, 4, 7, 2, 1], 5) == 6"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    \"\"\"\n    Function to toggle the case of all characters in a string.\n    \n    :param s: str, the input string\n    :return: str, the string with all characters toggled between lower and upper case\n    \"\"\"\n    return s.swapcase()"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    \"\"\"\n    Calculate the sum of the absolute differences between corresponding digits of two numbers.\n    \n    Args:\n        num1 (int): The first number.\n        num2 (int): The second number.\n        \n    Returns:\n        int: The sum of the absolute differences between corresponding digits.\n    \"\"\"\n    # Ensure both numbers have the same length\n    assert len(str(num1)) == len(str(num2)), \"Numbers must have the same length\"\n    \n    # Calculate the sum of absolute differences\n    digit_sum = sum(abs(int(digit1) - int(digit2)) for digit1, digit2 in zip(str(num1), str(num2)))\n    \n    return digit_sum"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr):\n    \"\"\"\n    Function to find the sum of the largest contiguous sublist in the given list.\n    \n    Args:\n        arr (list): A list of integers.\n        \n    Returns:\n        int: The sum of the largest contiguous sublist.\n    \"\"\"\n    max_sum = arr[0]\n    current_sum = arr[0]\n    start = 0\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            current_sum = arr[i] + current_sum\n            start = i\n        else:\n            current_sum = max(arr[i], current_sum)\n    \n    return current_sum"}
{"task_id": "Mbpp/560", "solution": "def union_elements(t1, t2):\n    # Convert tuples to lists for easier manipulation\n    t1_list = list(t1)\n    t2_list = list(t2)\n    \n    # Combine the two lists\n    combined_list = t1_list + t2_list\n    \n    # Convert the combined list to a set to remove duplicates\n    unique_set = set(combined_list)\n    \n    # Convert the set back to a sorted list\n    sorted_union = sorted(unique_set)\n    \n    return sorted_union"}
{"task_id": "Mbpp/562", "solution": "def find_max_length(lst):\n    \"\"\"\n    Finds the length of the longest sublist in a given list of sublists.\n\n    :param lst: A list of lists.\n    :return: The length of the longest sublist.\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n\n# Test cases\nassert find_max_length([[1],[1,4],[5,6,7,8]]) == 4\nassert find_max_length([[1,2,3],[4,5],[6,7,8,9]]) == 5\nassert find_max_length([[1,2,3,4,5], [6,7,8,9], [10]]) == 5\nassert find_max_length([[1,2,3,4], [5,6,7,8], [9]]) == 3"}
{"task_id": "Mbpp/563", "solution": "import re\ndef extract_values(string):\n    \"\"\"\n    Extract values between quotation marks from a string.\n\n    :param string: The input string.\n    :return: A list containing the values between quotation marks.\n    \"\"\"\n    # Use regular expression to match and extract values between quotation marks\n    # The pattern `\"(.*?)\"` matches a string between opening and closing quotation marks,\n    # and `re.findall()` returns all non-overlapping matches of the pattern in the string as a list.\n    return re.findall(r'\"(.*?)\"', string)"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] != lst[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/565", "solution": "def split_string(s):\n    \"\"\"Split a string into individual characters.\"\"\"\n    return list(s)\n\n# Test the function\nassert split_string('python') == ['p', 'y', 't', 'h', 'o', 'n']"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    \"\"\"Return the sum of the digits of a non-negative integer n.\"\"\"\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    \"\"\"\n    Check if a given list is sorted in ascending order.\n\n    Args:\n        lst (list): The list to be checked.\n\n    Returns:\n        bool: True if the list is sorted in ascending order, False otherwise.\n    \"\"\"\n    # Check if the list is empty\n    if not lst:\n        return False\n    \n    # Compare the first and the last elements\n    if lst[0] > lst[-1]:\n        return False\n    \n    # Recursively check the sublists\n    for i in range(1, len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    \n    return True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    \"\"\"\n    Creates a list of N empty dictionaries.\n\n    :param N: int, the number of dictionaries to create.\n    :return: list, a list of N empty dictionaries.\n    \"\"\"\n    return [[] for _ in range(N)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(sublists):\n    # Function to sort a single sublist\n    def sort_sublist(sublist):\n        return sorted(sublist)\n\n    # Apply the sorting function to each sublist in the main list\n    return [sort_sublist(sublist) for sublist in sublists]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(*lists):\n    # Initialize an empty list to store unique elements\n    unique_elements = []\n    \n    # Iterate through each list\n    for list_ in lists:\n        # Convert the list to a set to remove duplicates\n        unique_set = set(list_)\n        \n        # Convert the set back to a list and append to the unique_elements list\n        unique_elements.extend(list(unique_set))\n    \n    # Return the list of unique elements\n    return unique_elements"}
{"task_id": "Mbpp/573", "solution": "def unique_product(lst):\n    # Convert the list to a set to remove duplicates\n    unique_elements = set(lst)\n    \n    # Initialize the product to 1\n    product = 1\n    \n    # Iterate over the unique elements and multiply them\n    for num in unique_elements:\n        product *= num\n    \n    return product"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(sub_list, main_list):\n    \"\"\"\n    Check if a sublist is a part of a given main list.\n    \n    Args:\n        sub_list (list): The sublist to be checked.\n        main_list (list): The main list to check against.\n        \n    Returns:\n        bool: True if sub_list is a sublist of main_list, False otherwise.\n    \"\"\"\n    # Convert both lists to sets for efficient membership checking\n    sub_set = set(sub_list)\n    main_set = set(main_list)\n    \n    # Check if all elements of the sub_list are in the main_list\n    return sub_set.issubset(main_set)"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    # Calculate the factorial of the number\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    \n    # Get the last digit of the factorial\n    last_digit = factorial % 10\n    \n    return last_digit"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(t1, t2):\n    # Convert tuples to sets to easily find dissimilar elements\n    set1 = set(t1)\n    set2 = set(t2)\n    \n    # Find the elements in set1 but not in set2\n    dissimilar_in_t1 = set1 - set2\n    \n    # Find the elements in set2 but not in set1\n    dissimilar_in_t2 = set2 - set1\n    \n    # Combine both sets of dissimilar elements\n    dissimilar_elements = dissimilar_in_t1.union(dissimilar_in_t2)\n    \n    return list(dissimilar_elements)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    result = []\n    stack = []\n    for item in nested_tuple:\n        if isinstance(item, tuple):\n            stack.append(item)\n        else:\n            if len(stack) % 2 == 0:\n                result.append(item)\n            stack.pop()\n    return tuple(result)"}
{"task_id": "Mbpp/581", "solution": "def surface_area(base_edge, height):\n    \"\"\"\n    Calculate the surface area of a square pyramid.\n\n    Args:\n        base_edge (int): The length of the base edge.\n        height (int): The height of the pyramid.\n\n    Returns:\n        int: The surface area of the pyramid.\n    \"\"\"\n    # Calculate the slant height using the Pythagorean theorem\n    slant_height = (base_edge ** 2 + height ** 2) ** 0.5\n\n    # Calculate the surface area using the formula for a square pyramid\n    base_area = base_edge ** 2\n    surface_area = 2 * (base_area + 4 * slant_height * base_edge)\n\n    return surface_area\n\n# Test the function with the given assertion\nassert surface_area(3, 4) == 33"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        catalan_values = [1, 1]\n        for i in range(2, n + 1):\n            catalan_values.append(catalan_values[i - 1] + catalan_values[i - 2])\n        return catalan_values[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    \n    # Return the first n items from the sorted list\n    return sorted_items[:n]\nitems = [{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}]\nn = 1"}
{"task_id": "Mbpp/586", "solution": "def split_and_join(arr, n):\n    \"\"\"\n    Split a list at the nth element and add the first part to the end.\n    \n    :param arr: List to be split.\n    :param n: Index at which to split the list.\n    :return: Modified list with the first part appended to the end.\n    \"\"\"\n    # Check if the index is valid\n    if n < 0 or n >= len(arr):\n        raise IndexError(\"Index out of range for the given list.\")\n    \n    # Split the list at the specified index\n    first_part = arr[:n]\n    second_part = arr[n:]\n    \n    # Join the two parts by appending the first part to the end of the second part\n    result = second_part + first_part\n    \n    return result\n\n# Test the function with the provided example\nassert split_and_join([12,10,5,6,52,36], 2) == [5,6,52,36,12,10]"}
{"task_id": "Mbpp/587", "solution": "def list_to_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n\n    :param lst: A list of elements.\n    :return: The list converted to a tuple.\n    \"\"\"\n    return tuple(lst)\n\n# Test the function\nassert list_to_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(lst):\n    \"\"\"\n    Function to find the difference between the largest and smallest value in a given list.\n    \n    Args:\n        lst (list): A list of integers.\n        \n    Returns:\n        int: The difference between the largest and smallest value in the list.\n    \"\"\"\n    if not lst:\n        return 0\n    \n    min_val = min(lst)\n    max_val = max(lst)\n    \n    return max_val - min_val"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    \"\"\"Return a list of perfect squares between start and end inclusive.\"\"\"\n    result = []\n    for i in range(start, end + 1):\n        square = i ** 2\n        result.append(square)\n    return result"}
{"task_id": "Mbpp/590", "solution": "import cmath\ndef polar_rect(r, theta):\n    \"\"\"\n    Converts polar coordinates (r, theta) to rectangular (x, y) coordinates.\n\n    Args:\n        r (float): The radius.\n        theta (float): The angle in radians.\n\n    Returns:\n        Tuple of floats (x, y):\n            x: The rectangular coordinate.\n            y: The imaginary part if theta is not an integer multiple of pi.\n    \"\"\"\n    # Calculate the rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    # Handle the case where theta is not an integer multiple of pi\n    if theta % (math.pi * 2) != 0:\n        y = 1j * y\n\n    return (x, y)"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    # Swapping the first and last elements\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "def sum_Of_product(n):\n    # Correct formula for the sum of the product of consecutive binomial coefficients\n    # (n + 1) * (n - 1)\n    return (n + 1) * (n - 1)"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    \"\"\"\n    Remove leading zeroes from an IP address.\n\n    :param ip_address: str\n    :return: str\n    \"\"\"\n    # Use a regular expression to match any sequence of zeros at the beginning\n    # and replace it with an empty string\n    return re.sub('0*', '', ip_address)"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(numbers):\n    \"\"\"\n    Calculate the difference between the first even and the first odd number in the list.\n    \n    Args:\n        numbers (list): A list of integers.\n        \n    Returns:\n        int: The difference between the first even and the first odd number in the list.\n    \"\"\"\n    # Check if the list contains at least one even and one odd number\n    if not any(num % 2 == 0 for num in numbers) or not any(num % 2 != 0 for num in numbers):\n        raise ValueError(\"List must contain at least one even and one odd number.\")\n    \n    # Find the first even and first odd numbers\n    first_even = next(num for num in numbers if num % 2 == 0)\n    first_odd = next(num for num in numbers if num % 2 != 0)\n    \n    # Calculate the difference\n    return first_even - first_odd"}
{"task_id": "Mbpp/596", "solution": "import sys\ndef tuple_size(tup):\n    \"\"\"\n    Calculate the size in bytes of a given tuple.\n    \n    :param tup: Tuple to measure the size of.\n    :return: Size in bytes of the tuple.\n    \"\"\"\n    # Initialize the size to 0\n    size = 0\n    \n    # Iterate over each element in the tuple\n    for elem in tup:\n        # Add the size of each element to the total size\n        size += sys.getsizeof(elem)\n    \n    return size"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    # Merge the two sorted arrays into one sorted array\n    merged = sorted(arr1 + arr2)\n    \n    # Return the kth element from the merged array\n    return merged[k - 1]"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(n):\n    \"\"\"Check if a given number is an Armstrong number.\"\"\"\n    # Convert the number to a string to easily access each digit\n    str_n = str(n)\n    \n    # Calculate the sum of the cubes of its digits\n    sum_of_cubes = sum(int(digit) ** 3 for digit in str_n)\n    \n    # An Armstrong number of three digits is of the form abc where a^3 + b^3 + c^3 = 153\n    # For numbers with more than three digits, the logic extends similarly.\n    # Here we check if the sum of the cubes of its digits equals the number itself\n    \n    return sum_of_cubes == n"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    \"\"\"\n    Calculate the sum and average of the first n natural numbers.\n    \n    Args:\n        n (int): The number of natural numbers to consider.\n        \n    Returns:\n        Tuple: A tuple containing the sum and average of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    \n    # Calculate the average\n    average_n = sum_n / n\n    \n    return sum_n, average_n"}
{"task_id": "Mbpp/600", "solution": "def is_Even(n):\n    \"\"\"\n    Check if the given number is even.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(string):\n    \"\"\"\n    Finds the first repeated character in a given string.\n\n    :param string: The input string.\n    :return: The first repeated character in the string, or None if no repetition is found.\n    \"\"\"\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            return char  # First repeated character found\n        char_count[char] = 1\n\n    return None  # No repeated character found"}
{"task_id": "Mbpp/603", "solution": "def get_lucid_numbers(n):\n    \"\"\"\n    Returns a list of all lucid (prime) numbers less than or equal to a given integer n.\n    \"\"\"\n    def is_lucid(num):\n        \"\"\"Helper function to check if a number is lucid (prime).\"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    lucid_numbers = [i for i in range(2, n + 1) if is_lucid(i)]\n    return lucid_numbers\n\n# Test the function\nassert get_lucid_numbers(10) == [1, 2, 3, 5, 7]"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(text):\n    # Split the text into words\n    words = text.split()\n    \n    # Reverse each word and join them back together with spaces\n    reversed_words = ' '.join(word[::-1] for word in words)\n    \n    return reversed_words"}
{"task_id": "Mbpp/605", "solution": "def is_prime(num):\n    \"\"\"Check if the given integer is a prime number.\"\"\"\n    if num <= 1:\n        return False\n    elif num <= 3:\n        return True\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n# Test the function\nassert is_prime(13) == True"}
{"task_id": "Mbpp/606", "solution": "import math\ndef radian_degree(degrees):\n    \"\"\"\n    Convert degrees to radians.\n    \n    :param degrees: int or float representing degrees\n    :return: float representing radians\n    \"\"\"\n    return degrees * (math.pi / 180)"}
{"task_id": "Mbpp/607", "solution": "import re\ndef find_literals(text, pattern):\n    # Use the re module to search for the regex pattern\n    match = re.search(pattern, text)\n    \n    # If no match is found, return None for all parameters\n    if not match:\n        return None, None, None\n    \n    # Extract the matching substring\n    match_substring = match.group()\n    \n    # Get the start and end indices of the match\n    start_index = match.start()\n    end_index = match.end()\n    \n    return match_substring, start_index, end_index"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    # Create a 2D list to store Bell numbers\n    bell = [[0] * (i + 1) for i in range(n + 1)]\n    \n    # Base case: bell[0][0] = 1\n    bell[0][0] = 1\n    \n    # Fill the table using dynamic programming\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j] + bell[i - 1][j - 1]\n    \n    # The nth Bell number is the sum of the last column\n    return sum(bell[n])"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    if len(lst) < k:\n        raise IndexError(\"List has fewer than k elements\")\n    return lst[:k-1] + lst[k:]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the max element of the nth column.\n    \n    Args:\n    matrix (list): A list of lists representing the matrix.\n    n (int): The index of the column to find the maximum value.\n\n    Returns:\n    int: The maximum value in the nth column.\n    \"\"\"\n    # Ensure the input is valid\n    if not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Matrix must be a list of lists.\")\n    \n    # Ensure the column index is valid\n    if not isinstance(n, int) or n < 0 or n >= len(matrix):\n        raise ValueError(\"Column index must be a non-negative integer less than the number of columns.\")\n    \n    # Extract the nth column\n    column = [row[n] for row in matrix]\n    \n    # Return the maximum value in the column\n    return max(column)"}
{"task_id": "Mbpp/612", "solution": "def merge(sublists):\n    return [[sublist[0] for sublist in sublists] for sublist in sublists]"}
{"task_id": "Mbpp/614", "solution": "def cumulative_sum(tuples):\n    total = 0\n    for tup in tuples:\n        for num in tup:\n            total += num\n    return total\n\n# Test case\nassert cumulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for inner_tuple in tuples:\n        average = sum(inner_tuple) / len(inner_tuple)\n        averages.append(average)\n    return averages"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    \"\"\"\n    Perform element-wise modulo operation on two tuples of the same length.\n    \n    Args:\n        t1, t2: Tuples of the same length.\n        \n    Returns:\n        Tuple with elements being the result of element-wise modulo operation.\n    \"\"\"\n    return tuple(a % b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    \"\"\"\n    Divide each element of list1 by the corresponding element in list2.\n    \n    :param list1: A list of numbers.\n    :param list2: A list of numbers.\n    :return: A new list where each element is the result of dividing the corresponding elements from list1 and list2.\n    \"\"\"\n    return [a / b if b != 0 else float('inf') for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(input_string):\n    # Split the string into words and numbers\n    words_and_numbers = input_string.split()\n    \n    # Initialize an empty list to store the words\n    words = []\n    \n    # Iterate through the split elements\n    for element in words_and_numbers:\n        # If the element is a number, append it to a new list\n        if isinstance(element, int) or isinstance(element, float):\n            numbers.append(element)\n        else:\n            words.append(element)\n    \n    # Join the words back into a string\n    output_string = ' '.join(words)\n    \n    # Append the numbers to the end of the output string\n    output_string += ' ' + ' '.join(numbers)\n    \n    return output_string"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    \"\"\"\n    Finds the size of the largest subset of a list of numbers\n    such that every pair is divisible.\n    \"\"\"\n    # Sort the list to facilitate checking pairs efficiently\n    nums.sort()\n\n    # Initialize the result with the size of the entire list\n    result_size = len(nums)\n\n    # Use a set to keep track of numbers that are part of the largest subset\n    max_subset = set()\n\n    # Iterate through the sorted list\n    for num in nums:\n        # If adding the current number does not break the divisibility condition\n        if all(num % candidate != 0 for candidate in max_subset):\n            max_subset.add(num)\n            # Update the result size\n            result_size = max(result_size, len(max_subset))\n\n    return result_size"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2):\n    # Ensure both lists have the same size by padding the shorter one with zeros\n    max_length = max(len(list1), len(list2))\n    padded_list1 = list1 + [0] * (max_length - len(list1))\n    padded_list2 = list2 + [0] * (max_length - len(list2))\n    \n    # Merge the padded lists into one sorted list\n    merged_list = sorted(padded_list1 + padded_list2)\n    \n    # If the length of the merged list is odd, the median is the middle element\n    if len(merged_list) % 2 == 1:\n        return merged_list[len(merged_list) // 2]\n    \n    # If the length of the merged list is even, the median is the average of the two middle elements\n    else:\n        return (merged_list[len(merged_list) // 2 - 1] + merged_list[len(merged_list) // 2]) / 2"}
{"task_id": "Mbpp/623", "solution": "def nth_power(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n\n    Args:\n    nums (list): A list of numbers.\n    n (int): The power to raise each number in the list to.\n\n    Returns:\n    list: A new list with each number in nums raised to the power of n.\n    \"\"\"\n    return [num ** n for num in nums]\n\n# Test the function\nassert nth_power([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/624", "solution": "def to_uppercase(string):\n    \"\"\"\n    Converts a given string to uppercase.\n    \n    :param string: The input string to convert.\n    :return: The string converted to uppercase.\n    \"\"\"\n    return string.upper()\n\n# Test case\nassert to_uppercase(\"person\") == \"PERSON\""}
{"task_id": "Mbpp/626", "solution": "import math\ndef triangle_area(r):\n    \"\"\"\n    Calculate the area of the largest triangle that can be inscribed in a semicircle with radius r.\n    \"\"\"\n    # The base of the triangle is equal to the diameter of the semicircle, which is 2r.\n    base = 2 * r\n    # The height of the triangle is the radius of the semicircle.\n    height = r\n    # Calculate the area using the formula for the area of a triangle: 1/2 * base * height\n    area = 0.5 * base * height\n    return area"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    return string.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    \"\"\"\n    Returns a list containing only the even numbers from the input list.\n    \"\"\"\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    return even_numbers\n\n# Test the function\nassert find_even_numbers([1, 2, 3, 4, 5]) == [2, 4]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord_tuple):\n    \"\"\"\n    Extract all adjacent coordinates from a given coordinate tuple.\n    \n    Args:\n        coord_tuple (tuple): A tuple of coordinates (x, y).\n        \n    Returns:\n        list: A list of lists, where each inner list represents a pair of adjacent coordinates.\n    \"\"\"\n    x_coords, y_coords = coord_tuple\n    coords = []\n    \n    # Generate coordinates in the x direction\n    for i in range(x_coords, x_coords + y_coords + 1):\n        coords.append([i, y_coords])\n    \n    # Generate coordinates in the y direction\n    for j in range(y_coords, y_coords + x_coords + 1):\n        coords.append([x_coords, j])\n    \n    return coords"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces_and_underscores(text):\n    # Replace spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Replace underscores with spaces\n    text = text.replace('_', ' ')\n    \n    return text\n\n# Test the function\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    \"\"\"\n    Moves all zeroes to the end of the given list.\n    \n    Args:\n    lst (list): The input list.\n    \n    Returns:\n    list: The list with all zeroes moved to the end.\n    \"\"\"\n    # Initialize an empty list to store zeroes\n    zeroes = []\n    \n    # Iterate through the input list\n    for num in lst:\n        # If the number is zero, append it to the zeroes list\n        if num == 0:\n            zeroes.append(num)\n        # Otherwise, append the number to the output list\n        else:\n            lst.append(num)\n    \n    # Concatenate the zeroes list to the end of the output list\n    return lst + zeroes"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(numbers):\n    \"\"\"\n    Calculate the sum of the XOR of all pairs of numbers in the given list.\n    \n    Args:\n        numbers (list): A list of integers.\n        \n    Returns:\n        int: The sum of the XOR of all pairs.\n    \"\"\"\n    n = len(numbers)\n    sum_xor = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            sum_xor += numbers[i] ^ numbers[j]\n    \n    return sum_xor"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(lst):\n    \"\"\"\n    Sorts a list using the heap sort algorithm.\n    \n    Args:\n        lst (list): A list of integers to be sorted.\n        \n    Returns:\n        list: The sorted list.\n    \"\"\"\n    # Base case: if the list has zero or one element, it's already sorted\n    if len(lst) <= 1:\n        return lst\n    \n    # Build a max heap from the input list\n    max_heap = []\n    for i in range(len(lst)):\n        max_heap.append(lst[i])\n        # Ensure the max heap property is maintained\n        heapify(max_heap, i)\n    \n    # Extract elements from the max heap and append them to the sorted list\n    sorted_list = []\n    while max_heap:\n        # Extract the maximum element\n        sorted_list.append(max_heap.pop(0))\n        # Reduce the heap by one level\n        heapify(max_heap, 0)\n    \n    return sorted_list"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(amount_spent, amount_earned):\n    \"\"\"\n    Check if the given amount spent and earned result in neither profit nor loss.\n    \n    Args:\n        amount_spent (int): The amount of money spent.\n        amount_earned (int): The amount of money earned.\n        \n    Returns:\n        bool: True if the amount spent equals the amount earned, False otherwise.\n    \"\"\"\n    return amount_spent == amount_earned"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(velocity, temperature):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n        velocity (float): Wind velocity in km/h.\n        temperature (float): Air temperature in Celsius.\n\n    Returns:\n        int: Wind chill index rounded to the next integer.\n    \"\"\"\n    # Convert temperature from Celsius to Kelvin\n    temp_kelvin = temperature + 273.15\n\n    # Calculate the wind chill index using the formula\n    wc = 13.12 + 0.6215 * temp_kelvin - 11.37 * (velocity ** 0.16) + 0.3965 * temp_kelvin * (velocity ** 0.16)\n\n    # Round to the next integer\n    wc_rounded = round(wc)\n\n    return wc_rounded"}
{"task_id": "Mbpp/639", "solution": "def sum_long_names(names):\n    # Filter out names that start with a lowercase letter\n    filtered_names = [name for name in names if name[0].isupper()]\n\n    # Calculate the sum of lengths of the remaining names\n    total_length = sum(len(name) for name in filtered_names)\n\n    return total_length\n\n# Test the function with the provided example\nassert sum_long_names(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Check if a number is a nonagonal number.\n    \n    A nonagonal number is a figurate number that extends the concept of triangular and square numbers to the nine-sided polygon (nonagon).\n    The nth nonagonal number is given by the formula: n(7n - 5) / 2.\n    \n    Args:\n        n (int): The position of the nonagonal number.\n        \n    Returns:\n        int: The nth nonagonal number.\n    \"\"\"\n    if n <= 0:\n        return 0  # Base case: 0th nonagonal number is 0\n    \n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    \"\"\"\n    Check if a string contains 'z' but not at the start or end of any word.\n    \"\"\"\n    words = text.split()\n    for word in words:\n        if 'z' in word[1:-1]:\n            return True\n    return False"}
{"task_id": "Mbpp/644", "solution": "def reverse_array_up_to_k(arr, k):\n    \"\"\"\n    Reverses an array up to a given position.\n\n    Args:\n        arr (list): The input array.\n        k (int): The position up to which the array should be reversed.\n\n    Returns:\n        list: The reversed array up to the given position.\n    \"\"\"\n    # If the array has fewer elements than the specified position, return the original array\n    if len(arr) < k:\n        return arr\n\n    # Reverse the part of the array from the second element to the given position\n    reversed_part = arr[k:] + arr[:k-1]\n    return reversed_part\n\n# Test the function\nassert reverse_array_up_to_k([1, 2, 3, 4, 5, 6], 4) == [4, 3, 2, 1, 5, 6]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(original_tuple, dictionary):\n    # Convert the dictionary to a tuple using `tuple(dictionary.items())`\n    dict_as_tuple = tuple(dictionary.items())\n    \n    # Concatenate the original tuple and the tuple representation of the dictionary\n    result_tuple = original_tuple + dict_as_tuple\n    \n    return result_tuple"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    N = len(matrix)\n    \n    # Initialize variables to keep track of the maximum average path and its corresponding path\n    max_avg = 0\n    max_path = []\n    \n    # Iterate through all possible paths\n    for i in range(N):\n        for j in range(N):\n            # Initialize current path cost and length\n            current_cost = 0\n            current_length = 0\n            \n            # Explore all right and down moves\n            while j < N:\n                current_cost += matrix[i][j]\n                if j + 1 < N:  # Move down\n                    current_length += 1\n                    j += 1\n                else:  # Move right\n                    current_length += 1\n                    i += 1\n            # Calculate the average for the current path\n            avg = current_cost / current_length if current_length > 0 else 0\n            # Update maximum average path if current path is better\n            if avg > max_avg:\n                max_avg = avg\n                max_path = [matrix[i][j] for row in matrix for j in range(N)]\n    \n    return max_avg, max_path\nmatrix = [[1, 2, 3], [6, 5, 4], [7, 3, 9]]"}
{"task_id": "Mbpp/722", "solution": "def filter_students(data, min_height, min_weight):\n    \"\"\"\n    Filter students from the data dictionary whose height and weight are above the given minimum values.\n    \n    :param data: dict, students' data with names as keys and (height, weight) as values.\n    :param min_height: float, the minimum acceptable height.\n    :param min_weight: float, the minimum acceptable weight.\n    :return: dict, a new dictionary containing only the students who meet the height and weight criteria.\n    \"\"\"\n    filtered_data = {}\n    for student, details in data.items():\n        if details[0] >= min_height and details[1] >= min_weight:\n            filtered_data[student] = details\n    return filtered_data\n\n# Test the function with the provided example\ndata = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}\nmin_height = 6.0\nmin_weight = 70\n\n# Expected output\n# {'Cierra Vega': (6.2, 70)}\n\nassert filter_students(data, min_height, min_weight) == {'Cierra Vega': (6.2, 70)}"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    \"\"\"\n    Count the number of indices where the values in two lists are the same.\n    \n    :param list1: A list of integers.\n    :param list2: A list of integers of the same length as list1.\n    :return: The count of indices where list1[i] == list2[i] for all i in range(len(list1)).\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    # Calculate the base to the power\n    result = 1\n    for _ in range(power):\n        result *= base\n    \n    # Convert the result to a string to easily sum its digits\n    result_str = str(result)\n    \n    # Sum all the digits of the result\n    digit_sum = sum(int(digit) for digit in result_str)\n    \n    return digit_sum"}
{"task_id": "Mbpp/725", "solution": "def extract_quotation(text):\n    \"\"\"\n    Extract values between quotation marks \" \" of the given string.\n\n    Args:\n        text (str): The input string containing quoted values.\n\n    Returns:\n        list: A list containing the values between quotation marks \" \".\n    \"\"\"\n    # Correct approach to handle escaped quotes and varying numbers of quotes\n    import re\n\n    # Use a regular expression to match quoted strings\n    quoted_strings = re.findall(r'\"([^\"]*)\"', text)\n\n    return quoted_strings"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(tup):\n    \"\"\"\n    Function to multiply consecutive elements in a tuple.\n    \n    Args:\n        tup (tuple): A tuple of numbers (t_1, ..., t_{N+1}).\n        \n    Returns:\n        tuple: A tuple of length N where the i-th element is t_i * t_{i+1}.\n    \"\"\"\n    result = []\n    for i in range(len(tup) - 1):\n        result.append(tup[i] * tup[i + 1])\n    return tuple(result)"}
{"task_id": "Mbpp/728", "solution": "def sum_lists(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns a new list where each element is the sum of the corresponding elements from the input lists.\n    \n    :param list1: A list of integers.\n    :param list2: A list of integers.\n    :return: A new list with the sums of corresponding elements from the input lists.\n    \"\"\"\n    return [a + b for a, b in zip(list1, list2)]\n\n# Test the function\nassert sum_lists([10, 20, 30], [15, 25, 35]) == [25, 45, 65]"}
{"task_id": "Mbpp/730", "solution": "def remove_consecutive_duplicates(lst):\n    \"\"\"\n    Remove consecutive duplicates from a given list.\n\n    Args:\n        lst (list): The input list with possible consecutive duplicates.\n\n    Returns:\n        list: The list with consecutive duplicates removed.\n    \"\"\"\n    result = []\n    seen = set()\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result\n\n# Test case\nassert remove_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]"}
{"task_id": "Mbpp/731", "solution": "import math\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cone given the radius r and height h.\n\n    Args:\n        r (float): The radius of the base of the cone.\n        h (float): The height of the cone.\n\n    Returns:\n        float: The lateral surface area of the cone.\n    \"\"\"\n    # Formula for the lateral surface area of a cone: \u03c0 * r * l\n    # where l is the slant height, calculated as \u221a(r^2 + h^2)\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    \n    :param text: The string to be processed.\n    :return: The modified string with spaces, commas, or dots replaced by colons.\n    \"\"\"\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, num):\n    \"\"\"\n    Finds the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        arr (list): A sorted list of integers.\n        num (int): The number to find in the array.\n\n    Returns:\n        int: The index of the first occurrence of the given number in the array, or -1 if the number is not found.\n    \"\"\"\n    try:\n        return arr.index(num)\n    except ValueError:\n        return -1"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(lst):\n    \"\"\"\n    Calculate the sum of products of all possible sublists of a given list.\n\n    Example:\n    >>> sum_Of_Subarray_Prod([1, 2, 3])\n    20\n    \"\"\"\n    n = len(lst)\n    total_sum = 0\n    \n    # Iterate over all possible lengths of sublists (from 1 to n)\n    for i in range(1, n + 1):\n        # Calculate the sum of products for sublists of length i\n        subprod_sum = 1\n        for j in range(i):\n            subprod_sum *= lst[j]\n        total_sum += subprod_sum\n    \n    return total_sum"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Convert the number to a binary string\n    binary_str = bin(n)[2:]\n    \n    # Find the length of the binary string (excluding the '0b' prefix)\n    length = len(binary_str)\n    \n    # If the length is odd, append a '1' to make it even\n    if length % 2 != 0:\n        binary_str += '1'\n    \n    # Convert the binary string back to an integer\n    result = int(binary_str)\n    \n    return result"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, val):\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n\n    Args:\n        arr (list): A sorted list of integers.\n        val (int): The value to insert into the list.\n\n    Returns:\n        int: The index at which the value should be inserted to maintain sort order.\n    \"\"\"\n    # If the value is smaller than the smallest element in the array, it should be inserted at the beginning.\n    if val < arr[0]:\n        return 0\n    \n    # Otherwise, we need to find the correct insertion point.\n    for i in range(1, len(arr)):\n        if arr[i] > val:\n            return i\n    \n    # If the value is equal to the largest element, it can be inserted at the end.\n    return len(arr)"}
{"task_id": "Mbpp/737", "solution": "import re\ndef check_str(str):\n    \"\"\"\n    Check if the given string starts with a vowel using regex.\n    \n    Args:\n    str (str): The string to be checked.\n    \n    Returns:\n    bool: True if the string starts with a vowel, False otherwise.\n    \"\"\"\n    vowels = 'aeiou'\n    pattern = '^' + re.escape(vowels)\n    return re.match(pattern, str) is not None"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    # Initialize the smallest triangular number with n digits\n    triangular_number = 1\n    \n    # Loop to find the smallest triangular number with n digits\n    while len(str(triangular_number)) < n:\n        triangular_number += 1\n    \n    # Return the index of this triangular number\n    return triangular_number - 1"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    result = {}\n    for i in range(len(tup) - 1):\n        result[tup[i]] = tup[i + 1]\n    return result"}
{"task_id": "Mbpp/741", "solution": "def all_characters_same(string):\n    \"\"\"\n    Check if all characters in the string are the same.\n\n    Args:\n        string (str): The input string to check.\n\n    Returns:\n        bool: True if all characters in the string are the same, False otherwise.\n    \"\"\"\n    # Check if the string is empty\n    if not string:\n        return True  # An empty string is considered to have all the same characters\n\n    # Convert the string to a list to easily iterate over characters\n    char_list = list(string)\n\n    # Check if the length of the list is 1 (meaning all characters are the same)\n    return len(char_list) == 1\n\n# Test cases"}
{"task_id": "Mbpp/742", "solution": "import math\ndef area_tetrahedron(side_length):\n    \"\"\"\n    Calculate the area of a regular tetrahedron given the side length.\n\n    Args:\n        side_length (float): The length of a side of the tetrahedron.\n\n    Returns:\n        float: The area of the tetrahedron.\n    \"\"\"\n    # Correct formula for the area of a regular tetrahedron: (sqrt(2) / 12) * side_length ** 2\n    area = (math.sqrt(2) / 12) * math.pow(side_length, 2)\n    return area"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, k):\n    \"\"\"\n    Rotate a given list to the right by k positions.\n    \n    Args:\n        lst (list): The list to be rotated.\n        k (int): The number of positions to rotate to the right.\n        \n    Returns:\n        list: The rotated list.\n    \"\"\"\n    # Calculate the length of the list\n    n = len(lst)\n    \n    # If k is greater than the length of the list, rotate to the left\n    if k > n:\n        k = k % n\n    \n    # Rotate the list to the right\n    return lst[-k:] + lst[:-k]\nk = 3"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    \"\"\"\n    Check if the given tuple contains any None value.\n    \n    Args:\n        tup (tuple): A tuple containing values.\n        \n    Returns:\n        bool: True if the tuple contains None, False otherwise.\n    \"\"\"\n    for value in tup:\n        if value is None:\n            return True\n    return False"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(n):\n        # Convert number to string to iterate over its digits\n        str_n = str(n)\n        # Check if the number is divisible by each digit it contains\n        for digit in str_n:\n            if n % int(digit) != 0:\n                return False\n        return True\n\n    result = [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]\n    return result"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(text):\n    # Split the text into words\n    words = text.split()\n    \n    # Iterate over each word\n    for i, word in enumerate(words):\n        # If the word starts with a capital letter\n        if word[0].isupper():\n            # Insert a space before it\n            words.insert(i, ' ')\n    \n    # Join the words back into a string\n    return ' '.join(words)"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(string_list):\n    # Filter out non-numeric strings\n    numeric_strings = [s for s in string_list if any(char.isdigit() for char in s)]\n    \n    # Convert numeric strings to integers for proper sorting\n    numeric_strings = [int(s) for s in numeric_strings]\n    \n    # Sort the numeric strings numerically\n    numeric_strings.sort()\n    \n    # Convert sorted integers back to strings\n    sorted_numeric_strings = [str(num) for num in numeric_strings]\n    \n    return sorted_numeric_strings"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    \"\"\"\n    Adds a tuple to a list.\n    \n    Args:\n        lst (list): The original list.\n        tup (tuple): The tuple to be added.\n        \n    Returns:\n        list: The updated list with the tuple appended.\n    \"\"\"\n    lst.extend(tup)\n    return lst"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(n // 2, -1, -1):\n        if arr[i] < arr[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n + 1):\n            a, b = b, 2 * b % 1\n        return b"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    # Sort the records by the second element (score) in ascending order\n    sorted_records = sorted(records, key=lambda x: x[1])\n    \n    # Return the first k records after sorting\n    return sorted_records[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_common_index_list(l1, l2, l3):\n    common_indices = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_indices.append(i)\n    return common_indices\n\n# Test cases\nassert extract_common_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])== [1, 7]\nassert extract_common_index_list([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == []\nassert extract_common_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) == []\nassert extract_common_index_list([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]) == []"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    # Remove duplicates and sort the list\n    unique_sorted = sorted(set(numbers))\n    \n    # If the list has only one element, return None\n    if len(unique_sorted) == 1:\n        return None\n    \n    # Return the second element in the sorted list\n    return unique_sorted[1]"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    count = 0\n    for i in range(len(string_list)):\n        reversed_string = string_list[i][::-1]\n        if string_list[i] == reversed_string:\n            count += 1\n    return count"}
{"task_id": "Mbpp/758", "solution": "def count_lists(sublists):\n    # Convert each sublist to a tuple\n    tuple_list = [(sublist, sublist.count(sublist)) for sublist in sublists]\n    \n    # Create a dictionary where keys are tuples of sublists and values are their counts\n    result = {}\n    for sublist_tuple, count in tuple_list:\n        if sublist_tuple in result:\n            result[sublist_tuple] += count\n        else:\n            result[sublist_tuple] = count\n    \n    return result\n\n# Test the function with the provided example\nassert count_lists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(string):\n    \"\"\"\n    Check if a given string represents a decimal number with a precision of 2.\n\n    Args:\n        string (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string represents a decimal number with a precision of 2, False otherwise.\n    \"\"\"\n    # Check if the string can be converted to a float\n    try:\n        float_value = float(string)\n        # Check if the number has exactly 2 decimal places\n        return len(str(float_value).split('.')[1]) == 2\n    except ValueError:\n        # If the string cannot be converted to a float, it's not a decimal number\n        return False"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(lst):\n    \"\"\"\n    Check if a list contains only one distinct element.\n    \n    Args:\n        lst (list): A list of numbers.\n        \n    Returns:\n        bool: True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_elements = set(lst)\n    \n    # Check if the length of the set is 1 (which means all elements are the same)\n    return len(unique_elements) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    \"\"\"\n    Check if the given month number contains 30 days.\n    \n    Args:\n        month (int): The number representing the month (1-12).\n        \n    Returns:\n        bool: True if the month has 30 days, False otherwise.\n    \"\"\"\n    # Define the months with 30 days\n    thirty_days_months = [4, 6, 9, 11]\n    \n    # Check if the given month is in the list of thirty days months\n    return month in thirty_days_months"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr):\n    # Initialize minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Iterate through the array to find the minimum difference\n    for i in range(1, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def count_digits(number_str):\n    \"\"\"\n    Function to count the number of digits in a given string.\n\n    Args:\n        number_str (str): The input string.\n\n    Returns:\n        int: The count of digits in the input string.\n    \"\"\"\n    return len(number_str)  # This works because the length of a string is the count of its characters.\n\n# Test the function\nassert count_digits('program2bedone') == 1"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    \"\"\"\n    Determines if a number is polite.\n    A number is polite if it can be expressed as the sum of two or more consecutive integers.\n    \"\"\"\n    # Initialize the count of polite numbers found\n    count = 0\n    # Start from 1 and iterate upwards\n    for i in range(1, n + 1):\n        # Check if the current number can be expressed as the sum of two or more consecutive integers\n        if i == n or (i - 1) % 2 == 0 and i - 2 * count >= 1:\n            count += 1\n    # Return True if the count of polite numbers found is greater than or equal to n\n    return count >= n"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    pairs = []\n    for i in range(len(lst) - 1):\n        pairs.append((lst[i], lst[i + 1]))\n    return pairs"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, sum):\n    count = 0\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == sum:\n                count += 1\n    return count"}
{"task_id": "Mbpp/769", "solution": "def list_difference(list1, list2):\n    \"\"\"\n    Returns the difference between two lists.\n    \n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n        \n    Returns:\n        list: A list containing the elements that are in list1 but not in list2.\n    \"\"\"\n    return [item for item in list1 if item not in list2]\n\n# Test the function\nassert list_difference([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 20, 30, 15]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    \"\"\"\n    Calculate the sum of the fourth power of the first n odd natural numbers.\n\n    :param n: int, the number of terms to sum\n    :return: int, the sum of the fourth power of the first n odd natural numbers\n    \"\"\"\n    total_sum = 0\n    for i in range(1, n + 1, 2):  # Iterate over odd numbers\n        total_sum += i ** 4\n    return total_sum"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expr):\n    \"\"\"\n    Check if the given expression is balanced.\n    \n    Args:\n        expr (str): The expression as a string.\n        \n    Returns:\n        bool: True if the expression is balanced, False otherwise.\n    \"\"\"\n    stack = []\n    opening_braces = {'{': 1, '[': 1}\n    closing_braces = {'}': -1, ']': -1}\n    \n    for char in expr:\n        if char in opening_braces:\n            stack.append(opening_braces[char])\n        elif char in closing_braces:\n            if stack and stack[-1] == closing_braces[char]:\n                stack.pop()\n            else:\n                return False\n        else:\n            stack.append(char)\n    \n    return len(stack) == 0"}
{"task_id": "Mbpp/772", "solution": "def remove_length(text, k):\n    # Split the text into words\n    words = text.split()\n    \n    # Create a new list to store the words to keep\n    kept_words = []\n    \n    # Iterate through each word\n    for word in words:\n        # Check if the word's length is not equal to k\n        if len(word) != k:\n            kept_words.append(word)\n    \n    # Join the kept words back into a string\n    result = ' '.join(kept_words)\n    \n    return result"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(main_string, substring):\n    \"\"\"\n    Finds the occurrence and position of the substrings within a string.\n    \n    Parameters:\n    main_string (str): The main string in which to search for substrings.\n    substring (str): The substring to search for within the main string.\n\n    Returns:\n    tuple: A tuple containing the occurrence of the substring (as a string) and its starting position (as an integer).\n    None if there is no match.\n    \"\"\"\n    # Convert both strings to lowercase for case-insensitive matching\n    main_string_lower = main_string.lower()\n    substring_lower = substring.lower()\n\n    # Initialize variables\n    occurance = 0\n    position = 0\n\n    # Iterate over the main string\n    for i in range(len(main_string_lower)):\n        # Check if the substring starts at the current position\n        if main_string_lower[i: i + len(substring_lower)] == substring_lower:\n            occurance = i + 1  # Position is 1-indexed\n            break\n\n    # Return the result as a tuple\n    return (occurance, position)"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    \"\"\"\n    Check if every odd index in the list contains an odd number of occurrences.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        bool: True if every odd index contains an odd number of occurrences; False otherwise.\n    \"\"\"\n    # Initialize a counter for odd numbers at odd indices\n    odd_count = 0\n\n    # Iterate over the list starting from index 1 (first odd index)\n    for i in range(1, len(lst), 2):\n        # Check if the element at the odd index is odd\n        if lst[i] % 2 != 0:\n            # Increment the counter if the number is odd\n            odd_count += 1\n\n    # Return whether the counter is odd (which means there was at least one odd number at an odd index)\n    return odd_count % 2 != 0"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    # Create an empty set to store unique elements\n    unique_elements = set()\n    \n    # Iterate through the list\n    for element in lst:\n        # If the element is not in the set, add it\n        if element not in unique_elements:\n            unique_elements.add(element)\n    \n    # Return the sum of unique elements\n    return sum(unique_elements)"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    result = []\n    seen = set()\n    packed = []\n    \n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            packed.append([item])\n        else:\n            seen.discard(item)\n            if packed:\n                packed[-1].append(item)\n    \n    return result"}
{"task_id": "Mbpp/780", "solution": "from itertools import combinations\ndef find_combinations(tuples):\n    # Generate all possible combinations of the tuples\n    all_combinations = list(combinations(tuples, 2))\n    \n    # Calculate the sum of each combination\n    sums = [(a + b, b) for a, b in all_combinations]\n    \n    return sums\ntuples = [(2, 4), (6, 7), (5, 1), (6, 10)]"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    \"\"\"Return the count of divisors of the given number n.\"\"\"\n    divisors = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors += 1\n            if i != n // i:\n                divisors += 1\n    return divisors"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    \"\"\"\n    Function to find the sum of all subarrays of odd length.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        int: The sum of all subarrays of odd length.\n\n    Example:\n        >>> odd_length_sum([1, 2, 4])\n        14\n    \"\"\"\n    n = len(arr)\n    total_sum = 0\n\n    # Iterate over all possible starting indices for subarrays\n    for i in range(n):\n        # Calculate the length of the current subarray\n        subarray_length = i + 1\n\n        # Check if the subarray length is odd\n        if subarray_length % 2 != 0:\n            # Calculate the sum of the current subarray\n            subarray_sum = sum(arr[i:i+subarray_length])\n            total_sum += subarray_sum\n\n    return total_sum"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(numbers):\n    \"\"\"\n    Function to find the product of the first even and odd number in a given list.\n    \n    Args:\n    numbers (list): A list of integers.\n    \n    Returns:\n    int: The product of the first even and odd numbers in the list.\n    \"\"\"\n    if not numbers:\n        return None\n    \n    first_even = next((num for num in numbers if num % 2 == 0), None)\n    first_odd = next((num for num in numbers if num % 2 != 0), None)\n    \n    if first_even is None or first_odd is None:\n        return None\n    \n    return first_even * first_odd"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    # Split the string by comma to get individual elements\n    elements = tuple_str.split(',')\n    \n    # Convert each element to an integer\n    int_elements = [int(element) for element in elements]\n    \n    # Return the integer tuple\n    return int_elements"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, val):\n    \"\"\"\n    Function to find the right insertion point for a specified value in sorted order.\n    \n    Parameters:\n    arr (list): The sorted list.\n    val (int): The value to insert.\n    \n    Returns:\n    int: The index at which the value should be inserted to maintain sorted order.\n    \"\"\"\n    # If the value is greater than the last element in the list, insert it at the end\n    if val > arr[-1]:\n        return len(arr)\n    \n    # Otherwise, find the correct position before the last element\n    for i in range(len(arr) - 1, 0, -1):\n        if val < arr[i]:\n            return i\n    \n    # If the value is less than all elements, it should be inserted at the beginning\n    return 0"}
{"task_id": "Mbpp/787", "solution": "def text_match_three(text):\n    \"\"\"\n    Check if a string contains 'abbb' starting from the first 'a'.\n    \"\"\"\n    return 'abbb' in text"}
{"task_id": "Mbpp/788", "solution": "def create_new_tuple(string, list_elements):\n    return string + ', '.join(list_elements)\n\n# Test case\nassert create_new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    \"\"\"\n    Check if every even index in the list contains an even number.\n    \n    Args:\n        lst (list): A list of integers.\n        \n    Returns:\n        bool: True if every even index contains an even number, False otherwise.\n    \"\"\"\n    # Iterate over the list and check the condition for even indices\n    for i in range(0, len(lst), 2):  # Step 2 to only consider even indices\n        if lst[i] % 2 != 0:  # Check if the number at the even index is odd\n            return False\n    \n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(tup):\n    \"\"\"Remove nested tuples from a given tuple.\"\"\"\n    result = []\n    for item in tup:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/792", "solution": "def count_list(lst):\n    \"\"\"\n    Count the number of lists in a given list of lists.\n    \n    :param lst: A list containing nested lists.\n    :return: The count of lists in the provided list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/793", "solution": "def last_position(arr, element):\n    \"\"\"\n    Finds the last position of an element in a sorted array.\n\n    Args:\n        arr (list): A sorted list of integers.\n        element (int): The element to find in the array.\n\n    Returns:\n        int: The last position of the element in the array, or -1 if the element is not found.\n    \"\"\"\n    try:\n        pos = arr.rfind(element)\n        if pos != -1:\n            return pos\n        else:\n            return -1\n    except ValueError:\n        return -1\n\n# Test cases\nassert last_position([1, 2, 3], 1) == 0\nassert last_position([1, 2, 3], 4) == -1\nassert last_position([1, 2, 3, 4, 5], 3) == 3\nassert last_position([1, 2, 3, 4, 5], 6) == -1"}
{"task_id": "Mbpp/794", "solution": "import re\ndef text_starta_endb(text):\n    \"\"\"\n    Check if a string ends with 'a' followed by anything and ends in 'b'.\n    :param text: str\n    :return: bool\n    \"\"\"\n    return re.search(r'a.*?b$', text) is not None"}
{"task_id": "Mbpp/796", "solution": "def sum_of_dictionary_items(dictionary):\n    return sum(dictionary.values())\n\n# Test case\nassert sum_of_dictionary_items({'a': 100, 'b':200, 'c':300}) == 600"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    \"\"\"\n    Calculate the sum of all odd natural numbers within the range l and r.\n    \n    :param l: The lower limit of the range.\n    :param r: The upper limit of the range.\n    :return: The sum of all odd natural numbers in the range [l, r].\n    \"\"\"\n    sum = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            sum += num\n    return sum"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    \"\"\"Return the sum of elements in the array.\"\"\"\n    return sum(arr)"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(num, d):\n    \"\"\"\n    Rotate left bits by d bits a given number.\n\n    Args:\n        num (int): The number to be rotated.\n        d (int): The number of bits to rotate.\n\n    Returns:\n        int: The number after rotating left by d bits.\n    \"\"\"\n    # Ensure that the number of bits to rotate (d) is within the range of 0 to 32\n    if d < 0 or d > 32:\n        raise ValueError(\"d must be an integer between 0 and 32 inclusive.\")\n\n    # Convert the number to a string to manipulate individual bits\n    num_str = str(num)\n\n    # Pad the number with leading zeros to make it 32 bits long\n    padded_num_str = '0' * (32 - len(num_str)) + num_str\n\n    # Rotate the bits left by d positions\n    rotated_str = padded_num_str[-d:] + padded_num_str[:-d]\n\n    # Convert the rotated string back to an integer\n    rotated_num = int(rotated_str)\n\n    return rotated_num"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(input_string):\n    return input_string.replace(' ', '')"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    # Create a set to store unique values\n    result = set([a, b, c])\n    # Check if the set contains exactly three unique values\n    if len(result) == 3:\n        # If three unique values are found, return 0 (indicating three equal numbers)\n        return 0\n    else:\n        # If not three unique values, return the count of duplicates\n        return 4 - len(result)"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square(n):\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    if n < 0:\n        return False\n    root = int(n ** 0.5)\n    return root * root == n"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    \"\"\"\n    Check if the product of numbers in a list is even.\n    \n    Args:\n        numbers (list): A list of integers.\n        \n    Returns:\n        bool: True if the product is even, False otherwise.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    \n    return product % 2 == 0"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n    \n    Example:\n    >>> max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])\n    [10, 11, 12]\n    \"\"\"\n    max_sum = 0\n    max_list = []\n    \n    for sub_list in lst:\n        sub_sum = sum(sub_list)\n        if sub_sum > max_sum:\n            max_sum = sub_sum\n            max_list = [elem for elem in sub_list if elem > 0]  # Keep only positive numbers for the max sum\n        elif sub_sum == max_sum:\n            max_list.append(sub_list)\n    \n    return max_list"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    \"\"\"\n    Finds the maximum run of uppercase characters in the given string.\n    \n    :param s: str, the input string\n    :return: int, the length of the maximum run of uppercase characters\n    \"\"\"\n    max_count = 0\n    current_count = 0\n    \n    for char in s:\n        if char.isupper():\n            current_count += 1\n            max_count = max(max_count, current_count)\n        else:\n            current_count = 0\n    \n    return max_count"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    \"\"\"\n    Finds the first odd number in a given list of numbers.\n    \n    :param numbers: A list of numbers.\n    :return: The first odd number in the list, or None if there are no odd numbers.\n    \"\"\"\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None"}
{"task_id": "Mbpp/808", "solution": "def check_K(tuples, k):\n    \"\"\"\n    Check if the given tuples contain the k or not.\n\n    Args:\n        tuples (list/tuple): A list or tuple of tuples.\n        k (int): The value to check for in the tuples.\n\n    Returns:\n        bool: True if the tuple contains k, False otherwise.\n    \"\"\"\n    for tup in tuples:\n        if k in tup:\n            return True\n    return False"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(t1, t2):\n    \"\"\"\n    Check if each element of the second tuple is smaller than its corresponding element in the first tuple.\n    :param t1: First tuple\n    :param t2: Second tuple\n    :return: Boolean indicating if all elements in t2 are smaller than their corresponding elements in t1\n    \"\"\"\n    return all(el1 < el2 for el1, el2 in zip(t1, t2))"}
