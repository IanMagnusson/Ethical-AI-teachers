{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    # Convert lists to sets to remove duplicates and for efficient intersection\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Use the intersection method to find common elements\n    shared_elements = set1.intersection(set2)\n    \n    return shared_elements"}
{"task_id": "Mbpp/3", "solution": "import math"}
{"task_id": "Mbpp/4", "solution": "import heapq"}
{"task_id": "Mbpp/6", "solution": "def check_variables(variables, target):\n    \"\"\"\n    Check if any of the provided variables match the target value.\n    \n    Parameters:\n    variables (list/tuple): A list or tuple of variables to check.\n    target (int/str): The value to compare against.\n\n    Returns:\n    str: A string representing the result of the comparison.\n    \"\"\"\n    result = \"\"\n    for var in variables:\n        if var == target:\n            result = 'Y'\n            break\n    return result\n\n# Testing the function with the provided examples\n\n# Example 1: Checking if any of x, y, or z equals 0\nx = 5\ny = 1\nz = 0"}
{"task_id": "Mbpp/7", "solution": "import re"}
{"task_id": "Mbpp/8", "solution": "def square_nums(lst):\n    \"\"\"\n    Function to find squares of individual elements in a list.\n    \n    Args:\n        lst (list): A list of integers.\n        \n    Returns:\n        list: A new list containing the squares of the elements in the input list.\n    \"\"\"\n    return [x ** 2 for x in lst]"}
{"task_id": "Mbpp/9", "solution": "def min_rotations_to_same_string(s):\n    # Step 1: Initialize result = 0\n    result = 0\n    \n    # Step 2: Create a temporary string by concatenating the original string with itself\n    temp_str = s + s\n    \n    # Step 3: Iterate over the characters in the temporary string\n    for i in range(len(temp_str)):\n        # Step 4: Take a substring starting from index i+1\n        substring = temp_str[i+1:]\n        \n        # Step 5: Increase the count if the substring is equal to the original string\n        if substring == s:\n            result += 1\n            break  # If a match is found, break the loop\n        \n    return result\n\n# Test cases"}
{"task_id": "Mbpp/11", "solution": "def remove_last_occurrence(s, c):\n    # Initialize the start and end pointers\n    start = 0\n    end = len(s) - 1\n\n    # Traverse the string from both ends\n    while start < end:\n        # If characters match, move the start pointer\n        if s[start] == c:\n            start += 1\n\n        # If characters don't match, move the end pointer\n        elif s[end] == c:\n            end -= 1\n\n        # If neither pointer moved, the character was found and removed\n        else:\n            break\n\n    # Return the modified string\n    return s[start:end+1]\n\n# Test cases"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n    \n    # Sort the matrix based on the row sums in ascending order\n    sorted_matrix = sorted(matrix, key=sum)\n    \n    return sorted_matrix"}
{"task_id": "Mbpp/14", "solution": "def find_volume_of_triangular_prism(l, b, h):\n    \"\"\"\n    Calculate the volume of a triangular prism given the length (l) of the base, \n    the width (b) of the base, and the height (h) of the prism.\n    \"\"\"\n    # Volume formula for a triangular prism: (1/2) * l * b * h\n    volume = (l * b * h) / 2\n    return volume\n\n# Test cases\ntest_cases = [\n    (18, 12, 9, 972),\n    (10, 8, 6, 240),\n    (5, 7, 8, 17.320508),\n    (3, 4, 5, 6.000000)\n]\n\n# Iterate through test cases and print results\nfor l, b, h, expected in test_cases:\n    volume = find_volume_of_triangular_prism(l, b, h)\n    print(f\"Volume of triangular prism: {volume} (Expected: {expected})\")"}
{"task_id": "Mbpp/16", "solution": "import re"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    \"\"\"\n    Returns the perimeter of a square given its side length.\n    \n    Args:\n        side_length (int): The length of a side of the square.\n        \n    Returns:\n        int: The perimeter of the square.\n    \"\"\"\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(first_string, second_string):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n    \n    Args:\n        first_string (str): The first string from which characters are to be removed.\n        second_string (str): The string containing characters to be removed from the first string.\n        \n    Returns:\n        str: The first string with characters from the second string removed.\n    \"\"\"\n    result = \"\"\n    for char in first_string:\n        if char not in second_string:\n            result += char\n    return result"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(array_nums):\n    nums_set = set(array_nums)\n    return len(array_nums) != len(nums_set)"}
{"task_id": "Mbpp/20", "solution": "def is_woodall_number(n):\n    # If the number is even, it cannot be a Woodall number\n    if n % 2 == 0:\n        return False\n    \n    # Base case: 1 is a Woodall number\n    if n == 1:\n        return True\n    \n    # Add 1 to make the number odd and check recursively\n    n += 1\n    p = 0\n    while n % 2 == 0:\n        n //= 2\n        p += 1\n    \n    # If the count of divisions equals the number, it's a Woodall number\n    return p == n\n\n# Example tests"}
{"task_id": "Mbpp/56", "solution": "def check(num):\n    # Calculate the reverse of the number\n    reverse = int(str(num)[::-1])\n    \n    # Calculate twice the reverse\n    twice_reverse = 2 * reverse\n    \n    # Check if the given number is one less than twice its reverse\n    if num == twice_reverse - 1:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/57", "solution": "def maxNumber(inputNumber):\n    # Convert the number to a string to easily manipulate its digits\n    digits = list(str(inputNumber))\n    \n    # Sort the digits in descending order to form the largest number\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Reconstruct the largest number from sorted digits\n    largest_number = int(''.join(sorted_digits))\n    \n    return largest_number\n\n# Test cases to validate the function"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(num1, num2):\n    \"\"\"\n    Check if two integers have opposite signs.\n    \n    Args:\n        num1 (int): The first integer.\n        num2 (int): The second integer.\n        \n    Returns:\n        bool: True if num1 and num2 have opposite signs, False otherwise.\n    \"\"\"\n    return num1 * num2 < 0"}
{"task_id": "Mbpp/59", "solution": "def octagonal_number(n):\n    \"\"\"\n    Calculate the nth octagonal number using the formula (3n(3n - 1)) / 2.\n    \"\"\"\n    return (3 * n * (3 * n - 1)) // 2\n\n# Test cases to validate the function\ntest_cases = [\n    (5, 65),\n    (10, 280),\n    (15, 645)\n]\n\nfor n, expected in test_cases:\n    result = octagonal_number(n)\n    print(f\"Input {n} should output {expected} but got {result}\")\n    assert result == expected, f\"Expected {expected} but got {result}\"\n    print(f\"PASS for input {n}\")"}
{"task_id": "Mbpp/61", "solution": "def count_substrings_with_sum_equal_to_length(s):\n    # Convert the string to a list of characters for easier manipulation\n    s_list = list(s)\n    \n    # Initialize a counter for valid substrings\n    count = 0\n    \n    # Iterate over all possible starting indices of substrings\n    for i in range(len(s_list)):\n        # Calculate the sum of the digits of the current substring\n        sum_of_digits = sum(int(digit) for digit in s_list[i:i + len(s_list) - i])\n        \n        # Check if the sum of digits equals the length of the substring\n        if sum_of_digits == len(s_list[i:i + len(s_list) - i]):\n            count += 1\n    \n    return count\n\n# Test cases based on the problem description\ntest_cases = [\n    (\"112112\", 6),  # Matches the first snippet\n    (4, 9, 9),      # Matches the second snippet\n    [4, 6, 7, 8, 9],  # Matches the third snippet\n    (\"8642\", 2)      # Matches the fourth snippet\n]\n\n# Iterate through the test cases and print results\nfor case in test_cases:\n    print(f\"Input: {case[0]} | Expected: {case[1]} | Actual: {count_substrings_with_sum_equal_to_length(case[0])}\")"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(lst):\n    \"\"\"\n    Finds the smallest number in a given list.\n    \n    Args:\n    lst (list): A list of numbers.\n    \n    Returns:\n    int: The smallest number in the list.\n    \"\"\"\n    return min(lst)"}
{"task_id": "Mbpp/63", "solution": "def max_tuple_difference(test_list1, test_list2):\n    \"\"\"\n    This function calculates the maximum difference between corresponding elements of two lists (tuples).\n    :param test_list1: A list of tuples.\n    :param test_list2: Another list of tuples.\n    :return: The maximum difference between corresponding elements.\n    \"\"\"\n    # Ensure both lists have the same length\n    if len(test_list1) != len(test_list2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    # Initialize the maximum difference to a very small number\n    max_diff = float('-inf')\n\n    # Iterate over the tuples in both lists\n    for i in range(len(test_list1)):\n        # Calculate the absolute difference\n        diff = abs(test_list1[i][0] - test_list2[i][0])\n        # Update the maximum difference if the current one is larger\n        max_diff = max(max_diff, diff)\n\n    return max_diff\n\n# Test cases\ntest_list1 = [(3, 4), (2, 1), (7, 9)]\ntest_list2 = [6, 2, 8]"}
{"task_id": "Mbpp/64", "solution": "subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    \"\"\"\n    Function to flatten a list and sum all of its elements recursively.\n    \"\"\"\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \n    :param numbers: List of numbers\n    :return: Count of positive numbers in the list\n    \"\"\"\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/67", "solution": "import math"}
{"task_id": "Mbpp/68", "solution": "def is_monotonic(lst):\n    if not lst:\n        return True, 0, False  # An empty list is considered monotonic\n\n    up = down = True\n    monotonic = True\n    strict = False\n\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            up = False\n        elif lst[i] > lst[i-1]:\n            down = False\n        else:\n            strict = False\n\n        if not (up or down):\n            monotonic = False\n            break\n\n    return monotonic, len(lst) - up, strict\n\n# Test cases\ntest_cases = [\n    (\"[0, 1, 2, 3, 3, 4]\", (True, 5, False)),\n    (\"[4, 2, 3, 4, 5, 6, 7, 8, 7]\", (False, 7, True)),\n    (\"[11, 22, 33]\", (True, 3, False)),\n    (\"[20, 15, 10]\", (True, 3, False))\n]\n\nfor test in test_cases:\n    result = is_monotonic(test[0])\n    print(f\"Input: {test[0]}\")\n    print(f\"Output: Monotonicity {result[0]}, Strict {result[1]}, Up/Down {result[2]}\")"}
{"task_id": "Mbpp/69", "solution": "def sublist(lst1, lst2):\n    # Convert lists to sets to remove duplicates and then compare\n    return set(lst1).issubset(set(lst2))\n\n# Test cases"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    # Check if all tuples have the same length\n    common_length = len(tuples[0])\n    for tup in tuples:\n        if len(tup) != common_length:\n            return False\n    return True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    \"\"\"\n    Sorts a list of elements in ascending order.\n    \n    Args:\n        lst (list): A list of elements to be sorted.\n        \n    Returns:\n        list: The sorted list.\n    \"\"\"\n    return sorted(lst)"}
{"task_id": "Mbpp/72", "solution": "def can_be_sum_of_two_consecutive_squares(n):\n    # Check if n can be represented as the sum of two consecutive squares\n    # The formula to check: n = a^2 + (a+1)^2\n    # Rearranging: n = a^2 + a^2 + 2a + 1 = 2a^2 + 2a + 1\n    # We need to check if 2a^2 + 2a + 1 is divisible by 4\n\n    # If n is odd, it cannot be represented as the sum of two consecutive squares\n    if n % 2 != 0:\n        return False\n\n    # Check if n - 1 is divisible by 4\n    return (n - 1) % 4 == 0\n\n# Test cases\ntest_cases = [\n    {\"N\": 5, \"output\": \"Yes\", \"explanation\": \"5 = 2^2 + 3^2\"},\n    {\"N\": 19, \"output\": \"Yes\", \"explanation\": \"19 = 3^2 + 4^2\"},\n    {\"N\": 10, \"output\": \"No\", \"explanation\": \"10 cannot be represented as sum of squares\"},\n    {\"N\": 144, \"output\": \"Yes\", \"explanation\": \"144 = 12^2 + 0^2\"},\n    {\"N\": 25, \"output\": \"No\", \"explanation\": \"25 cannot be represented as product of squares\"},\n    {\"N\": 9, \"output\": \"Yes\", \"explanation\": \"9 = 3^2 + 0^2 + 0^2 + 0^2\"},\n    {\"N\": 7, \"K\": 2, \"output\": \"Yes\", \"explanation\": \"7 + 2 = 9 (perfect square)\"},\n    {\"N\": 5, \"K\": 3, \"output\": \"No\", \"explanation\": \"5 + 3 = 8 (not a perfect square)\"}]\n    \nfor case in test_cases:\n    result = can_be_sum_of_two_consecutive_squares(case[\"N\"])\n    print(f\"Input: {case['N']} Output: {result} Explanation: {case['explanation']}\")"}
{"task_id": "Mbpp/74", "solution": "def is_samePatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n\n    sdict = {}\n    pset = set()\n    sset = set()\n\n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n\n    for key in pset:\n        if key not in sdict:\n            sdict[key] = []\n        sdict[key].append(colors[i])\n\n    for values in sdict.values():\n        if len(values) != len(values[0]):\n            return False\n        for i in range(len(values) - 1):\n            if values[i] != values[i + 1]:\n                return False\n\n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    \"\"\"\n    Finds tuples in the list where all elements are divisible by k.\n    \n    Args:\n    tuples_list (list): A list of tuples.\n    k (int): The divisor to check for divisibility.\n    \n    Returns:\n    list: A list of tuples where all elements are divisible by k.\n    \"\"\"\n    result = []\n    for tup in tuples_list:\n        if all(el % k == 0 for el in tup):\n            result.append(tup)\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_Diff(n):\n    \"\"\"\n    Check if a number is divisible by 11.\n    \"\"\"\n    return n % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    Check if the length of the word is odd.\n    \n    Args:\n        word (str): The word to check.\n        \n    Returns:\n        bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n    \n    :param n: int, the position of the tetrahedral number\n    :return: int, the nth tetrahedral number\n    \"\"\"\n    # Formula for the nth tetrahedral number: T(n) = n*(n+1)*(n+2)/6\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n\n    :param radius: float, the radius of the sphere\n    :return: float, the volume of the sphere\n    \"\"\"\n    return (4/3) * math.pi * radius**3"}
{"task_id": "Mbpp/84", "solution": "def newman_conway_sequence(n):\n    # Base cases\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n\n    # Recursive function to compute P(n)\n    def P(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 1\n        else:\n            return P(n - 1) + P(n - P(n - 1))\n\n    # Compute -P(n) to get the nth term of the sequence\n    return -P(n)\n\n# Test the function with the next two terms and the 105th term\nnext_two_terms = newman_conway_sequence(6)  # 6th term is 15, next is 16"}
{"task_id": "Mbpp/85", "solution": "import math\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n    \n    Args:\n        radius (float): The radius of the sphere.\n        \n    Returns:\n        float: The surface area of the sphere.\n    \"\"\"\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "solution": "def is_centered_hexagonal_number(n):\n    \"\"\"\n    Check if a given number N is a Centered Hexagonal Number.\n    \n    A centered hexagonal number is given by the formula:\n    3 * n * (n - 1) + 1\n    where n is a non-negative integer.\n    \n    Args:\n        n (int): The number to check if it's a centered hexagonal number.\n        \n    Returns:\n        str: \"Yes\" if n is a centered hexagonal number, else \"No\".\n    \"\"\"\n    if n < 0:\n        return \"No\"\n    \n    # Calculate the centered hexagonal number using the formula\n    centered_hexagonal_number = 3 * n * (n - 1) + 1\n    \n    # Check if the calculated number matches the input\n    return f\"Yes\" if centered_hexagonal_number == n else \"No\"\n\n# Test cases"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    # Merge dict2 and dict3 first\n    merged_dict2_3 = {**dict2, **dict3}\n    \n    # Merge the result with dict1\n    final_dict = {**dict1, **merged_dict2_3}\n    \n    return final_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    \"\"\"\n    Function to get the frequency of all elements in a list.\n    \n    Args:\n        lst (list): A list of elements.\n        \n    Returns:\n        dict: A dictionary where keys are the unique elements from the list and values are their corresponding frequencies.\n    \"\"\"\n    frequency_dict = {}\n    for element in lst:\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        else:\n            frequency_dict[element] = 1\n    return frequency_dict"}
{"task_id": "Mbpp/89", "solution": "def take_closest(my_list, my_number):\n    \"\"\"\n    Given a list of integers, find the number closest to a given number.\n\n    Parameters:\n    my_list (list): A list of integers.\n    my_number (int): The number to find the closest one in the list.\n\n    Returns:\n    int: The number in the list that is closest to my_number.\n    \"\"\"\n    # If the list is already sorted, we can use the built-in min function.\n    if my_list == sorted(my_list):\n        return min(my_list, key=lambda x: abs(x - my_number))\n    # If the list is not sorted, we use bisect to find the insertion point.\n    else:\n        try:\n            # bisect_left requires the list to be sorted in ascending order.\n            # We sort the list once and then use bisect_left.\n            my_list.sort()\n            index = bisect_left(my_list, my_number)\n            return my_list[index]\n        except ValueError:\n            # If the list is not sorted and cannot be sorted, return the first element.\n            return my_list[0]\n\n# Test cases\nmy_list = [4, 1, 88, 44, 3]\nmy_number = 5"}
{"task_id": "Mbpp/90", "solution": "def find_longest_word(words_list):\n    # Create an empty list to store word lengths and words\n    word_len = []\n    \n    # Iterate through each word in the list\n    for word in words_list:\n        # Append a tuple containing the length of the word and the word itself\n        word_len.append((len(word), word))\n    \n    # Sort the list based on word lengths in ascending order\n    word_len.sort()\n    \n    # Return the length and the word of the last item in the sorted list\n    # (which is the longest word)\n    return word_len[-1][0], word_len[-1][1]\n\n# Test the function with a list of words\nresult = find_longest_word([\"PHP\", \"Exercises\", \"Backend\"])"}
{"task_id": "Mbpp/91", "solution": "def find_substring(strings, substring):\n    \"\"\"\n    Check if a substring is present in a list of strings.\n    \n    :param strings: List of strings.\n    :param substring: The substring to search for.\n    :return: True if the substring is found in any string in the list, False otherwise.\n    \"\"\"\n    for s in strings:\n        if substring in s:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def isUndulating(n):\n    # Considering the definition with restriction that there should be at least 3 digits\n    if len(n) <= 2:\n        return False\n    \n    # Check if all alternate digits are same or not\n    for i in range(2, len(n)):\n        if n[i - 2] != n[i]:\n            return False\n    return True\n\n# Driver code\nn = \"1212121\"\nif (isUndulating(n)):\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"task_id": "Mbpp/93", "solution": "def power(b, e):\n    \"\"\"\n    Calculate b raised to the power of e using an iterative approach.\n    \n    Args:\n        b (float): The base number.\n        e (int): The exponent.\n        \n    Returns:\n        float: The result of b raised to the power of e.\n    \"\"\"\n    # Initialize result to 1\n    pow = 1.0\n    \n    # Multiply b for e times\n    for _ in range(abs(e)):\n        pow *= b\n    \n    # If the exponent is negative, return the reciprocal\n    if e < 0:\n        return 1 / pow\n    \n    return pow\nb = 3.0\ne = 5"}
{"task_id": "Mbpp/94", "solution": "import random\nimport string\nimport csv"}
{"task_id": "Mbpp/95", "solution": "def find_smallest_in_list(lst):\n    \"\"\"\n    This function finds the smallest number in a list using different methods.\n    \n    Parameters:\n    lst (list): A list of integers.\n    \n    Returns:\n    int: The smallest number in the list.\n    \"\"\"\n    # Method 1: Using built-in min() function\n    smallest = min(lst)\n    return smallest\n\n# Test cases\ntest_lists = [\n    [8, 3, 5, 1, 9, 12],\n    [3, 6, 8, 9, 12, 5, 18, 1],\n    # Additional test cases can be added here\n]\n\nresults = {}\nfor test_list in test_lists:\n    smallest_value = find_smallest_in_list(test_list)\n    results[f\"Using min(): {test_list}\"] = smallest_value"}
{"task_id": "Mbpp/96", "solution": "def divisor_count(n):\n    # Initialize a count for divisors\n    divisor_count = 0\n    \n    # Iterate through numbers from 1 to n\n    for i in range(1, n + 1):\n        # Check if the number divides n without a remainder\n        if n % i == 0:\n            # If it does, increment the divisor count\n            divisor_count += 1\n    \n    return divisor_count\n\n# Test the 'divisor_count' function with different values of 'n'"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lst):\n    # Flatten the list of lists\n    flat_list = [item for sublist in lst for item in sublist]\n    \n    # Create a dictionary to store frequencies\n    freq_dict = {}\n    \n    # Iterate through the flattened list to count frequencies\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    \n    return freq_dict"}
{"task_id": "Mbpp/98", "solution": "import math\ndef multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"}
{"task_id": "Mbpp/99", "solution": "def dec_to_bin(n):\n    \"\"\"Convert a decimal number to binary using bitwise operations.\"\"\"\n    return bin(n)[2:]\n\n# Test cases"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    # Function to check if a number is a palindrome\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    # Start checking from n + 1\n    for i in range(n + 1, 100000):  # Arbitrary large limit to ensure we find the next palindrome\n        if is_palindrome(i):\n            return i\n\n    # If no palindrome found within the limit, return None\n    return None"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    \"\"\"\n    Function to find the kth element in the given array using 1-based indexing.\n    \n    Args:\n    arr (list): The input array.\n    k (int): The index of the kth element (1-based indexing).\n    \n    Returns:\n    int: The kth element in the array.\n    \"\"\"\n    if len(arr) < k:\n        raise IndexError(\"The array does not contain enough elements for the given index.\")\n    \n    return arr[k - 1]"}
{"task_id": "Mbpp/102", "solution": "import re"}
{"task_id": "Mbpp/103", "solution": "import math"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(sublists):\n    # Sort each sublist in the given list of lists\n    sorted_sublists = [sorted(sublist) for sublist in sublists]\n    return sorted_sublists"}
{"task_id": "Mbpp/105", "solution": "def count_true_booleans(boolean_list):\n    return sum(bool(x) for x in boolean_list)\n\n# Test cases"}
{"task_id": "Mbpp/106", "solution": "def create_tuples_with_cubes(numbers):\n    \"\"\"\n    This function takes a list of numbers and returns a list of tuples,\n    where each tuple contains the number and its cube.\n    \"\"\"\n    return [(n, n**3) for n in numbers]\n\n# Testing the function with examples from the problem description\ntup_list_example_1 = create_tuples_with_cubes([1, 2, 3, 4, 5])"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    # Combine all lists into a single list\n    combined_list = list1 + list2 + list3\n    \n    # Sort the combined list\n    sorted_list = sorted(combined_list)\n    \n    return sorted_list"}
{"task_id": "Mbpp/109", "solution": "def count_odd_rotations(binary_string):\n    # Convert binary string to integer\n    num = int(binary_string, 2)\n    \n    # Initialize a set to store unique odd decimal representations\n    odd_rep_set = set()\n    \n    # Generate all rotations of the number\n    for i in range(1, len(binary_string) + 1):\n        rotated_string = binary_string[:i] + binary_string[i:]\n        decimal = int(rotated_string, 2)\n        # Check if the decimal representation is odd\n        if decimal % 2 != 0:\n            odd_rep_set.add(decimal)\n    \n    # Return the count of unique odd decimal representations\n    return len(odd_rep_set)\n\n# Test cases"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_list):\n    # Convert each sublist to a set to remove duplicates\n    nested_sets = [set(sublist) for sublist in nested_list]\n    \n    # Use set intersection to find common elements across all sets\n    common_elements = set.intersection(*nested_sets)\n    \n    # Convert the resulting set back to a list\n    return list(common_elements)\nnested_list = [[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]"}
{"task_id": "Mbpp/113", "solution": "def is_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n\n# Test cases\nassert is_integer('3') == True\nassert is_integer('-7') == True\nassert is_integer('3.14') == False\nassert is_integer('-17') == True\nassert is_integer('asfasfas') == False\n\n# Additional test with assert for the second problem\ndef return_it_back(n):\n    assert type(n) == int, \"Incorrect input: expected integer\"\n\n# Testing the function"}
{"task_id": "Mbpp/116", "solution": "def tuple_int_str(tuple_str):\n    \"\"\"\n    Converts a tuple of string values to a tuple of integer values.\n\n    Args:\n        tuple_str (tuple): A tuple containing tuples of strings.\n\n    Returns:\n        tuple: A new tuple where each string in the inner tuples is converted to an integer.\n    \"\"\"\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\n    return result\n\n# Test the function\ntuple_str = (('333', '33'), ('1416', '55'))"}
{"task_id": "Mbpp/118", "solution": "def split_string_into_characters(string):\n    \"\"\"\n    This function takes a string and returns a list containing each character of the string.\n    \n    Args:\n        string (str): The input string.\n        \n    Returns:\n        list: A list containing each character of the input string.\n    \"\"\"\n    return list(string)\n\n# Test cases\ntest_cases = [\n    (\"hello\", ['h', 'e', 'l', 'l', 'o']),\n    (\"Python\", ['P', 'y', 't', 'h', 'o', 'n']),\n    (\"geeksforgeeks\", ['g', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'g', 'e', 'e', 'k'])\n]\n\n# Run test cases\nfor string, expected in test_cases:\n    result = split_string_into_characters(string)\n    assert result == expected, f\"Failed for string '{string}': Expected {expected}, but got {result}\"\n    print(f\"Passed for string '{string}'\")"}
{"task_id": "Mbpp/119", "solution": "def find_single_element(arr):\n    \"\"\"\n    Given a sorted array, find and return the element that appears only once.\n    \"\"\"\n    # Initialize XOR with the first element of the array\n    xor = arr[0]\n    \n    # Traverse the array, XOR-ing each element\n    for num in arr[1:]:\n        xor ^= num\n    \n    # The final XOR value will be 0 if the element was repeated, non-zero if it was unique\n    return xor != 0\n\n# Test cases"}
{"task_id": "Mbpp/120", "solution": "def tuple_max_val(nums):\n    # Calculate the maximum product using list comprehension with abs\n    result_max = max([abs(x * y) for x, y in nums])\n    \n    # Calculate the minimum product using list comprehension with abs\n    result_min = min([abs(x * y) for x, y in nums])\n    \n    return result_max, result_min\n\n# Define the list of tuples\nnums = [(2, 7), (2, 6), (1, 8), (4, 9)]\n\n# Print the original list of tuples"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n\n    amicables = set()\n    for num in range(2, limit + 1):\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n\n    return sum(amicables)"}
{"task_id": "Mbpp/124", "solution": "import cmath\nimport numpy as np"}
{"task_id": "Mbpp/125", "solution": "def max_difference_binary_string(s):\n    # Initialize variables to keep track of the maximum difference and the starting index\n    max_diff = 0\n    start_index = 0\n    \n    # Iterate through the string\n    for i in range(len(s)):\n        # Calculate the difference between the number of 0s and 1s in the current substring\n        diff = len(s[i:]) - (s[i] == '0')\n        \n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n            start_index = i\n    \n    # Return the maximum difference and the starting index of the substring\n    return max_diff, start_index\n\n# Test cases based on the problem description\ntest_cases = [\n    (\"11000010001\", 6, 2, 9),  # Example 1\n    (\"-1 -1 1 1 1 -1 1 1 1 -1\", 6, 0, 0),  # Example 2 (with -1 conversion)\n    (\"11000010001\", 6, 2, 9),  # Example 3 (duplicate for verification)\n    # Add more test cases as needed\n]\n\n# Iterate through test cases and print results\nfor s, expected_max_diff, expected_start_index in test_cases:\n    result = max_difference_binary_string(s)\n    print(f\"Input: {s}\")\n    print(f\"Expected: {expected_max_diff}, Starting index: {expected_start_index}\")\n    print(f\"Output: {result[0]}, Starting index: {result[1]}\")\n    if result[0] == expected_max_diff and result[1] == expected_start_index:\n        print(\"PASS\")\n    else:\n        print(\"FAIL\")"}
{"task_id": "Mbpp/126", "solution": "def sum_with_condition(x, y):\n    \"\"\"\n    Calculate the sum of two integers x and y.\n    If the sum is between 15 and 20 (inclusive on 15, exclusive on 20), return 20.\n    Otherwise, return the sum of x and y.\n    \"\"\"\n    sum_value = x + y\n    if 15 <= sum_value <= 20:\n        return 20\n    else:\n        return sum_value\n\n# Testing the sum_with_condition function"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    \"\"\"\n    Multiply two integers.\n    \n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        \n    Returns:\n        int: The product of a and b.\n    \"\"\"\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def longest_word_length(words):\n    \"\"\"\n    Function to find the length of the longest word in a list of words.\n\n    Args:\n        words (list): A list of strings representing words.\n\n    Returns:\n        int: The length of the longest word in the list.\n    \"\"\"\n    max_len = max(len(word) for word in words)\n    return max_len\n\n# Test cases\ntest_list = [\"Python\", \"with\", \"GFG\"]\nassert longest_word_length(test_list) == 6\n\ns = \"Geeks for Geeks is best Computer Science Portal\"\nassert longest_word_length(s.split()) == 18\n\n# Example from the problem statement\ntest_string = \"Geeksforgeeks is best Computer Science Portal\"\nassert longest_word_length(test_string.split()) == 18\n\n# Example to find the index of the character position for the word at Kth index\ndef find_word_index(word_list, k):\n    \"\"\"\n    Function to find the index of the character position for the word at the Kth index.\n\n    Args:\n        word_list (list): A list of strings representing words.\n        k (int): The index at which the word is sought.\n\n    Returns:\n        int: The index of the character position for the word at the given index.\n    \"\"\"\n    for i, word in enumerate(word_list):\n        if i == k:\n            return word.index(' ')\n    return -1  # Return -1 if the word is not found\n\n# Test case for word index\ntest_k = 21\nword_to_find = \"geeks\"\nassert find_word_index([w for w in test_string.split() if w == word_to_find], test_k) == 0"}
{"task_id": "Mbpp/129", "solution": "def is_magic_square(matrix):\n    n = len(matrix)\n    # Check if the matrix is square\n    if n != len(matrix) ** 2:\n        return False\n\n    # Initialize sums\n    diagonal_sum = sum(matrix[i][i] for i in range(n))\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(column) for column in zip(*matrix)]\n\n    # Check if all row, column, and diagonal sums are equal\n    return diagonal_sum == sum(row_sums) == sum(col_sums)\n\n# Test cases\nmatrices = [\n    [[2, 7, 6], [9, 5, 1], [4, 3, 8]],\n    [[13, 8, 15], [14, 12, 10], [9, 16, 11]],\n    [[1, 0, 0], [0, 0, 4], [5, 6, 1]],\n    [[8, 7, 6], [9, 5, 1], [5, 3, 8]]\n]\n\nfor matrix in matrices:\n    print(f\"Input: {matrix}\")\n    print(f\"Output: {is_magic_square(matrix)}\")"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    \"\"\"\n    Finds the item with the maximum frequency in a given list.\n    \n    :param lst: A list of integers.\n    :return: The item with the maximum frequency in the list.\n    :assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]) == 2\n    \"\"\"\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    \n    max_freq_item = max(frequency, key=frequency.get)\n    return max_freq_item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(str1):\n    vowels = \"\"  # Variable to store vowels in their original order\n    result_string = \"\"  # Variable to store the result string with reversed vowels\n\n    for char in str1:\n        if char in \"aeiouAEIOU\":  # Check if the character is a vowel\n            vowels += char  # Append the vowel to the vowels variable\n        else:\n            result_string += char  # Append non-vowel characters as they are\n\n    # Reverse the order of vowels in the result string\n    for i in range(len(vowels)):\n        result_string = result_string + vowels[i]  # Append the last vowel from the vowels variable\n\n    return result_string"}
{"task_id": "Mbpp/132", "solution": "# Function to convert a tuple of string values to a tuple of integer values\ndef tuple_int_str(tuple_str):\n    # Create a new tuple 'result' by converting the string elements in each inner tuple to integers\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\n    return result\n\n# Test the function with the provided example\ntuple_str = (('333', '33'), ('1416', '55'))"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    \"\"\"\n    Calculate the sum of negative numbers in a given list of numbers.\n    \n    :param numbers: List of numbers\n    :return: Sum of negative numbers in the list\n    \"\"\"\n    return sum(x for x in numbers if x < 0)"}
{"task_id": "Mbpp/135", "solution": "def is_decagonal_number(n):\n    # The formula to check if a number is decagonal is:\n    # n^2 - 3n + 2 == 0\n    # Rearranging gives us a quadratic equation:\n    # n^2 - 3n - 2 = 0\n    # Solving this using the quadratic formula:\n    # n = (3 \u00b1 sqrt(9 + 8)) / 2\n    # n = (3 \u00b1 sqrt(17)) / 2\n\n    # We need to check if n is one of the solutions to this equation\n    # Since sqrt(17) is not a perfect square, we'll approximate it\n    import math\n\n    discriminant = 9 + 8  # 9 + 8 = 17\n    sqrt_discriminant = math.sqrt(discriminant)\n\n    # Calculate the two potential solutions\n    n1 = (3 + sqrt_discriminant) / 2\n    n2 = (3 - sqrt_discriminant) / 2\n\n    # Check if n is close to either of these solutions\n    # We'll use a tolerance to account for floating-point precision\n    tolerance = 0.001\n\n    return abs(n - n1) < tolerance or abs(n - n2) < tolerance\n\n# Test cases based on the problem description\ntest_cases = [\n    (1, \"Yes\"),\n    (2, \"Yes\"),\n    (3, \"No\"),\n    (4, \"Yes\"),\n    (5, \"No\"),\n    (6, \"Yes\"),\n    (7, \"No\"),\n    (8, \"Yes\"),\n    (9, \"Yes\"),\n    (10, \"No\"),\n    (11, \"No\"),\n    (26, \"No\"),\n    (130, \"No\")\n]\n\nfor n, expected in test_cases:\n    result = is_decagonal_number(n)\n    print(f\"Is {n} a decagonal number? {result} (Expected: {expected})\")"}
{"task_id": "Mbpp/137", "solution": "def count_elements(arr, count_type):\n    \"\"\"Count the total number of elements of a specific type in the array.\"\"\"\n    count = 0\n    for element in arr:\n        if element == count_type:\n            count += 1\n    return count\n\n# Test cases"}
{"task_id": "Mbpp/138", "solution": "def can_be_sum_of_powers_of_two(n):\n    # Check if n is 0, as 0 cannot be represented as a sum of non-zero powers of 2\n    if n == 0:\n        return 0\n\n    # Initialize the power set\n    powers_of_two = set()\n\n    # Iterate to find powers of 2 that sum up to n\n    i = 1\n    while n > 0:\n        if n % 2 == 0:\n            powers_of_two.add(i)\n            n //= 2\n        else:\n            powers_of_two.add(i + 1)\n            n -= (i + 1)\n\n    # Check if all powers are greater than 0\n    return len(powers_of_two) > 0\n\n# Test cases"}
{"task_id": "Mbpp/139", "solution": "import math\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle given its radius.\n\n    :param radius: float, the radius of the circle\n    :return: float, the circumference of the circle\n    \"\"\"\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    flat_set = set()\n    for sublist in lst:\n        for item in sublist:\n            flat_set.add(item)\n    return flat_set"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(lst):\n    \"\"\"\n    Sorts a list of elements in ascending order.\n    \"\"\"\n    return sorted(lst)"}
{"task_id": "Mbpp/142", "solution": "def remove_element_from_list(original_list, element):\n    \"\"\"\n    This function removes all occurrences of a given element from a list.\n    \n    Parameters:\n    original_list (list): The original list from which elements need to be removed.\n    element (int/float): The element to be removed from the list.\n    \n    Returns:\n    new_list (list): The list after removing all occurrences of the given element.\n    \"\"\"\n    return [item for item in original_list if item != element]\n\n# Test cases"}
{"task_id": "Mbpp/145", "solution": "def max_pair_diff(my_list):\n    # Initialize max_diff to store the maximum difference\n    max_diff = 0\n    \n    # Iterate through the list starting from the second element\n    for i in range(1, len(my_list)):\n        # Calculate the difference between the current element and the next one\n        diff = my_list[i] - my_list[i - 1]\n        \n        # Update max_diff if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n\n# Given list\ngivenList = [7, 9, 5, 6, 3, 2]\n\n# Call the function with the given list\nresult = max_pair_diff(givenList)"}
{"task_id": "Mbpp/160", "solution": "def find_xy(n, a, b):\n    # Check if a * b > n\n    if a * b <= n:\n        return -1\n\n    # Initialize variables to store the solution\n    x, y = None, None\n\n    # Iterate to find x and y\n    for x in range(n // a + 1):\n        # Calculate y\n        y = (n - a * x) / b\n\n        # Check if y is an integer and positive\n        if y.is_integer() and y > 0:\n            return x, int(y)\n\n    # If no solution is found\n    return -1\n\n# Test cases"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(original_list, elements_to_remove):\n    \"\"\"\n    Remove all elements from the original list that are present in the list of elements to remove.\n    \n    Args:\n        original_list (list): The original list from which elements are to be removed.\n        elements_to_remove (list): A list of elements to be removed from the original list.\n        \n    Returns:\n        list: The original list with elements to be removed.\n    \"\"\"\n    return [item for item in original_list if item not in elements_to_remove]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    \"\"\"\n    Calculate the sum (n - 2*i) for i ranging from 0 to n // 2.\n    \n    Example:\n    assert sum_series(6) == 12\n    \n    Args:\n    n (int): The upper limit for the sum calculation.\n    \n    Returns:\n    int: The sum of the series.\n    \"\"\"\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        total_sum += n - 2 * i\n    return total_sum"}
{"task_id": "Mbpp/165", "solution": "def count_chars_at_alphabet_positions(input_string):\n    # Define the English alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    # Initialize a counter for characters at alphabet positions\n    counter = 0\n    \n    # Iterate over each character in the input string\n    for char in input_string:\n        # Check if the character is in the English alphabet\n        if char in alphabet:\n            # Increment the counter for characters at alphabet positions\n            counter += 1\n    \n    return counter\n\n# Test cases\ntest_cases = [\n    (\"xbcefg\", 2),  # Expected output: 2 (b, e)\n    (\"Hello123!\", 0),  # Expected output: 0 (no characters at alphabet positions)\n    (\"Geeksforgeeks is best Computer Science Portal\", 18)  # Expected output: 18 (e: 4, s: 1, c: 1, o: 1, m: 1, p: 1, t: 1)\n]\n\n# Run tests\nfor input_string, expected_output in test_cases:\n    result = count_chars_at_alphabet_positions(input_string)\n    print(f\"Input: '{input_string}' -> Expected: {expected_output} -> Actual: {result}\")"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if (lst[i] ^ lst[j]) & 1 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def smallest_power_of_2(n):\n    \"\"\"\n    Finds the smallest power of 2 that is greater than or equal to n.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The smallest power of 2 not less than n.\n\n    Examples:\n        >>> smallest_power_of_2(10)\n        8\n        >>> smallest_power_of_2(15)\n        16\n        >>> smallest_power_of_2(1)\n        1\n        >>> smallest_power_of_2(2)\n        2\n    \"\"\"\n    while n < 1:\n        n <<= 1  # Left shift n by 1 bit, equivalent to multiplying by 2\n        if n >= 1:\n            break  # Break the loop if n becomes 1 or more\n\n    return n\n\n# Test cases"}
{"task_id": "Mbpp/168", "solution": "def list_count_4(nums):\n    count = 0\n    for num in nums:\n        if num == 4:\n            count += 1\n    return count\n\n# Test cases"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start_index, end_index):\n    \"\"\"\n    Function to find the sum of numbers in a list within a range specified by two indices.\n    \n    Args:\n        lst (list): The input list of numbers.\n        start_index (int): The starting index in the list.\n        end_index (int): The ending index in the list.\n        \n    Returns:\n        int: The sum of numbers in the list from start_index to end_index inclusive.\n    \"\"\"\n    return sum(lst[start_index:end_index+1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    # A regular pentagon has 5 equal sides.\n    return 5 * side_length"}
{"task_id": "Mbpp/172", "solution": "def count_char_occurrences(s, c):\n    \"\"\"\n    This function counts the occurrences of a given character in a string.\n    It uses a simple iteration approach to ensure correctness and efficiency.\n    \"\"\"\n    count = 0\n    for char in s:\n        if char == c:\n            count += 1\n    return count\n\n# Test cases based on provided snippets\n\n# Test 1: Input S = \"abccdefgaa\" and c = 'a'\nassert count_char_occurrences(\"abccdefgaa\", 'a') == 3\n\n# Test 2: Input S = \"geeksforgeeks\" and c = 'e'\nassert count_char_occurrences(\"geeksforgeeks\", 'e') == 4\n\n# Test 3: Input S = \"cabccdefgaa\" and c = 'a'\nassert count_char_occurrences(\"cabccdefgaa\", 'a') == 3\n\n# Test 4: Recursive approach (conceptual, not explicitly tested here)\n# Example usage (conceptually similar to the recursive approach snippet):\n# s = \"abcabc\"\n# c = 'a'\n# expected_output = 2\n# assert count_char_occurrences(s, c) == 2\n\n# Test 5: Using built-in method (conceptual, not explicitly tested here)\n# Example usage (conceptually similar to the snippet using count_if):\n# s = \"a_b_c\"\n# expected_output = 2\n# assert count_char_occurrences(s, '_') == 2\n\n# Test 6: Counting contiguous occurrences without duplicates\ns = \"bla_bla_blabla_bla\"\nc = '_'\nassert count_char_occurrences(s, c) == 4\n\n# Test 7: Using a lambda function with std::string (conceptual, not explicitly tested here)\n# Example usage (conceptually similar to the snippet using std::count_if):\n# s = \"Hello_world\"\n# expected_output = 1\n# assert count_char_occurrences(s, '_') == 1\n\n# Test 8: Using a loop to count occurrences (conceptual, not explicitly tested here)\n# Example usage (conceptually similar to the snippet using a loop):\n# s = \"Hello_world\"\n# c = '_'\n# expected_output = 1\n# assert count_char_occurrences(s, c) == 1"}
{"task_id": "Mbpp/222", "solution": "def check_type(tup):\n    \"\"\"\n    Check if all elements in the tuple have the same data type.\n    \n    Args:\n    tup (tuple): A tuple of elements to be checked.\n    \n    Returns:\n    bool: True if all elements in the tuple are of the same data type, False otherwise.\n    \"\"\"\n    # Convert the tuple to a list for easier iteration\n    t_list = list(tup)\n    \n    # Check if all elements are of the same type\n    if len(set(type(x) for x in t_list)) == 1:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/223", "solution": "def isMajority(arr, n, x):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2\n\n# Test cases"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    \"\"\"\n    Count the number of set bits (binary digits with value 1) in a given number.\n    \n    :param n: int\n    :return: int\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(str):\n    # Initialize an empty string 'result' to store characters with even indices.\n    result = \"\"\n    \n    # Iterate through the indices (i) of the characters in the input string 'str'.\n    for i in range(len(str)):\n        # Check if the index (i) is even (i.e., has a remainder of 0 when divided by 2).\n        if i % 2 == 0:\n            # If the index is even, append the character at that index to the 'result' string.\n            result = result + str[i]\n    \n    # Return the 'result' string containing characters with even indices.\n    return result"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    Returns the minimum value among three numbers.\n    \n    Args:\n        a (int/built-in): The first number.\n        b (int/built-in): The second number.\n        c (int/built-in): The third number.\n        \n    Returns:\n        int: The minimum value among a, b, and c.\n    \"\"\"\n    return min(a, b, c)"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string, char):\n    return string.replace(' ', char)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    # Sort the list in descending order\n    lst.sort(reverse=True)\n    \n    # Return the first n items from the sorted list\n    return lst[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n    \n    Parameters:\n    r (float): The radius of the base of the cylinder.\n    h (float): The height of the cylinder.\n    \n    Returns:\n    float: The lateral surface area of the cylinder.\n    \"\"\"\n    return 2 * math.pi * r * h"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    \"\"\"\n    Calculate the volume of a cube given its side length.\n\n    :param side_length: The length of a side of the cube.\n    :return: The volume of the cube.\n    \"\"\"\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def check_bits_set(n):\n    \"\"\"\n    Check if all bits of the given number are set (1) or not in its binary representation.\n    \"\"\"\n    # Convert the number to binary and return \"Yes\" if all bits are 1, otherwise \"No\"\n    return \"Yes\" if bin(n).replace(\"0b\", \"\") == \"1\" else \"No\"\n\n# Test cases"}
{"task_id": "Mbpp/237", "solution": "def convert_tuples_to_dict(tuples_list):\n    \"\"\"\n    Converts a list of tuples into a dictionary.\n\n    Args:\n        tuples_list (list): A list of tuples where each tuple represents a key-value pair.\n\n    Returns:\n        dict: A dictionary created from the list of tuples.\n    \"\"\"\n    # Using dict() function to convert list of tuples to dictionary\n    return dict(tuples_list)\n\n# Test cases\ntuples_list = [(1, 2), (3, 4), (5, 6)]\nexpected_dict = {1: 2, 3: 4, 5: 6}"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(str):\n    # Formula to calculate substrings\n    return int(len(str) * (len(str) + 1) // 2)"}
{"task_id": "Mbpp/239", "solution": "def count_special_sequences(n, m):\n    # Initialize the count of special sequences\n    count = 0\n    \n    # Iterate through possible lengths of the sequence\n    for seq_length in range(1, n + 1):\n        # Initialize the current sequence\n        current_sequence = [0] * seq_length\n        \n        # Iterate to fill the sequence according to the rules\n        for i in range(seq_length - 1):\n            # Check if the next element is valid\n            if current_sequence[i] + 1 < m and 2 * current_sequence[i] >= current_sequence[i + 1]:\n                current_sequence[i + 1] = 2 * current_sequence[i]\n            else:\n                break  # Break if we can't continue the sequence\n        \n        # If the sequence was successfully formed, count it\n        if len(current_sequence) == n:\n            count += 1\n    \n    return count\n\n# Example tests"}
{"task_id": "Mbpp/240", "solution": "def remove_duplicates_by_index(test_list1, test_list2):\n    result_list = []\n    for i, val in enumerate(test_list1):\n        if test_list2[i] != val:\n            result_list.append(val)\n    return result_list\n\n# Test cases\ntest_list1 = [3, 5, 6, 5, 3, 7, 8, 6]\ntest_list2 = [1, 7, 6, 3, 7, 9, 10, 11]"}
{"task_id": "Mbpp/242", "solution": "def count_characters(s):\n    \"\"\"\n    This function counts the total number of characters in a given string.\n    It uses the len() function to directly get the length of the string.\n    \"\"\"\n    return len(s)\n\n# Test cases\ntest_strings = [\n    \"Geeksforgeeks is best Computer Science Portal\",\n    \"Hello123!\",\n    \"Count the spaces in this string.\",\n    \"A Computer Science portal for geeks.\"\n]\n\nresults = {s: count_characters(s) for s in test_strings}"}
{"task_id": "Mbpp/244", "solution": "import math"}
{"task_id": "Mbpp/245", "solution": "def find_bitonic_point(arr):\n    n = len(arr)\n    increasing_start = 0\n    max_increasing_sum = 0\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            if increasing_start == 0:\n                max_increasing_sum = arr[i]\n            increasing_start = i\n    decreasing_start = n - 1\n    max_decreasing_sum = 0\n    for i in range(n - 2, -1, -1):\n        if arr[i] < arr[i + 1]:\n            if max_decreasing_sum == 0:\n                max_decreasing_sum = arr[i]\n            decreasing_start = i\n    if increasing_start == decreasing_start:\n        return max_increasing_sum\n    else:\n        return -1  # No bitonic point found\n\n# Test cases\narr1 = [1, 15, 51, 45, 33, 100, 12, 18, 9]\nassert find_bitonic_point(arr1) == 194\n\narr2 = [3, 5, 7, 9, 10, 90, 100, 130, 140, 160, 170]\nassert find_bitonic_point(arr2) == 130\n\narr3 = [11, 15, 6, 8, 9, 10]\nassert find_bitonic_point(arr3) == 26\n\narr4 = [2, 5, 7, 9]\nassert find_bitonic_point(arr4) == -1\n\narr5 = [11, 15, 6, 8, 9, 10]\ntarget = 16\nassert sum(arr[increasing_start: decreasing_start + 1]) == target"}
{"task_id": "Mbpp/247", "solution": "def longest_palindromic_subsequence(s):\n    # Initialize the length of the longest palindromic subsequence\n    # to 1, as the smallest palindrome is a single character.\n    lps_length = 1\n\n    # Create a 2D array to store the lengths of the longest palindromic subsequences\n    # for substrings of 's' of all lengths from 1 to len(s).\n    dp = [[0] * (len(s) + 1) for _ in range(len(s) + 1)]\n\n    # Base case: any single character is a palindrome of length 1\n    for i in range(len(s)):\n        dp[i][i] = 1\n\n    # Fill the dp table using dynamic programming\n    for i in range(1, len(s)):\n        for j in range(i, len(s)):\n            if s[i] == s[j]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])  # Non-matching characters\n\n    # The length of the longest palindromic subsequence in the entire string\n    return dp[-1][-1]\n\n# Example tests"}
{"task_id": "Mbpp/250", "solution": "def count_occurrences_in_tuples(tuples, element):\n    \"\"\"\n    This function counts the occurrences of a given element in a list of tuples.\n\n    Parameters:\n    - tuples (list): A list of tuples.\n    - element (int/float): The element to search for in the tuples.\n\n    Returns:\n    - int: The count of occurrences of the element in the tuples.\n    \"\"\"\n    count = 0\n    for tup in tuples:\n        if element in tup:\n            count += 1\n    return count\n\n# Test cases\ntuples_list = [\n    (1, 2, 3), (4, 5, 6),  # Example list from GeeksforGeeks\n    [10, 20, 20, 10, 30, 10],  # Example array from W3Schools\n    ((1, 2), (3, 4), (5, 6))  # Example tuple list\n]\n\n# Test with GeeksforGeeks example\nresult_geeksforgeks = count_occurrences_in_tuples(tuples_list[0], 2)\nassert result_geeksforgeks == 1, \"Test case 1 failed\"\n\n# Test with W3Schools example array\nresult_w3schools = count_occurrences_in_tuples([10, 20, 20, 10, 30, 10], 20)\nassert result_w3schools == 2, \"Test case 2 failed\"\n\n# Test with accessing Nth element of tuples\nresult_nth_element = count_occurrences_in_tuples((1, 2), 1)\nassert result_nth_element == 1, \"Test case 3 failed\""}
{"task_id": "Mbpp/251", "solution": "def test_insert_method():\n    # Test case 1: Insert at index 3 (4th element)\n    my_list = [1, 2, 3, 4]\n    result = my_list.insert(3, 5)\n    assert result is None, \"Expected None\"\n    assert result == [1, 2, 5, 3, 4], \"Expected list with inserted element at index 3\"\n\n    # Test case 2: Insert at index 0 (beginning of the list)\n    my_list = [1, 2, 3]\n    result = my_list.insert(0, 0)\n    assert result is None, \"Expected None\"\n    assert my_list == [0, 1, 2, 3], \"Expected list with element inserted at the beginning\"\n\n    # Test case 3: Insert at index 2 (3rd element)\n    my_list = [1, 2, 3]\n    result = my_list.insert(2, 4)\n    assert result is None, \"Expected None\"\n    assert my_list == [1, 2, 4, 3], \"Expected list with inserted element at index 2\"\n\n    print(\"All test cases pass.\")\n\n# Run the test function\ntest_insert_method()"}
{"task_id": "Mbpp/252", "solution": "import math\ndef convert(c):\n    \"\"\"\n    Converts a complex number to polar coordinates (magnitude, angle).\n\n    Args:\n        c (complex): A complex number in the form of `x + yi`.\n\n    Returns:\n        Tuple: A tuple containing the magnitude and angle of the complex number in polar form.\n    \"\"\"\n    # Extract real and imaginary parts\n    real = c.real\n    imag = c.imag\n\n    # Calculate the magnitude (r)\n    r = math.sqrt(real**2 + imag**2)\n\n    # Calculate the angle (theta) in radians\n    theta = math.atan2(imag, real)\n\n    # Convert the angle to degrees for better readability (optional)\n    theta_degrees = math.degrees(theta)\n\n    return r, theta"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    \"\"\"\n    Returns the number of integer elements in a given list.\n    \n    :param lst: List of elements.\n    :return: Integer count in the list.\n    \"\"\"\n    return sum(1 for element in lst if isinstance(element, int))"}
{"task_id": "Mbpp/255", "solution": "import itertools"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    \"\"\"\n    Function to count the number of prime numbers less than a given non-negative number.\n    \n    Args:\n        n (int): A non-negative number.\n        \n    Returns:\n        int: The count of prime numbers less than n.\n    \"\"\"\n    primes_count = 0\n    \n    # Function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Count primes up to n\n    for possible_prime in range(2, n):\n        if is_prime(possible_prime):\n            primes_count += 1\n    \n    return primes_count"}
{"task_id": "Mbpp/257", "solution": "def sort_by_price(fruits):\n    \"\"\"\n    Sorts a list of tuples containing a fruit name and its price by the price.\n    Uses a lambda function as the key argument to sorted().\n    \"\"\"\n    return sorted(fruits, key=lambda x: x[1])\n\ndef divmod_example():\n    \"\"\"\n    Demonstrates the use of the divmod() function which returns a tuple of quotient and remainder.\n    \"\"\"\n    num = 10\n    denom = 3\n    result = divmod(num, denom)\n    print(f\"Quotient: {result[0]}, Remainder: {result[1]}\")\n\ndef count_occurrences(tuple_list):\n    \"\"\"\n    Counts the occurrences of a specific item in a list of tuples.\n    Returns the count or 0 if the item is not present.\n    \"\"\"\n    return tuple_list.count(item)\n\ndef bubble_sort(arr):\n    \"\"\"\n    Implements the Bubble Sort algorithm to sort an array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\ndef insertion_sort(arr):\n    \"\"\"\n    Implements the Insertion Sort algorithm to sort an array.\n    \"\"\"\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >= 0 and key < arr[j]:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = key\n    return arr\n\ndef list_length(lst):\n    \"\"\"\n    Demonstrates different methods to find the length of a list in Python.\n    \"\"\"\n    # Using len() function\n    print(\"Length using len():\", len(lst))\n    \n    # Using a for loop\n    print(\"Length using a for loop:\", len(lst))\n    \n    # Using a generator expression\n    print(\"Length using a generator expression:\", len(generators((i for i in lst))))\n    \n    # Using a list comprehension\n    print(\"Length using a list comprehension:\", len([i for i in lst]))\n\n# Test cases\nfruits = [(\"Apple\", 2.99), (\"Banana\", 0.69), (\"Cherry\", 1.50)]\nsorted_fruits = sort_by_price(fruits)"}
{"task_id": "Mbpp/259", "solution": "def extend_tuple(input_tuple, element):\n    \"\"\"\n    Extend a tuple by adding a new element at the end.\n    \n    Args:\n        input_tuple (tuple): The original tuple.\n        element (any): The element to be added to the tuple.\n        \n    Returns:\n        tuple: The extended tuple with the new element added.\n    \"\"\"\n    # Check if the input is a tuple\n    if not isinstance(input_tuple, tuple):\n        raise ValueError(\"The first argument must be a tuple.\")\n    \n    # Check if the element is of an appropriate type\n    if not isinstance(element, (int, float, str)):\n        raise TypeError(\"The second argument must be one of int, float, or str.\")\n    \n    # Extend the tuple\n    return input_tuple + (element,)\n\n# Test cases based on provided snippets\n# For tuple (1, 2, 3) and element 4"}
{"task_id": "Mbpp/260", "solution": "def nth_prime(n):\n    \"\"\"\n    Function to find the nth prime number.\n    \"\"\"\n    # Initialize a list to store primes\n    primes = [2]  # Start with the first prime number\n\n    # Generate primes up to n using a simple prime-checking loop\n    for i in range(3, n + 1, 2):\n        if all(i % p != 0 for p in primes):\n            primes.append(i)\n\n    # Return the nth prime number\n    return primes[n - 1]\n\n# Test cases"}
{"task_id": "Mbpp/261", "solution": "def division_elements(t1, t2):\n    \"\"\"\n    Perform element-wise division operation across two tuples.\n    \n    Args:\n        t1 (tuple): The first tuple of numbers.\n        t2 (tuple): The second tuple of numbers.\n        \n    Returns:\n        tuple: A tuple where each element is the result of dividing the corresponding elements from the input tuples.\n    \"\"\"\n    return tuple(a / b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    \"\"\"\n    Splits a list into two parts where the length of the first part is L.\n    :param lst: The input list.\n    :param L: The desired length of the first part of the list.\n    :return: A tuple containing the two resulting lists.\n    \"\"\"\n    if len(lst) < L:\n        return ([], lst)\n    \n    first_part = lst[:L]\n    second_part = lst[L:]\n    \n    return (first_part, second_part)"}
{"task_id": "Mbpp/264", "solution": "def calculate_dog_age_in_dog_years(human_age):\n    if human_age < 0:\n        return \"Age must be a positive number.\"\n    elif human_age <= 2:\n        return human_age * 10.5\n    else:\n        return 21 + (human_age - 2) * 4\n\n# Test the function with example inputs"}
{"task_id": "Mbpp/265", "solution": "# Define a list 'C' containing alphabetic characters from 'a' to 'n'\nC = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n']\n\n# Define a function 'list_slice' that takes a sequence 'S' and a 'step' value\ndef list_slice(S, step):\n    return [S[i::step] for i in range(step)]\n\n# Call the 'list_slice' function with the list 'C' and a step value of 3\nresult = list_slice(C, 3)\n\n# Print the resulting list of slices"}
{"task_id": "Mbpp/266", "solution": "def calculate_cube_properties(surface_area):\n    \"\"\"\n    Calculate the edge length of a cube given its surface area.\n\n    Args:\n        surface_area (float): The total surface area of the cube.\n\n    Returns:\n        float: The edge length of the cube.\n    \"\"\"\n    # The formula to calculate the edge length from the surface area of a cube is:\n    # edge_length = surface_area / 6\n    edge_length = surface_area / 6\n    return edge_length\n\n# Test the function with some example inputs"}
{"task_id": "Mbpp/267", "solution": "def SquareSum(n):\n    \"\"\"Calculate the sum of squares of the first n natural numbers using the formula.\"\"\"\n    return (n * (n + 1) * (2 * n + 1)) // 6\n\n# Test the function with the provided example\nn = 10"}
{"task_id": "Mbpp/268", "solution": "def is_star_number(n):\n    # Check if n is a star number using the formula S_n = 6n(n-1) + 1\n    if 6 * n * (n - 1) + 1 == n:\n        return True\n    else:\n        return False\n\n# Test cases based on the problem description\ntest_cases = [\n    (1, True),  # Star number 1\n    (13, True),  # Star number 13\n    (37, True),  # Star number 37\n    (73, True),  # Star number 73\n    (121, True),  # Star number 121\n    (181, True),  # Star number 181\n    (253, True),  # Star number 253\n    (337, True),  # Star number 337\n    (433, True),  # Star number 433\n    (2, 13),    # Input: n = 2, Output: 13\n    (4, 73),    # Input: n = 4, Output: 73\n]\n\n# Run the test cases\nfor n, expected in test_cases:\n    result = is_star_number(n)\n    print(f\"Input {n} should be {expected}, got {result}\")"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    Returns the ASCII value of a given character.\n    \n    :param char: The character for which the ASCII value is to be returned.\n    :return: The ASCII value of the character.\n    \"\"\"\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    \"\"\"\n    Calculate the sum of even numbers at even positions in a list.\n    \n    :param lst: List of integers.\n    :return: Sum of even numbers at even positions.\n    \"\"\"\n    sum_even = 0\n    for i in range(0, len(lst), 2):  # Iterate over even positions\n        if lst[i] % 2 == 0:  # Check if the number is even\n            sum_even += lst[i]\n    return sum_even"}
{"task_id": "Mbpp/271", "solution": "def sum_of_natural_numbers(n):\n    \"\"\"\n    Calculate the sum of the first n natural numbers.\n    \"\"\"\n    # Using the formula for the sum of the first n natural numbers: n * (n + 1) / 2\n    return n * (n + 1) // 2\n\n# Test cases based on the provided examples\ndef test_sum_of_natural_numbers():\n    assert sum_of_natural_numbers(4) == 10, \"Test case 1 failed\"\n    assert sum_of_natural_numbers(6) == 21, \"Test case 2 failed\"\n    assert sum_of_natural_numbers(3) == 6, \"Test case 3 failed\"\n    assert sum_of_natural_numbers(5) == 15, \"Test case 4 failed\"\n    assert sum_of_natural_numbers(7) == 28, \"Test case 5 failed\"\n    print(\"All test cases passed!\")\n\n# Run the test function\ntest_sum_of_natural_numbers()"}
{"task_id": "Mbpp/272", "solution": "def extract_rear_elements(test_list):\n    \"\"\"\n    Extracts the last element from each tuple in the list and returns a new list containing these elements.\n    \"\"\"\n    # Initialize an empty list to store the rear elements\n    rear_elements = []\n    \n    # Iterate over each tuple in the input list\n    for tup in test_list:\n        # Append the last element of the tuple to the rear_elements list\n        rear_elements.append(tup[-1])\n    \n    return rear_elements\n\n# Test cases\noriginal_list = [(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]\nexpected_rear_list = [21, 20, 19]"}
{"task_id": "Mbpp/273", "solution": "def extend_tuple(input_tuple, element):\n    \"\"\"\n    Extend a tuple by adding a new element at the end.\n\n    Args:\n        input_tuple (tuple): The initial tuple.\n        element (any): The element to be added to the tuple.\n\n    Returns:\n        tuple: The extended tuple with the new element added.\n    \"\"\"\n    # Check if the input is a tuple\n    if not isinstance(input_tuple, tuple):\n        raise ValueError(\"The first argument must be a tuple.\")\n\n    # Check if the element is of a compatible type\n    if not isinstance(element, (int, float, str)):\n        raise TypeError(\"The second argument must be of type int, float, or str.\")\n\n    # Extend the tuple by adding the element\n    return input_tuple + (element,)\n\n# Test cases"}
{"task_id": "Mbpp/274", "solution": "def sum_of_even_odd_digits(lst):\n    even_sum = 0\n    odd_sum = 0\n    \n    for digit in lst:\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    \n    return even_sum, odd_sum\n\n# Test cases\ntest_list_1 = [345, 893]\neven_sum_1, odd_sum_1 = sum_of_even_odd_digits(test_list_1)"}
{"task_id": "Mbpp/276", "solution": "import math\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculate the volume of a cylinder.\n    \n    Args:\n        radius (float): The radius of the base of the cylinder.\n        height (float): The height of the cylinder.\n        \n    Returns:\n        float: The volume of the cylinder.\n    \"\"\"\n    return math.pi * radius ** 2 * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n):\n    \"\"\"\n    Filter a dictionary to include only entries with values greater than or equal to n.\n    \n    Args:\n    dictionary (dict): The input dictionary.\n    n (int): The threshold value.\n    \n    Returns:\n    dict: The filtered dictionary.\n    \"\"\"\n    filtered_dict = {key: value for key, value in dictionary.items() if value >= n}\n    return filtered_dict"}
{"task_id": "Mbpp/278", "solution": "def check_tuple_contains(item, tuple_list):\n    \"\"\"\n    Check if a given item exists in a tuple list.\n    \n    Args:\n        item (any): The item to search for in the tuples.\n        tuple_list (list/tuple): A list or tuple of tuples to search through.\n        \n    Returns:\n        bool: True if the item is found in any tuple, False otherwise.\n    \"\"\"\n    return any(item in t for t in tuple_list)\n\n# Test cases to validate the function\ntest_cases = [\n    {\n        \"description\": \"Check if the item exists in the tuple list without needing the index.\",\n        \"tuple_list\": ((5, 6), (5, 4, 7, 8, 4)),\n        \"item\": 5,\n        \"expected_output\": True\n    },\n    {\n        \"description\": \"Check if the item exists in the tuple list and returns True even if it's not the first occurrence.\",\n        \"tuple_list\": ((5, 6), (3, 4), (5, 7)),\n        \"item\": 5,\n        \"expected_output\": True\n    },\n    {\n        \"description\": \"Check if the item is not present in the tuple list.\",\n        \"tuple_list\": ((1, 2), (3, 4)),\n        \"item\": 5,\n        \"expected_output\": False\n    },\n    {\n        \"description\": \"Input: A tuple and a list of items to count occurrences.\",\n        \"tuple\": ('a', 'a', 'c', 'b', 'd'),\n        \"items\": ['a', 'b'],\n        \"expected_output\": 2\n    },\n    {\n        \"description\": \"Input: A tuple and a list of items where the list contains duplicates.\",\n        \"tuple\": (1, 2, 3, 1, 4, 6, 7, 1, 4),\n        \"items\": [1, 4, 7],\n        \"expected_output\": 3\n    }\n]\n\n# Run test cases\nfor case in test_cases:\n    result = check_tuple_contains(case[\"item\"], case[\"tuple_list\"])\n    print(f\"Case {case['description']}: {result}\")"}
{"task_id": "Mbpp/279", "solution": "def get_decagonal_number(n):\n    # Formula to calculate the nth decagonal number\n    return (4 * n * n - 3 * n)\n\n# Test cases"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    \"\"\"\n    Function to find an element in a list and return a tuple containing a boolean indicating its presence and its index (or -1 if not found).\n    :param arr: List of elements.\n    :param element: Element to search for.\n    :return: Tuple (boolean, index).\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    \"\"\"\n    Check if all elements in the list are unique.\n    \n    Args:\n    lst (list): A list of elements.\n    \n    Returns:\n    bool: True if all elements in the list are unique, False otherwise.\n    \"\"\"\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    \"\"\"\n    Subtracts two lists element-wise.\n    \n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n        \n    Returns:\n        list: The result of subtracting corresponding elements from both lists.\n    \"\"\"\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def check_digit_frequency(n, k):\n    # Convert the number to a string to easily access each digit\n    n_str = str(n)\n    \n    # Initialize a dictionary to store digit frequencies\n    freq_dict = {}\n    \n    # Count the frequency of each digit\n    for digit in n_str:\n        freq_dict[digit] = freq_dict.get(digit, 0) + 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, freq in freq_dict.items():\n        if freq > digit:\n            return False\n    \n    # If all conditions are met, return True\n    return True\n\n# Test cases"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    \"\"\"\n    Check if all elements in the list are equal to the given element.\n    \n    Args:\n        lst (list): A list of elements to be checked.\n        element (any): The element to compare against each item in the list.\n        \n    Returns:\n        bool: True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "solution": "def text_match_two_three(text):\n    # Check if 'a' is followed by exactly two 'b's\n    if text.startswith('ab'):\n        return True\n    # Check if 'a' is followed by exactly three 'b's\n    elif text.startswith('abb'):\n        return True\n    # If neither condition is met, return False\n    else:\n        return False"}
{"task_id": "Mbpp/286", "solution": "def max_subarray_sum_after_repeating(arr, K):\n    # Initialize the maximum sum to a very small number\n    max_sum = float('-inf')\n    \n    # Iterate through the array to find the maximum sum of any contiguous subarray\n    for i in range(len(arr)):\n        # Calculate the sum of the subarray from index i to the end\n        curr_sum = sum(arr[i:])\n        \n        # Update the maximum sum if the current sum is greater\n        max_sum = max(max_sum, curr_sum)\n    \n    # Since the array is repeated K times, multiply the maximum sum by K\n    return max_sum * K\n\n# Test cases based on the problem description\n\n# Case 1: arr = [-1, 10, 20], K = 2\narr1 = [-1, 10, 20]\nK1 = 2"}
{"task_id": "Mbpp/287", "solution": "def SquareSum(n):\n    \"\"\"Calculate the sum of squares of the first n natural numbers using the formula.\"\"\"\n    return (n * (n + 1) * (2 * n + 1)) // 6\n\nn = int(input(\"Enter N: \"))"}
{"task_id": "Mbpp/290", "solution": "def max_length(lst):\n    \"\"\"\n    Function to find the list of maximum length in a list of lists.\n    \n    :param lst: A list of lists.\n    :return: A tuple where the first element is the length of the longest list and the second element is the longest list itself.\n    \"\"\"\n    max_len = 0\n    longest_list = []\n    \n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            longest_list = sublist\n    \n    return (max_len, longest_list)"}
{"task_id": "Mbpp/292", "solution": "def roundoff_error(exact, approximate):\n    if (exact == 0.0 or approximate == 0.0):\n        return abs(exact + approximate)\n    else:\n        return abs(approximate/exact - 1.0)\n\ndef float_equal(float1, float2, epsilon=2.0e-9):\n    if not isinstance(float1, float) or not isinstance(float2, float):\n        raise TypeError(\"First argument is not a float.\")\n        # Second argument is not a float.\n    else:\n        return (roundoff_error(float1, float2) < epsilon)\n\n# Unit tests\ndef nearly_equal(a, b, precision=5):\n    return abs(a - b) < (10 ** (-precision))\n\n# Test cases\nassert nearly_equal(1, 1, precision=5), \"Test 1 failed\"\nassert nearly_equal(1.0, 1.0, precision=5), \"Test 2 failed\"\nassert nearly_equal(1.0, 1.0, precision=5), \"Test 2 failed\"  # Duplicate test, should pass\nassert nearly_equal(-1e-9, 1e-9, precision=5), \"Test 3 failed\"\nassert nearly_equal(1e9, 1e9 + 1, precision=5), \"Test 4 failed\"\nassert not nearly_equal(1e4, 1e4 + 1, precision=5), \"Test 5 failed\"\nassert nearly_equal(0.0, 1e-15, precision=5), \"Test 6 failed\"\nassert not nearly_equal(0.0, 1e-4, precision=6), \"Test 7 failed\"\n\n# Main program for the calculator"}
{"task_id": "Mbpp/293", "solution": "import math\ndef otherside_rightangle(a, b):\n    # Pythagorean theorem: c^2 = a^2 + b^2\n    c = math.sqrt(a**2 + b**2)\n    return c"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    # Sort the list first by whether the element is an integer (True for integers, False for non-integers)\n    # Then, sort lexicographically by the elements themselves\n    sorted_lst = sorted(lst, key=lambda x: (isinstance(x, int), x))\n    \n    # Return the maximum value found in the sorted list\n    return max(sorted_lst)"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    \"\"\"\n    Function to count inversions in an array.\n    \n    Args:\n        arr (list): A list of integers.\n        \n    Returns:\n        int: The number of inversions in the array.\n    \"\"\"\n    inv_count = 0\n    n = len(arr)\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    \n    return inv_count"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    \"\"\"Flattens a given nested list structure.\"\"\"\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"}
{"task_id": "Mbpp/299", "solution": "from collections import defaultdict"}
{"task_id": "Mbpp/300", "solution": "def count_even_length_binary_sequences_with_same_sum(n):\n    if n == 1:\n        return 2 if (0 == 0) else 1\n    \n    # Base case: n == 1\n    if n == 1:\n        return 2 if (0 == 0) else 1\n    \n    # Recursive case\n    even_sum = count_even_length_binary_sequences_with_same_sum(n - 1, abs(n - 1) - 1)\n    odd_sum = count_even_length_binary_sequences_with_same_sum(n - 1, abs(n - 1))\n    \n    return even_sum + odd_sum\n\n# Test cases"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0"}
{"task_id": "Mbpp/305", "solution": "import re"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subsequence(arr, i, k):\n    # Initialize a 2D DP table with -infinity\n    dp = [[-float('inf')] * (k + 1) for _ in range(i + 1)]\n    \n    # Base case: if there are no elements before index i, the sum is 0\n    for j in range(k + 1):\n        dp[i][j] = 0\n    \n    # Fill the DP table\n    for j in range(1, k + 1):\n        for i in range(1, i + 1):\n            if arr[i - 1] < arr[i] and arr[i - 1] <= dp[i - 1][j]:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + arr[i - 1])\n    \n    # The answer is the maximum sum ending at index i including the kth element\n    return max(dp[i][k], dp[i][k - 1] + arr[i])\n\n# Test cases\narr = [1, 101, 2, 3, 100, 4, 5]\ni = 4\nk = 6"}
{"task_id": "Mbpp/308", "solution": "def top_product(nums1, nums2, N):\n    # Create a list of products of all combinations of elements from 'nums1' and 'nums2'.\n    product_list = [x * y for x in nums1 for y in nums2]\n    \n    # Sort the product list in descending order.\n    result = sorted(product_list, reverse=True)\n    \n    # Return the first N largest products.\n    return result[:N]\n\n# Define the given lists\nnums1 = [1, 2, 3, 4, 5, 6]\nnums2 = [3, 6, 8, 9, 10, 6]\n\n# Number of largest products to find\nN = 4\n\n# Print the original lists"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"Return the maximum of two numbers.\"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/310", "solution": "def string_list_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace())\n    return result\n\n# Test the function\nstr1 = \"python 3.0\""}
{"task_id": "Mbpp/311", "solution": "def set_leftmost_unset_bit(n):\n    # Convert the integer to binary string\n    binary_str = bin(n)[2:]\n    \n    # Find the index of the first '1' from the right\n    rightmost_1_index = binary_str.rfind('1')\n    \n    # If there are no '1's (all bits are set), return the original number\n    if rightmost_1_index == -1:\n        return n\n    \n    # Convert the index to 0-based index\n    return rightmost_1_index\n\n# Test cases"}
{"task_id": "Mbpp/312", "solution": "import math\ndef volume_cone(r, h):\n    \"\"\"\n    Calculate the volume of a cone given the radius (r) and height (h).\n    :param r: float, the radius of the base of the cone.\n    :param h: float, the height of the cone.\n    :return: float, the volume of the cone.\n    \"\"\"\n    return (1/3) * math.pi * r**2 * h"}
{"task_id": "Mbpp/388", "solution": "def floor_log(num, base):\n    if num < 0:\n        raise ValueError(\"Non-negative number only.\")\n    if num == 0:\n        return 0\n    exponent = 0\n    while num >= base:\n        num /= base\n        exponent += 1\n    return base ** exponent\n\n# Testing the function with various cases\nassert floor_log(1, 2) == 1\nassert floor_log(0, 2) == 0\nassert floor_log(8, 2) == 3\nassert floor_log(16, 2) == 4\nassert floor_log(32, 2) == 5\n\n# Special cases\nassert floor_log(2, 2) == 1\nassert floor_log(1, 3) == 0\nassert floor_log(0, 10) == 0\n\n# Edge case\ntry:\n    floor_log(-1, 2)\nexcept ValueError as e:\n    assert str(e) == \"Non-negative number only.\"\n\n# Larger number to ensure correct behavior\nassert floor_log(1024, 2) == 10"}
{"task_id": "Mbpp/389", "solution": "def lucas(n):\n    # Base cases\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    \n    # Recurrence relation\n    return lucas(n - 1) + lucas(n - 2)\n\n# Test the function with n = 9"}
{"task_id": "Mbpp/390", "solution": "import re"}
{"task_id": "Mbpp/391", "solution": "def convert_to_nested_dict(l1, l2, l3):\n    \"\"\"\n    Converts multiple lists into a nested dictionary.\n\n    :param l1: List of keys\n    :param l2: List of inner dictionaries with keys and values\n    :param l3: List of values corresponding to the inner dictionaries in l2\n    :return: Nested dictionary where each key from l1 maps to a dictionary in l2 with values from l3\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n    for j in range(len(l2[0].keys())):\n        result[l1[i]]['{0}': j] = l3[i][j]\n    return result\n\n# Example usage\nstudent_id = [\"S001\", \"S002\", \"S003\", \"S004\"]\nstudent_name = [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"]\nstudent_grade = [85, 98, 89, 92]\n\n# Print the start of the code section and the original lists"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    # Base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    # Initialize memoization dictionary\n    memo = {}\n    \n    # Recursive function to compute the maximum sum\n    def helper(n):\n        # Check if the value is in the memoization dictionary\n        if n in memo:\n            return memo[n]\n        \n        # Base cases for division\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        \n        # Calculate the sum for the current division\n        current_sum = helper(n // 2) + helper(n // 3) + helper(n // 4) + helper(n // 5)\n        \n        # Store the result in memoization dictionary\n        memo[n] = current_sum\n        \n        return current_sum\n    \n    # Call the helper function with the input n\n    return helper(n)"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    \"\"\"Check if a tuple contains no duplicates.\"\"\"\n    return len(tup) == len(set(tup))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(string):\n    \"\"\"\n    Finds the first non-repeated character in a given string.\n\n    :param string: The input string.\n    :return: The first non-repeated character, or None if all characters are repeated.\n    \"\"\"\n    char_count = {}\n    for char in string:\n        char_count[char] = char_count.get(char, 0) + 1\n\n    for char in string:\n        if char_count[char] == 1:\n            return char\n\n    return None"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    # Sort the numbers\n    sorted_numbers = sorted([a, b, c])\n    \n    # Calculate the median\n    n = len(sorted_numbers)\n    if n % 2 == 1:\n        # If odd, return the middle number\n        return sorted_numbers[n // 2]\n    else:\n        # If even, return the average of the two middle numbers\n        return (sorted_numbers[n // 2 - 1] + sorted_numbers[n // 2]) / 2.0"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(n):\n    \"\"\"Calculate the sum of digits of a given number n.\"\"\"\n    # Convert the number to string to iterate over its digits\n    digits = str(n)\n    \n    # Initialize the sum\n    digit_sum = 0\n    \n    # Iterate over each character in the string (which are the digits)\n    for digit in digits:\n        # Check if the character is a digit\n        if digit.isdigit():\n            # Convert the digit to an integer and add to the sum\n            digit_sum += int(digit)\n    \n    return digit_sum"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    \"\"\"Return the minimum of two numbers a and b.\"\"\"\n    if a < b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    \"\"\"\n    Check if an element exists within a tuple.\n    \n    Args:\n        tuplex (tuple): The tuple to search within.\n        element (str): The element to check for existence.\n        \n    Returns:\n        bool: True if the element exists in the tuple, False otherwise.\n    \"\"\"\n    return element in tuplex"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(num):\n    \"\"\"\n    Determine if the parity (odd or even nature) of the given number is odd.\n    \n    :param num: The number to check for odd parity.\n    :return: True if the number is odd, False otherwise.\n    \"\"\"\n    if num % 2 == 1:\n        return True  # The number is odd\n    else:\n        return False  # The number is even"}
{"task_id": "Mbpp/409", "solution": "def tuple_max_val(nums):\n    \"\"\"\n    Finds the maximum and minimum product of pairs in a list of tuples.\n\n    Args:\n        nums (list): A list of tuples.\n\n    Returns:\n        tuple: A tuple containing the maximum and minimum product of pairs.\n    \"\"\"\n    result_max = max([abs(x * y) for x, y in nums])\n    result_min = min([abs(x * y) for x, y in nums])\n    return result_max, result_min\n\n# Test the function with the provided example\nnums = [(2, 7), (2, 6), (1, 8), (4, 9)]\nmax_product, min_product = tuple_max_val(nums)"}
{"task_id": "Mbpp/410", "solution": "def max_min_val(list_val):\n    max_val = max(i for i in list_val if isinstance(i, int))\n    min_val = min(i for i in list_val if isinstance(i, int))\n    return (max_val, min_val)\n\n# Define a list containing a mix of integers and non-integers\nlist_val = ['Python', 3, 2, 4, 5, 'version']\n\n# Print the original list"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    \"\"\"\n    Remove all odd numbers from a given list.\n    \n    Args:\n    numbers (list): A list of numbers.\n    \n    Returns:\n    list: A new list with all odd numbers removed.\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(test_list, n):\n    \"\"\"\n    Extracts the nth element from each tuple in the given list.\n\n    Args:\n        test_list (list): A list of tuples.\n        n (int): The index of the tuple element to extract.\n\n    Returns:\n        list: A list containing the nth element from each tuple in the input list.\n\n    Example:\n        >>> students = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)]\n        >>> extract_nth_element(students, 0)\n        ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n        >>> extract_nth_element(students, 2)\n        [99, 96, 94]\n    \"\"\"\n    return [x[n] for x in test_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check if any value in seq1 exists in seq2.\n    :param seq1: List or iterable of values.\n    :param seq2: List or iterable of values.\n    :return: Boolean indicating whether there is an overlap.\n    \"\"\"\n    for value in seq1:\n        if value in seq2:\n            return True\n    return False"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    arr_len = len(arr)\n    if arr_len < 2:\n        return \"No pairs exist\"\n\n    # Initialize max product pair\n    x = arr[0]\n    y = arr[1]\n\n    # Traverse through every possible pair\n    for i in range(0, arr_len):\n        for j in range(i + 1, arr_len):\n            if (arr[i] * arr[j] > x * y):\n                x = arr[i]\n                y = arr[j]\n\n    return x, y"}
{"task_id": "Mbpp/418", "solution": "def length(names):\n    \"\"\"Returns the length of each element in the names list.\"\"\"\n    word_len = [len(name) for name in names]\n    return word_len\n\ndef best(score, names):\n    \"\"\"Returns the name with the highest score (length) from the names list.\"\"\"\n    x = [len(name) for name in names]\n    return names[x.index(max(x))] if x else None\n\nnames = [\"John\", \"Megan\", \"Wenister\", \"J.M.\"]"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(numbers)"}
{"task_id": "Mbpp/420", "solution": "# Code 1: Using a formula to calculate the sum of cubes\n\ndef sumOfCubesFormula(n):\n    return ((n * (n + 1) // 2) ** 2)\n\n# Code 2: Using a loop to calculate the sum of cubes\n\ndef sumOfCubesLoop(n):\n    sumCube = 0\n    for i in range(1, n + 1):\n        sumCube += i ** 3\n    return sumCube\n\n# Code 3: Recursive function to calculate the sum of cubes\n\ndef sumOfCubesRecursive(n):\n    if n == 1:\n        return 1\n    else:\n        return n ** 3 + sumOfCubesRecursive(n - 1)\n\n# Testing the functions\n\n# Code 1 test"}
{"task_id": "Mbpp/421", "solution": "from functools import reduce"}
{"task_id": "Mbpp/422", "solution": "def CubeSum(n):\n    # Using the formula (n*(n+1)/2)**2 to calculate the sum of cubes of first n natural numbers\n    return (n * (n + 1)) // 2 ** 2\n\n# Taking input from the user\nn = int(input(\"Enter N: \"))\n\n# Printing the result"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tup):\n    \"\"\"Extract the last character from each string in the given tuple.\"\"\"\n    return [s[-1] for s in tup]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    \"\"\"\n    Count the number of sublists containing a particular element.\n\n    :param lst: List of lists.\n    :param element: Element to search for in sublists.\n    :return: Number of sublists containing the element.\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_even_numbers(nums):\n    \"\"\"\n    This function filters even numbers from a list of integers using a lambda function.\n    \n    Args:\n        nums (list): A list of integers.\n        \n    Returns:\n        list: A new list containing only the even numbers from the original list.\n    \"\"\"\n    return list(filter(lambda x: x % 2 == 0, nums))\n\n# Test the function with the provided examples\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_nums = filter_even_numbers(nums)"}
{"task_id": "Mbpp/427", "solution": "import re\ndef change_date_format(dt):\n    # Use regular expression to replace the original format with the desired format\n    return re.sub(r'(\\\\d{4})-(\\\\d{1,2})-(\\\\d{1,2})', '\\\\\\\\3-\\\\\\\\2-\\\\\\\\1', dt)"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    # Initialize variables for shell sort\n    gap = len(arr) // 2\n    while gap > 0:\n        # Inner loop to sort segments of size 'gap'\n        for i in range(gap, len(arr)):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def elementwise_and_in_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Given two tuples, perform an element-wise AND operation and return the resulting tuple.\n    \"\"\"\n    # Initialize an empty tuple to store the results\n    and_tuple = ()\n    \n    # Iterate over the indices of the first tuple\n    for i in range(len(test_tup1)):\n        # Perform element-wise AND operation using the bitwise AND operator\n        and_tuple += (test_tup1[i] & test_tup2[i])\n    \n    return and_tuple\n\n# Test cases\ntest_list = [\n    {\n        \"description\": \"A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.\",\n        \"favicon_url\": \"https://you.com/favicon?domain=www.geeksforgeeks.org&size=128\",\n        \"snippets\": [\n            \"Examples: Input : test_list = [\\\"gfg\\\", \\\"is\\\", \\\"best\\\", \\\"for\\\", \\\"geeks\\\"], idx_list = [0, 1, 4] Output : 10 Explanation : 3 + 2 + 5 = 10. (Sizes of strings at idx.) Input : test_list = [\\\"gfg\\\", \\\"is\\\", \\\"best\\\", ... Given a list of a tuple, the task is to remove all the tuples from list, if it's greater than n (say 100).\",\n            \"The original tuple 1 : (10, 4, 6, 9) The original tuple 2 : (5, 2, 3, 3) The AND tuple : (0, 0, 2, 1)\",\n            \"Given a positive integer \\\\'n\\\\'( 1 <= n <= 1015). Find the largest prime factor of a number. Input: 6 Output: 3 Explanation Prime factor of 6 are- 2, 3 Largest of them is 3 Input: 15 Output: 5\"\n        ],\n        \"title\": \"Python | Elementwise AND in tuples - GeeksforGeeks\",\n        \"url\": \"https://www.geeksforgeeks.org/python-elementwise-and-in-tuples/\"\n    },\n    {\n        \"description\": \"Python Exercises, Practice and Solution: Write a Python program to compute the element-wise sum of given tuples.\",\n        \"favicon_url\": \"https://you.com/favicon?domain=www.w3resource.com&size=128\",\n        \"snippets\": [\n            \"Original lists: (1, 2, 3, 4) (3, 5, 2, 1) (2, 2, 3, 1) Element-wise sum of the said tuples: (6, 9, 8, 6)\",\n            \"# Define three tuples 'x', 'y', and 'z' with integer elements. x = (1, 2, 3, 4) y = (3, 5, 2, 1) z = (2, 2, 3, 1) # Print a message indicating the original lists of tuples. print(\\\"Original lists:\\\") print(x) print(y) print(z) # Print a message indicating the element-wise sum of the said tuples.\"\n        ],\n        \"title\": \"Python: Compute element-wise sum of given tuples - w3resource\",\n        \"url\": \"https://www.w3resource.com/python-exercises/tuple/python-tuple-exercise-31.php\"\n    }\n]\n\n# Test the function with the provided test cases\nresults = {}\nfor item in test_list:\n    test_data = item[\"snippets\"][0]"}
{"task_id": "Mbpp/430", "solution": "import math"}
{"task_id": "Mbpp/432", "solution": "import math"}
{"task_id": "Mbpp/433", "solution": "def check_all_greater_than_threshold(lst, threshold):\n    \"\"\"\n    Check if all elements in the list are greater than a specified threshold.\n    \n    Args:\n        lst (list): The list of elements to be checked.\n        threshold (int): The value to check if all elements are greater than it.\n        \n    Returns:\n        bool: True if all elements in the list are greater than the threshold, False otherwise.\n    \"\"\"\n    for element in lst:\n        if element <= threshold:\n            return False\n    return True\n\n# Test cases"}
{"task_id": "Mbpp/435", "solution": "def last_digit(n):\n    \"\"\"\n    Function to get the last digit of a number.\n    \n    Args:\n    n (int): The number whose last digit is to be retrieved.\n    \n    Returns:\n    int: The last digit of the input number.\n    \"\"\"\n    # Convert the number to a string and access the last character\n    last_digit_str = str(n)[::-1][-1]\n    # Convert the last character back to an integer\n    return int(last_digit_str)\n\n# Test cases"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(numbers):\n    \"\"\"\n    Returns a list containing only the negative numbers from the input list.\n    \n    :param numbers: List of numbers\n    :return: List of negative numbers\n    \"\"\"\n    return [num for num in numbers if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    \"\"\"\n    Remove odd characters from a string.\n    \n    :param s: str, the input string\n    :return: str, the string with odd characters removed\n    \"\"\"\n    # Convert the string to a list of characters\n    char_list = list(s)\n    \n    # Remove odd-indexed characters (0-based index)\n    char_list = char_list[1::2]\n    \n    # Join the list back into a string\n    return ''.join(char_list)"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    # Convert each integer to a string and join them together\n    # Then convert the resulting string back to an integer\n    return int(''.join(map(str, numbers)))"}
{"task_id": "Mbpp/440", "solution": "import re"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(side_length):\n    \"\"\"\n    Calculate the surface area of a cube given its side length.\n\n    Args:\n        side_length (int): The length of a side of the cube.\n\n    Returns:\n        int: The surface area of the cube.\n    \"\"\"\n    # A cube has 6 faces, each of which is a square with side length 'side_length'\n    # The area of one face is side_length ** 2\n    # The total surface area is 6 * (side_length ** 2)\n    surface_area = 6 * (side_length ** 2)\n    return surface_area"}
{"task_id": "Mbpp/445", "solution": "def multiply_tuple_elements(tuples_list):\n    # Method 1: Using zip() + generator expression\n    def method1(tup1, tup2):\n        return tuple(x * y for x, y in zip(tup1, tup2))\n\n    # Method 2: Using list comprehension\n    def method2(tuples_list):\n        return [x * y for tup in tuples_list for x, y in tup]\n\n    # Method 3: Using map() and lambda function\n    def method3(tuples_list):\n        return list(map(lambda tup: tuple(map(lambda x: x * element, tup) for element in tuples_list[0]), tuples_list))\n\n    # Testing the methods\n    test_cases = [\n        [(2, 3), (4, 5), (6, 7), (2, 8)],\n        [(11, 22), (33, 55), (55, 77), (11, 44)]\n    ]\n\n    results = {\n        \"Method 1\": method1,\n        \"Method 2\": method2,\n        \"Method 3\": method3\n    }\n\n    for tup_list, expected in test_cases:\n        actual_results = [results[method][tup_list] for method in results]\n        print(f\"Test Case: {tup_list}\")\n        print(f\"Expected: {expected}\")\n        print(f\"Actual: {actual_results}\")\n        assert actual_results == expected, f\"Method {method} failed for input {tup_list}\"\n        print()\n\n# Call the main function to run the tests\nmain()"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tuple_list, element_list):\n    \"\"\"\n    Count the occurrence of all elements in the list within a tuple.\n    \n    Args:\n        tuple_list (tuple): A tuple containing elements to be checked.\n        element_list (list): A list of elements to count occurrences of in tuple_list.\n        \n    Returns:\n        int: The total count of occurrences of elements in element_list within tuple_list.\n    \"\"\"\n    count = 0\n    for element in element_list:\n        count += tuple_list.count(element)\n    return count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(lst):\n    \"\"\"\n    Function to find cubes of individual elements in a list.\n    \n    Args:\n        lst (list): A list of integers.\n        \n    Returns:\n        list: A list containing the cubes of the elements in the input list.\n    \"\"\"\n    return [x**3 for x in lst]"}
{"task_id": "Mbpp/448", "solution": "def sum_two_integers(x, y):\n    # Calculate the sum of x and y\n    sum = x + y\n    \n    # Check if the sum is between 15 and 20 (inclusive on 15, exclusive on 20)\n    if 15 <= sum < 20:\n        return 20\n    else:\n        return sum\n\n# Test the 'sum' function with different sets of input values"}
{"task_id": "Mbpp/450", "solution": "def extract_string(str_list1, l):\n    \"\"\"\n    Extract strings of a specified length from a list of string values.\n\n    Args:\n        str_list1 (list): A list of strings.\n        l (int): The desired length of the extracted strings.\n\n    Returns:\n        list: A list containing strings of length 'l' from 'str_list1'.\n    \"\"\"\n    result = [e for e in str_list1 if len(e) == l]\n    return result\nstr_list1 = ['Python', 'list', 'exercises', 'practice', 'solution']\nl = 8"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(string):\n    return string.replace(' ', '')"}
{"task_id": "Mbpp/453", "solution": "def sum_even_factors(n):\n    \"\"\"Calculate the sum of even factors of a given number n.\"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum\n\n# Test the function with a sample input"}
{"task_id": "Mbpp/454", "solution": "def text_match_wordz(text):\n    \"\"\"\n    Check if the text contains the word 'z'.\n    \n    :param text: The input text to check.\n    :return: True if the word 'z' is found, False otherwise.\n    \"\"\"\n    return 'z' in text.lower()"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    \"\"\"\n    Check if the given month number contains 31 days.\n    \n    Args:\n        month (int): The number representing the month (1-12).\n        \n    Returns:\n        bool: True if the month has 31 days, False otherwise.\n    \"\"\"\n    # Months with 31 days\n    thirty_one_days_months = [1, 3, 5, 7, 8, 10, 12]\n    \n    if month in thirty_one_days_months:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    reversed_list = []\n    for string in string_list:\n        reversed_list.append(string[::-1])\n    return reversed_list"}
{"task_id": "Mbpp/457", "solution": "def find_smallest_in_list(lst):\n    smallest = lst[0]  # Initialize smallest with the first element\n    for val in lst:\n        if val < smallest:\n            smallest = val\n    return smallest\n\n# Test cases\ntest_lists = [\n    [3, 6, 8, 9, 12, 5, 18, 1],\n    [4, 5, 10, 11],\n    [0, 1, 2, 3]\n]\n\nresults = []\nfor test_list in test_lists:\n    smallest_in_list = find_smallest_in_list(test_list)\n    results.append((test_list, smallest_in_list))"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Args:\n        length (int or float): The length of the rectangle.\n        width (int or float): The width of the rectangle.\n\n    Returns:\n        int: The area of the rectangle.\n    \"\"\"\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(input_string):\n    result = ''\n    for char in input_string:\n        if char.islower():\n            result += char\n    return result"}
{"task_id": "Mbpp/460", "solution": "def extract_first_elements(lst):\n    \"\"\"Extract the first element from each sublist in a list of lists.\"\"\"\n    return [first_element for sublist in lst for first_element in sublist]\n\n# Test cases\nlst1 = [[1, 2], [3, 4, 5], [6, 7, 8, 9]]"}
{"task_id": "Mbpp/462", "solution": "from itertools import chain, combinations"}
{"task_id": "Mbpp/463", "solution": "def max_product_subarray(arr):\n    # Initialize variables\n    max_prod = float('-inf')\n    start = 0\n    curr_prod = 1\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # Update current product\n        curr_prod *= arr[i]\n        \n        # Update maximum product if current product is greater\n        if curr_prod > max_prod:\n            max_prod = curr_prod\n            start = i\n    \n    # Return the subarray and its product\n    return arr[start:], max_prod\n\n# Test cases"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    \"\"\"\n    Function to drop empty items from a given dictionary.\n    \n    Args:\n        dictionary (dict): A dictionary containing items, some of which may be None.\n        \n    Returns:\n        dict: The original dictionary with all None values removed.\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product_triplet(arr):\n    n = len(arr)\n    max_product = float('-inf')\n    \n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                current_product = arr[i] * arr[j] * arr[k]\n                if current_product > max_product:\n                    max_product = current_product\n    \n    return max_product\n\n# Test cases"}
{"task_id": "Mbpp/470", "solution": "def largest_prime_factor(n):\n    # Function to find the largest prime factor of a number\n    # Using the method of dividing by 2 until odd, then checking for primality\n    # This method is efficient for large numbers\n    if n <= 1:\n        return None  # Return None for non-positive numbers\n    elif n <= 3:\n        return n  # 2 and 3 are prime numbers\n    elif n % 2 == 0:\n        return 2  # n is even, so the largest prime factor is 2\n    else:\n        # n must be odd at this point, divide by 3 and check for primality\n        while n % 2 == 0:\n            n //= 2\n        return 3 if n > 2 else largest_prime_factor(n)\n\n# Test cases"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    \"\"\"\n    Finds the product of the array elements modulo n.\n    \n    Args:\n    arr (list): A list of integers.\n    n (int): The modulus value.\n    \n    Returns:\n    int: The product of the array elements modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n  # Update product modulo n after each multiplication\n    \n    return product"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    \"\"\"\n    Check if the given list contains consecutive numbers.\n    \n    Args:\n        lst (list): A list of integers.\n        \n    Returns:\n        bool: True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n    # Sort the list in ascending order\n    sorted_lst = sorted(lst)\n    \n    # Check for consecutive numbers\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i + 1] - sorted_lst[i] != 1:\n            return False\n    \n    return True"}
{"task_id": "Mbpp/473", "solution": "def intersection_tuples(list1, list2):\n    # Convert each tuple in list1 and list2 to frozenset for set operations\n    set1 = set(frozenset(tup) for tup in list1)\n    set2 = set(frozenset(tup) for tup in list2)\n    \n    # Find the intersection of the two sets\n    intersection = set1 & set2\n    \n    # Convert the intersection frozenset back to a tuple\n    result = tuple(intersection)\n    \n    return result\n\n# Test cases based on provided snippets\n\n# Test case 1: Intersection of two lists with ordered tuples\nval1 = [(3, 4), (5, 6), (9, 10), (4, 5)]\nval2 = [(5, 4), (3, 4), (6, 5), (9, 11)]"}
{"task_id": "Mbpp/474", "solution": "def replace_char(word, char_to_replace, replacement_char):\n    \"\"\"\n    Replaces all occurrences of a specified character in a string with another character.\n    \n    :param word: The input string.\n    :param char_to_replace: The character to be replaced.\n    :param replacement_char: The character to replace the specified character with.\n    :return: The modified string.\n    \"\"\"\n    return word.replace(char_to_replace, replacement_char)"}
{"task_id": "Mbpp/475", "solution": "from collections import Counter"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    # Check if the array is empty\n    if not arr:\n        return None\n    \n    # Find the minimum and maximum values\n    min_val = min(arr)\n    max_val = max(arr)\n    \n    # Calculate the sum of the minimum and maximum values\n    big_sum = min_val + max_val\n    \n    return big_sum"}
{"task_id": "Mbpp/477", "solution": "def is_lower(input_str):\n    \"\"\"\n    Converts the given string to lower case.\n    \n    :param input_str: The input string to convert to lower case.\n    :return: The input string converted to lower case.\n    \"\"\"\n    return input_str.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(input_str):\n    result = \"\"\n    for char in input_str:\n        if char.isupper():\n            result += char\n    return result"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(number):\n    \"\"\"\n    Returns the first digit of the given number.\n    \n    :param number: An integer.\n    :return: The first digit of the number.\n    \"\"\"\n    # Convert the number to a string to easily access the first character\n    first_char = str(number)[0]\n    \n    # Check if the number is positive to avoid negative sign issues\n    if first_char >= '0':\n        return int(first_char)\n    else:\n        return None  # or raise an exception if negative numbers are not allowed"}
{"task_id": "Mbpp/554", "solution": "def splitevenodd(A):\n    evenlist = []\n    oddlist = []\n    for i in A:\n        if (i % 2 == 0):\n            evenlist.append(i)\n        else:\n            oddlist.append(i)\n    print(\"Even lists:\", evenlist)\n    print(\"Odd lists:\", oddlist)\n\n# Driver Code\nA = list()\nn = int(input(\"Enter the size of the First List ::\"))"}
{"task_id": "Mbpp/555", "solution": "def sum_of_cubes(n):\n    # Mathematical formula to calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes_formula = n * (n + 1) // 2 * 3\n    return sum_of_cubes_formula\n\n# Testing the function with provided examples\nexamples = [\n    (4, 3012),  # Input: N = 4, Output: 3012\n    (5, 55),   # Input: N = 5, Output: 55\n    (3, 1.442250),  # Input: n = 3, Output: Cubic Root is approximately 1.442250\n    (5, 210),  # Input: N = 5, Output: Absolute difference is 210\n]\n\n# Iterate through the examples and print results\nfor n, expected in examples:\n    result = sum_of_cubes(n)\n    print(f\"Input: {n}\")\n    print(f\"Output: {result}\")\n    if result == expected:\n        print(\"Correct!\")\n    else:\n        print(f\"Expected {expected}, but got {result}.\")"}
{"task_id": "Mbpp/556", "solution": "def count_pairs_with_odd_xor(arr):\n    # Initialize count of pairs with odd XOR to 0\n    count = 0\n    \n    # Iterate through all unique pairs (i, j) where 0 <= i < j < len(arr)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            # Calculate XOR of arr[i] and arr[j]\n            xor_result = arr[i] ^ arr[j]\n            # Check if XOR result is odd\n            if xor_result % 2 != 0:\n                count += 1\n                \n    return count\n\n# Test cases"}
{"task_id": "Mbpp/557", "solution": "def toggle_case(string):\n    \"\"\"\n    This function toggles the case of each character in a given string.\n    It uses the built-in Python functions `swapcase` and ASCII values to achieve this.\n    \"\"\"\n    return string.swapcase()\n\n# Test cases\noriginal_string = \"Python PROgrams\"\ntoggled_string = toggle_case(original_string)"}
{"task_id": "Mbpp/558", "solution": "import math"}
{"task_id": "Mbpp/559", "solution": "def max_subarray_sum(arr, k):\n    \"\"\"\n    Given an array arr of size N and an integer K, the task is to find the maximum sum subarray of size k among all contiguous sub-array (considering circular subarray also).\n    \"\"\"\n    # Initialize variables\n    max_sum = float('-inf')\n    start_index = 0\n    end_index = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Check if the current subarray of size k starts and ends at index i\n        if i - start_index + 1 == k:\n            current_sum = sum(arr[i:start_index + 1])\n            # Update max_sum if the current sum is greater and subarray length is k\n            if current_sum > max_sum and len(arr[i:start_index + 1]) == k:\n                max_sum = current_sum\n                start_index = i\n                end_index = start_index + k - 1\n\n    return max_sum, start_index, end_index\n\n# Test cases\narr = [18, 4, 3, 4, 5, 6, 7, 8, 2, 10]\nk = 3"}
{"task_id": "Mbpp/560", "solution": "def is_sorted_non_decreasing(lst):\n    \"\"\"Check if a list is sorted in non-decreasing order.\"\"\"\n    return all(x <= y for x, y in zip(lst, lst[1:]))\n\n# Test cases"}
{"task_id": "Mbpp/562", "solution": "def find_longest_sublist(nested_list):\n    # Initialize variables to track the longest sub-list\n    longest_sublist = []\n    max_length = 0\n\n    # Iterate through each sub-list in the nested list\n    for sub_list in nested_list:\n        # Check if the current sub-list is longer than the current longest\n        if len(sub_list) > max_length:\n            longest_sublist = sub_list\n            max_length = len(sub_list)\n\n    return longest_sublist\n\n# Test cases\ntest_cases = [\n    [['Paras', 90], ['Jain', 32], ['Geeks', 120], ['for', 338], ['Labs', 532]],\n    [['Geek', 90], ['For', 32], ['Geeks', 120]],\n    [[1, 2], [3, 4, 5], [6]],\n    [[5], [9, 3, 1, 4], [3, 2], [4, 7, 8, 3, 1, 2], [3, 4, 5]],\n    [\"Hello world this is Python\", \"Python\"]\n]\n\n# Run tests\nfor test in test_cases:\n    result = find_longest_sublist(test)\n    print(f\"Input: {test}\")\n    print(f\"Output: {result}\")\n    print(f\"Explanation: {find_longest_sublist.__doc__}\")"}
{"task_id": "Mbpp/563", "solution": "import re"}
{"task_id": "Mbpp/564", "solution": "def find_unique_pairs(arr):\n    # Create an empty set to store unique pairs\n    unique_pairs = set()\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Check if the current element is the same as the next one\n        if i + 1 < len(arr) and arr[i] == arr[i + 1]:\n            # If so, it forms a unique pair with the next element\n            unique_pairs.add((arr[i], arr[i + 1]))\n\n    # Return the count of unique pairs\n    return len(unique_pairs)\n\n# Test cases"}
{"task_id": "Mbpp/565", "solution": "def split_string_into_characters(input_string):\n    \"\"\"\n    This function splits a given string into a list of its characters.\n    \n    Parameters:\n    input_string (str): The string to be split into characters.\n    \n    Returns:\n    list: A list containing all the characters of the input string.\n    \"\"\"\n    return list(input_string)\n\n# Test cases\ntest_cases = [\n    {\"description\": \"Split a String into Characters in Python\", \"input_string\": \"Python For Beginners\", \"expected_output\": ['P', 'y', 't', 'h', 'o', 'n', ' ', 'F', 'o', 'r', ' ', 'B', 'e', 'g', 'i', 'n', 'n', 'e', 'r', 's']},\n    {\"description\": \"Split a String into Characters in Python\", \"input_string\": \"Python For Beginners\", \"expected_output\": ['P', 'y', 't', 'h', 'o', 'n', ' ', 'F', 'o', 'r', ' ', 'B', 'e', 'g', 'i', 'n', 'n', 'e', 'r', 's']},\n    {\"description\": \"Split a String into Characters in Python\", \"input_string\": \"GeeksforGeeks\", \"expected_output\": ['G', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'G', 'e', 'e', 'k', 's']},\n    {\"description\": \"Split a String into Characters in Python\", \"input_string\": \"1234567891234567\", \"expected_output\": [1, 2, 3, 4, 5, 6, 7, 8, 9]},\n    {\"description\": \"Split a String into Characters in Python\", \"input_string\": \"Hello World!\", \"expected_output\": ['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!']},\n    {\"description\": \"Split a String into Characters in Python\", \"input_string\": \"PythonOnWeb\", \"expected_output\": ['P', 'y', 't', 'h', 'o', 'n', ' ', 'O', 'n', ' ', 'W', 'e', 'b']}\n]\n\n# Run test cases\nfor test in test_cases:\n    result = split_string_into_characters(test[\"input_string\"])\n    print(f\"Input: {test['input_string']} -> Expected Output: {test['expected_output']} -> Actual Output: {result}\")\n    assert result == test['expected_output'], f\"Test failed for input '{test['input_string']}'\"\n    print(\"PASS\")"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    \"\"\"Return the sum of the digits of a non-negative integer n.\"\"\"\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "solution": "def is_sorted(lst):\n    # Check if the list is empty\n    if not lst:\n        return True\n    \n    # Check if the list has one element\n    if len(lst) == 1:\n        return True\n    \n    # Compare each pair of consecutive elements\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    \n    return True\n\n# Test cases"}
{"task_id": "Mbpp/568", "solution": "def create_empty_dictionaries(n):\n    \"\"\"\n    Creates a list of 'n' empty dictionaries.\n\n    Args:\n        n (int): The number of empty dictionaries to create.\n\n    Returns:\n        list: A list containing 'n' empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(n)]\n\ndef check_empty_dictionaries(lst):\n    \"\"\"\n    Checks if all dictionaries in a given list are empty.\n\n    Args:\n        lst (list): A list of dictionaries.\n\n    Returns:\n        bool: True if all dictionaries in the list are empty, False otherwise.\n    \"\"\"\n    for d in lst:\n        if not isinstance(d, dict) or not d:\n            return False\n    return True\n\ndef initialize_with_keys(lst):\n    \"\"\"\n    Initializes a list of dictionaries with keys but empty values.\n\n    Args:\n        lst (list): A list of keys.\n\n    Returns:\n        list: A list of dictionaries with keys from 'lst' and empty values.\n    \"\"\"\n    return [{key: '' for key in keys} for keys in lst]\n\ndef convert_keys_to_dictionaries(keys):\n    \"\"\"\n    Converts a list of keys into a list of empty dictionaries.\n\n    Args:\n        keys (list): A list of keys.\n\n    Returns:\n        list: A list of empty dictionaries with keys from 'keys'.\n    \"\"\"\n    return [{} for _ in keys]\n\n# Testing the functions\nn = 5\nempty_dicts = create_empty_dictionaries(n)"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(sublists):\n    # Function to sort a single sublist\n    def sort_sublist(sublist):\n        return sorted(sublist)\n\n    # Apply the sorting function to each sublist in the main list\n    return [sort_sublist(sublist) for sublist in sublists]"}
{"task_id": "Mbpp/572", "solution": "def unique_nums(nums):\n    \"\"\"Return a list of numbers occurring only once in the given list (nums).\"\"\"\n    return [i for i in nums if nums.count(i) == 1]\n\n# Test cases\ntest_cases = [\n    ([1, 2, 3, 2, 3, 4, 5], \"After removing the duplicate numbers from the said list: [1, 4, 5]\"),\n    ([1, 2, 3, 2, 4, 5], \"After removing the duplicate numbers from the said list: [1, 3, 4, 5]\"),\n    ([1, 2, 3, 4, 5], \"After removing the duplicate numbers from the said list: [1, 2, 3, 4, 5]\"),\n]\n\nfor nums, expected in test_cases:\n    print(f\"Original list of numbers: {nums}\")\n    print(f\"After removing the duplicate numbers from the said list: {unique_nums(nums)}\")\n    if unique_nums(nums) == expected:\n        print(\"Correct\")\n    else:\n        print(\"Incorrect\")"}
{"task_id": "Mbpp/573", "solution": "def unique_product(lst):\n    # Convert the list to a set to remove duplicates\n    unique_elements = set(lst)\n    \n    # Initialize the product to 1\n    product = 1\n    \n    # Iterate over the unique elements and multiply them\n    for num in unique_elements:\n        product *= num\n    \n    return product"}
{"task_id": "Mbpp/576", "solution": "def has_ordered_intersection(lst1, lst2):\n    # Convert lists to sets to efficiently find intersection\n    set1 = set(lst1)\n    set2 = set(lst2)\n    \n    # Check if the intersection set maintains the original order\n    # by comparing the sorted versions of both sets\n    return sorted(set1) == sorted(set2)\n\n# Test cases"}
{"task_id": "Mbpp/577", "solution": "def factorial(num):\n    \"\"\"\n    This is a recursive function to find the factorial of an integer.\n\n    Args:\n        num (int): The number for which the factorial is to be calculated.\n\n    Returns:\n        int: The factorial of the given number.\n\n    Raises:\n        ValueError: If the number is negative.\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Factorial is not defined for negative numbers.\")\n    elif num == 0:\n        return 1\n    else:\n        return num * factorial(num - 1)\n\n# Test the factorial function\nnum = 7  # Example input\nresult = factorial(num)"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(t1, t2):\n    # Convert tuples to sets to easily find dissimilar elements\n    set1 = set(t1)\n    set2 = set(t2)\n    \n    # Find the elements in set1 but not in set2\n    dissimilar_in_t1 = set1 - set2\n    \n    # Find the elements in set2 but not in set1\n    dissimilar_in_t2 = set2 - set1\n    \n    # Combine both sets of dissimilar elements\n    dissimilar_elements = dissimilar_in_t1.union(dissimilar_in_t2)\n    \n    return list(dissimilar_elements)"}
{"task_id": "Mbpp/580", "solution": "def process_tuples(tuples_list):\n    \"\"\"\n    This function processes a list of tuples by unpacking nested tuples and returning a flattened list.\n\n    Args:\n        tuples_list (list): A list of tuples.\n\n    Returns:\n        list: A flattened list resulting from unpacking nested tuples.\n    \"\"\"\n    def unpack_nested_tuple(t):\n        \"\"\"\n        Helper function to unpack nested tuples.\n        \"\"\"\n        if isinstance(t, tuple):\n            return [unpack_nested_tuple(x) for x in t]\n        else:\n            return [t]\n\n    return [unpack_nested_tuple(t) for t in tuples_list]\n\n# Test cases\ntuples_list = [\n    ((4, (5, 'Gfg')), (7, (8, 6))),\n    ([1, 2, 3, 4, 5], (6, 7, 8))\n]\n\n# Expected output: [(4, 5, 'Gfg'), (7, 8, 6), 1, 2, 3, 4, 5, 6, 7, 8]\nflattened_list = process_tuples(tuples_list)"}
{"task_id": "Mbpp/581", "solution": "import math"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    # Base case: Catalan number for n = 0 and n = 1 is 1\n    if n == 0 or n == 1:\n        return 1\n\n    # Initialize the catalan array for dynamic programming\n    catalan = [0] * (n + 1)\n    catalan[0] = 1  # Catalan number for n = 0\n    catalan[1] = 1  # Catalan number for n = 1\n\n    # Compute the catalan numbers using dynamic programming\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] = catalan[i] + catalan[j] * catalan[i - j - 1]\n\n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    \n    # Return the first n items from the sorted list\n    return sorted_items[:n]\nitems = [{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}]\nn = 1"}
{"task_id": "Mbpp/586", "solution": "import numpy as np"}
{"task_id": "Mbpp/587", "solution": "def convert_list_to_tuple(lst):\n    \"\"\"\n    Converts a list to a tuple.\n\n    Args:\n        lst (list): A list containing elements to be converted to a tuple.\n\n    Returns:\n        tuple: The list converted to a tuple.\n    \"\"\"\n    return tuple(lst)\n\n# Test the function\nlistx = [5, 10, 7, 4, 15, 3]\ntuplex = convert_list_to_tuple(listx)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(lst):\n    \"\"\"\n    Function to find the difference between the largest and smallest value in a given list.\n    \n    Args:\n        lst (list): A list of integers.\n        \n    Returns:\n        int: The difference between the largest and smallest value in the list.\n    \"\"\"\n    if not lst:\n        return 0\n    \n    min_val = min(lst)\n    max_val = max(lst)\n    \n    return max_val - min_val"}
{"task_id": "Mbpp/589", "solution": "import math"}
{"task_id": "Mbpp/590", "solution": "import cmath"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    # Swapping the first and last elements\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "def sum_consecutive_numbers(limit):\n    base = 0\n    num = 1\n    num_total = 0\n    calculation = \"The consecutive sum: \"\n\n    while base < limit:\n        calculation += f\"{num} + \"\n        base += num\n        num += 1\n\n    calculation = calculation[:-3]  # Remove the extra +\n    print(f\"{calculation} = {base}\")\n\n    # Test cases\n    print(\"Limit: 10\")\n    sum_consecutive_numbers(10)\n\n    print(\"Limit: 18\")\n    sum_consecutive_numbers(18)\n\n# Test cases\nsum_consecutive_numbers(10)\nsum_consecutive_numbers(18)"}
{"task_id": "Mbpp/593", "solution": "import re"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(numbers):\n    \"\"\"\n    Calculate the difference between the first even and the first odd number in the list.\n    \n    Args:\n        numbers (list): A list of integers.\n        \n    Returns:\n        int: The difference between the first even and the first odd number in the list.\n    \"\"\"\n    # Check if the list contains at least one even and one odd number\n    if not any(num % 2 == 0 for num in numbers) or not any(num % 2 != 0 for num in numbers):\n        raise ValueError(\"List must contain at least one even and one odd number.\")\n    \n    # Find the first even and first odd numbers\n    first_even = next(num for num in numbers if num % 2 == 0)\n    first_odd = next(num for num in numbers if num % 2 != 0)\n    \n    # Calculate the difference\n    return first_even - first_odd"}
{"task_id": "Mbpp/596", "solution": "import sys"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    # Merge the two sorted arrays into one sorted array\n    merged = sorted(arr1 + arr2)\n    \n    # Return the kth element from the merged array\n    return merged[k - 1]"}
{"task_id": "Mbpp/598", "solution": "def is_armstrong_number(num):\n    # Convert the number to string to easily access each digit\n    num_str = str(num)\n    num_digits = len(num_str)\n    \n    # Initialize the sum of cubes of digits\n    sum_cubes = 0\n    \n    for i in range(num_digits):\n        digit = int(num_str[i])\n        sum_cubes += digit ** num_digits\n    \n    # Check if the sum of cubes equals the original number\n    return num == sum_cubes\n\n# Test cases based on the snippets provided\n# Test case 1: GeeksforGeeks example"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    \"\"\"\n    Calculate the sum and average of the first n natural numbers.\n    \n    Args:\n        n (int): The number of natural numbers to consider.\n        \n    Returns:\n        Tuple: A tuple containing the sum and average of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    \n    # Calculate the average\n    average_n = sum_n / n\n    \n    return sum_n, average_n"}
{"task_id": "Mbpp/600", "solution": "def is_Even(n):\n    \"\"\"\n    Check if the given number is even.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(string):\n    \"\"\"\n    Finds the first repeated character in a given string.\n\n    :param string: The input string.\n    :return: The first repeated character in the string, or None if no repetition is found.\n    \"\"\"\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            return char  # First repeated character found\n        char_count[char] = 1\n\n    return None  # No repeated character found"}
{"task_id": "Mbpp/603", "solution": "def count_zeros_in_numbers(n):\n    count = 0\n    for i in range(1, n + 1):\n        if '0' in str(i):\n            count += 1\n    return count\n\n# Test cases"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s):\n    # Split the string into words\n    words = s.split()\n    \n    # Reverse the order of words using a list\n    reversed_words = ' '.join(words[::-1])\n    \n    return reversed_words"}
{"task_id": "Mbpp/605", "solution": "def check_prime(n):\n    \"\"\"\n    Check if a number is prime.\n    \n    Args:\n        n (int): The number to be checked for primality.\n        \n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    # 0 and 1 are not prime numbers\n    if n <= 1:\n        return False\n    \n    # No need to check further than the square root of n\n    # because a larger factor of n would be a multiple of a smaller factor that has already been checked\n    max_divisor = int(n**0.5) + 1\n    for i in range(2, max_divisor):\n        if n % i == 0:\n            return False\n    return True\n\n# Example usage\nnumber = int(input(\"Enter a positive integer: \"))\nif check_prime(number):\n    print(f\"{number} is a prime number.\")\nelse:\n    print(f\"{number} is not a prime number.\")"}
{"task_id": "Mbpp/606", "solution": "import math\ndef radian_degree(degrees):\n    \"\"\"\n    Convert degrees to radians.\n    \n    :param degrees: int or float representing degrees\n    :return: float representing radians\n    \"\"\"\n    return degrees * (math.pi / 180)"}
{"task_id": "Mbpp/607", "solution": "import re"}
{"task_id": "Mbpp/608", "solution": "def bell_number(n):\n    \"\"\"\n    Calculate the nth Bell number.\n    \"\"\"\n    # Initialize a 2D list for Stirling numbers of the second kind\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    # Fill the table using dynamic programming\n    for i in range(n + 1):\n        for j in range(n + 1):\n            if j > i:\n                dp[i][j] = 0\n            elif i == j:\n                dp[i][j] = 1\n            elif i == 0 or j == 0:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = j * dp[i - 1][j] + dp[i - 1][j - 1]\n    \n    # Sum up Stirling numbers for all j from 0 to n to get the Bell number\n    ans = 0\n    for i in range(n + 1):\n        ans += dp[n][i]\n    \n    return ans\n\n# Test the bell_number function\nn = 3\nresult = bell_number(n)"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(n_list, kth_position):\n    \"\"\"\n    Removes the element at the kth position from the given list and returns the updated list.\n    \n    Parameters:\n    n_list (list): The original list of integers.\n    kth_position (int): The position of the element to be removed (0-indexed).\n    \n    Returns:\n    list: The updated list after removing the kth element.\n    \"\"\"\n    # Adjust kth_position to 1-based index\n    kth_position = kth_position + 1\n    \n    # Use slicing to remove the kth element\n    return n_list[:kth_position] + n_list[kth_position:]\nn_list = [1, 1, 2, 3, 4, 4, 5, 1]\nkth_position = 3"}
{"task_id": "Mbpp/611", "solution": "\n# Test cases\ntest_cases = [\n    ({\"description\": \"A Computer Science portal for geeks...\", \"snippets\": [...]},\n     \"3\"),\n    ({\"description\": \"Given an image represented by m x n matrix...\", \"snippets\": [...]},\n     \"2\"),\n    ({\"description\": \"Given a square matrix mat[][] of order n*n...\", \"snippets\": [...]},\n     \"1\"),\n    ({\"description\": \"Given a m x n matrix...\", \"snippets\": [...]},\n     \"2\")\n]\n\n# Iterate through test cases and print results\nfor case in test_cases:\n    matrix = case[0][\"snippets\"][0]  # Extract the matrix from the first snippet\n    n = case[0][\"snippets\"][1]  # Extract the column index N from the first snippet\n    \n    print(f\"Input Matrix:\\n{matrix}\\n\")\n    max_value = max_in_nth_column(matrix)\n    print(f\"Output: {max_value}\")"}
{"task_id": "Mbpp/612", "solution": "def first_element_of_each_sublist(sublists):\n    \"\"\"\n    This function takes a list of sublists and returns a new list containing\n    the first element of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in sublists]\n\n# Test cases\nsublists = [\n    [[1], [2], [3]],  # Expected output: [1]\n    [[4], [5], [6]],  # Expected output: [4]\n    [[7], [8], [9]],  # Expected output: [7]\n    [[10], [11], [12]],  # Expected output: [10]\n    [[13], [14], [15]],  # Expected output: [13]\n]\n\n# Run tests\nresults = [first_element_of_each_sublist(sublists_i) for sublists_i in sublists]\nfor i, result in enumerate(results):\n    print(f\"Test case {i+1}: {result} (Expected: {sublists_i[0]})\")"}
{"task_id": "Mbpp/614", "solution": "def sum_nested_tuple_elements(tup):\n    \"\"\"\n    This function calculates the sum of the first elements of each nested tuple in the given tuple.\n    \"\"\"\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Iterate over each element in the tuple\n    for element in tup:\n        # Check if the element is a tuple\n        if isinstance(element, tuple):\n            # If it's a tuple, sum the first elements\n            total_sum += sum(first_element for first_element in element if isinstance(first_element, (int, float)))\n        else:\n            # If it's not a tuple, assume it's an integer or float and add it directly\n            total_sum += element\n    \n    return total_sum\n\n# Test cases\ntest_cases = [\n    (5, (6, (1, (9, None)))),  # Expected output: 21\n    (5, (6, (1, None))),       # Expected output: 12\n    ([2, 1, 5], [1, 5, 7], [5, 6, 5]),  # Expected output: 18\n    (5, (6, (1, None)))          # Expected output: 12\n]\n\n# Run tests\nfor test in test_cases:\n    result = sum_nested_tuple_elements(test[0])\n    print(f\"Input: {test[0]} -> Output: {result}\")\n    if result == test[1]:\n        print(\"PASS\")\n    else:\n        print(\"FAIL\")"}
{"task_id": "Mbpp/615", "solution": "def average_tuple_of_tuples(nums):\n    # Unpack the tuples using zip(*nums)\n    unpacked = list(zip(*nums))\n    \n    # Calculate the sum of elements for each position across all inner tuples\n    sums = [sum(t) for t in unpacked]\n    \n    # Divide the sum by the number of inner tuples to get the average for each position\n    averages = [sums[i] / len(sums) for i in range(len(sums))]\n    \n    return averages\n\n# Test cases\nnums1 = ((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    \"\"\"\n    Perform element-wise modulo operation on two tuples of the same length.\n    \n    Args:\n        t1, t2: Tuples of the same length.\n        \n    Returns:\n        Tuple with elements being the result of element-wise modulo operation.\n    \"\"\"\n    return tuple(a % b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    \"\"\"\n    Divide each element of list1 by the corresponding element in list2.\n    \n    :param list1: A list of numbers.\n    :param list2: A list of numbers.\n    :return: A new list where each element is the result of dividing the corresponding elements from list1 and list2.\n    \"\"\"\n    return [a / b if b != 0 else float('inf') for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_special_chars_to_end(string):\n    \"\"\"\n    This function takes a string and moves all special characters to the end of the string.\n    Special characters include anything that is not a letter or a digit.\n    \"\"\"\n    special_chars = []\n    for char in string:\n        if not char.isalpha() and not char.isdigit():\n            special_chars.append(char)\n    return ''.join(string[i] for i in range(len(string)) if not special_chars[i])\n\n# Test cases\ntest_cases = [\n    (\"Geeksforgeeks A Computer Science Portal for Geeks!!\", \"GeeksforgeeksA Computer Science Portal for Geeks\"),\n    (\"Hello, World!\", \"HelloWorld\"),\n    (\"!@# $%& *() Geeksforgeeks\", \"!@#$%&*() Geeksforgeeks\"),\n    (\"123456\", \"123456\"),\n    (\"Geeks for Geeks\", \"Geeks for Geeks\")\n]\n\nfor test in test_cases:\n    assert move_special_chars_to_end(test[0]) == test[1], f\"Failed for string: {test[0]} Expected: {test[1]} But got: {move_special_chars_to_end(test[0])}\"\n    print(f\"Test case {test[0]} passed.\")\n\n# Additional test case from the problem description\nadditional_test = (\"Move all special char to the end of the String - GeeksforGeeks\", \"Move all special char to the end of the String - GeeksforGeeks\")\nassert move_special_chars_to_end(additional_test[0]) == additional_test[1], f\"Failed for string: {additional_test[0]} Expected: {additional_test[1]} But got: {move_special_chars_to_end(additional_test[0])}\""}
{"task_id": "Mbpp/620", "solution": "def largest_divisible_subset(nums):\n    \"\"\"\n    :type nums: list[int]\n    :rtype: int\n    \"\"\"\n    # Sort the list to ensure that when checking divisibility, we consider the smallest number first\n    nums.sort()\n\n    # Initialize a list to store the maximum length found so far for each index\n    dp = [1] * len(nums)\n\n    # Iterate through the sorted list\n    for i in range(1, len(nums)):\n        # Check if the current number is divisible by any number before it\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                # Update the maximum length at the current index\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    # The answer is the maximum length found in the dp list\n    return max(dp)\n\n# Example usage:\nnums = [3, 6, 12, 24, 26, 39]"}
{"task_id": "Mbpp/622", "solution": "def find_median_of_two_sorted_arrays(a, b):\n    # Merge the two arrays into one sorted array\n    merged = sorted(a + b)\n    \n    # Determine the length of the merged array\n    n = len(merged)\n    \n    # Check if the length is even or odd\n    if n % 2 == 0:\n        # If even, the median is the average of the two middle elements\n        return (merged[n // 2 - 1] + merged[n // 2]) / 2\n    else:\n        # If odd, the median is the middle element\n        return merged[n // 2]\n\n# Test cases"}
{"task_id": "Mbpp/623", "solution": "def square_numbers(nums):\n    \"\"\"Calculate the square of each number in the list and return a new list with the results.\"\"\"\n    square_nums = []\n    for num in nums:\n        square_num = num ** 2\n        square_nums.append(square_num)\n    return square_nums\n\n# Test the function with the provided example\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"}
{"task_id": "Mbpp/624", "solution": "import requests"}
{"task_id": "Mbpp/626", "solution": "import math"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    return string.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "solution": "def separate_even_odd(numbers):\n    \"\"\"\n    Splits a list of numbers into two lists: one for even numbers and one for odd numbers.\n    \"\"\"\n    evens = [num for num in numbers if num % 2 == 0]\n    odds = [num for num in numbers if num % 2 != 0]\n    return evens, odds\n\n# Test cases\na = [10, 20, 30, 40, 50, 60]\nevens, odds = separate_even_odd(a)"}
{"task_id": "Mbpp/630", "solution": "def find_adjacent_coordinates(tup, center):\n    \"\"\"\n    Finds all adjacent coordinates around a given point in a multidimensional tuple.\n\n    Parameters:\n    tup (tuple): A multidimensional tuple representing the coordinates.\n    center (tuple): The center point for which we want to find adjacent coordinates.\n\n    Returns:\n    list of lists: A list containing lists of coordinates that are adjacent to the center point.\n    \"\"\"\n    # Function to get all coordinates at a given distance in n-dimensional space\n    def get_adjacent_coords(coords, center, distance):\n        if len(coords) == 1 and len(center) == 1:\n            return [[center[0], center[1]] if abs(center[0] - coords[0]) <= distance and abs(center[1] - coords[1]) <= distance else [] for coords in coords]\n        else:\n            # Recursively get adjacent coordinates for each dimension\n            adjacent_coords = []\n            for coord in coords:\n                new_coords = list(coord)\n                for i in range(len(new_coords)):\n                    new_coords[i] += distance\n                    if new_coords[i] < coord[i]:\n                        new_coords[i] += 1\n                adjacent_coords.extend(get_adjacent_coords(coords, coord, distance))\n            return adjacent_coords\n\n    # Get all coordinates\n    all_coords = [item for sublist in tup for item in sublist]\n\n    # Calculate the distance to consider for adjacency\n    distance = 1\n\n    # Get all adjacent coordinates\n    adjacent_coords = get_adjacent_coords(all_coords, center, distance)\n\n    return adjacent_coords\n\n# Test cases\ntest_cases = [\n    (3, 4, [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]),\n    (5, 6, [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7], [5, 4], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]])\n]\n\nfor test in test_cases:\n    result = find_adjacent_coordinates(test[0], test[1])\n    print(f\"Input: {test[0]}, {test[1]} -> Output: {result}\")"}
{"task_id": "Mbpp/631", "solution": "def replace_whitespace_with_underscore(text):\n    \"\"\"\n    Replace whitespaces with underscores and vice versa.\n    \n    Args:\n        text (str): The input string to be processed.\n        \n    Returns:\n        str: The modified string with whitespaces replaced by underscores and vice versa.\n    \"\"\"\n    # Replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n    \n    return text\n\n# Test the function with sample inputs\ntext1 = \"Python Exercises\"\ntext2 = \"This should be connected\"\n\n# Replace whitespaces with underscores\nresult1 = replace_whitespace_with_underscore(text1)"}
{"task_id": "Mbpp/632", "solution": "def move_zeros_to_end(arr):\n    # Initialize an empty list to store zeros\n    zeros = []\n    \n    # Iterate through the array to collect all zeros\n    for num in arr:\n        if num == 0:\n            zeros.append(num)\n    \n    # Create a new list with non-zero elements in their original order\n    non_zeros = [num for num in arr if num != 0]\n    \n    # Concatenate the list of zeros at the end of the list of non-zeros\n    result = non_zeros + zeros\n    \n    return result\n\n# Test cases"}
{"task_id": "Mbpp/633", "solution": "def find_xor_sum(arr):\n    n = len(arr)\n    xor_sum = 0\n    \n    # Iterate through the array to compute XOR of all pairs\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += arr[i] ^ arr[j]\n    \n    return xor_sum\n\n# Test cases\narr1 = [5, 1, 4]\nassert find_xor_sum(arr1) == 10, \"Test case 1 failed\"\n\narr2 = [7, 9]\nassert find_xor_sum(arr2) == 16, \"Test case 2 failed\"\n\narr3 = [3, 7]\nassert find_xor_sum(arr3) == 8, \"Test case 3 failed\"\n\narr4 = [1, 2, 3, 4, 5, 6, 7]\nassert find_xor_sum(arr4) == 127, \"Test case 4 failed\""}
{"task_id": "Mbpp/635", "solution": "def heapify(arr, n, i):\n    # Find largest among root and children\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and arr[i] < arr[l]:\n        largest = l\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n    # Swap root and largest if they are not in correct order\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        # Heapify the root element\n        heapify(arr, n, largest)\n\ndef heapSort(arr):\n    n = len(arr)\n    # Build a max heap\n    for i in range(n // 2, -1, -1):\n        heapify(arr, n, i)\n    # One by one extract elements from heap\n    for i in range(n - 1, 0, -1):\n        # Move current root to end\n        arr[i], arr[0] = arr[0], arr[i]\n        # Heapify the root element\n        heapify(arr, i, 0)\n\n# Example usage\narr = [1, 12, 9, 5, 6, 10]\nheapSort(arr)"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(amount_spent, amount_earned):\n    \"\"\"\n    Check if the given amount spent and earned result in neither profit nor loss.\n    \n    Args:\n        amount_spent (int): The amount of money spent.\n        amount_earned (int): The amount of money earned.\n        \n    Returns:\n        bool: True if the amount spent equals the amount earned, False otherwise.\n    \"\"\"\n    return amount_spent == amount_earned"}
{"task_id": "Mbpp/638", "solution": "import math"}
{"task_id": "Mbpp/639", "solution": "# Python script to sum the length of names starting with uppercase letters\n\n# Sample list of names\nsample_names = ['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']\n\n# Function to filter names starting with uppercase letters\ndef filter_uppercase_names(names):\n    return [name for name in names if name[0].isupper() and name[1:].islower()]\n\n# Filter the sample names\nfiltered_names = filter_uppercase_names(sample_names)\n\n# Calculate the total length of the filtered names\ntotal_length = len(''.join(filtered_names))\n\n# Print the result"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Check if a number is a nonagonal number.\n    \n    A nonagonal number is a figurate number that extends the concept of triangular and square numbers to the nine-sided polygon (nonagon).\n    The nth nonagonal number is given by the formula: n(7n - 5) / 2.\n    \n    Args:\n        n (int): The position of the nonagonal number.\n        \n    Returns:\n        int: The nth nonagonal number.\n    \"\"\"\n    if n <= 0:\n        return 0  # Base case: 0th nonagonal number is 0\n    \n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/643", "solution": "import string"}
{"task_id": "Mbpp/644", "solution": "def reverse_array_up_to_n(arr, n):\n    \"\"\"\n    Reverse an array up to a given position.\n\n    Args:\n        arr (list): The input array.\n        n (int): The position up to which the array should be reversed.\n\n    Returns:\n        list: The reversed array from the 0th index to (n-1)th index.\n    \"\"\"\n    # Check if n is valid\n    if n > len(arr):\n        return f\"{n} value is not valid\"\n\n    # Reverse the part of the array from 0 to n-1\n    reversed_part = arr[n-1::-1]\n    remaining_part = arr[n:]\n\n    # Concatenate the reversed and remaining parts\n    result = reversed_part + remaining_part\n\n    return result\n\n# Test cases\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = 5"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(original_tuple, dictionary):\n    # Convert the dictionary to a list\n    dict_list = list(dictionary)\n    \n    # Convert the original tuple to a list\n    tuple_list = list(original_tuple)\n    \n    # Use the extend() method to add the dictionary list to the tuple list\n    tuple_list.extend(dict_list)\n    \n    # Convert the list back to a tuple\n    result_tuple = tuple(tuple_list)\n    \n    return result_tuple\noriginal_tuple = (4, 5, 6)\ndictionary = {'best': 3, 'is': 2, 'gfg': 1}"}
{"task_id": "Mbpp/721", "solution": "def max_average_path(matrix):\n    # The dimensions of the matrix\n    N = len(matrix)\n\n    # Initialize a 2D array to store the maximum path sum and the count of paths for each cell\n    max_path_sum = [[-float('inf')] * N for _ in range(N)]\n    path_count = [[0] * N for _ in range(N)]\n\n    # Base case: Starting point (0, 0)\n    max_path_sum[0][0] = matrix[0][0]\n    path_count[0][0] = 1\n\n    # Fill the 2D array using dynamic programming\n    for i in range(1, N):\n        for j in range(1, N):\n            # Update max_path_sum and path_count based on the maximum sum from the cell above and the cell to the left\n            max_path_sum[i][j] = max(max_path_sum[i-1][j], max_path_sum[i][j-1]) + matrix[i][j]\n            path_count[i][j] = path_count[i-1][j] + path_count[i][j-1]\n\n    # Calculate the maximum average path\n    total_cells = sum(path_count[i][N-1] for i in range(N))\n    max_average = max_path_sum[N-1][N-1] / total_cells if total_cells != 0 else 0\n\n    return max_average\n\n# Test the function with the provided examples\nmatrix1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"task_id": "Mbpp/722", "solution": "def create_student_dict():\n    \"\"\"\n    Create a dictionary mapping student names to their exam grades.\n    Given a tuple of student names and their corresponding exam grades.\n    \n    Args:\n        names (tuple): A tuple containing student names as strings.\n        grades (tuple): A tuple containing student grades as floats.\n        \n    Returns:\n        dict: A dictionary with student names as keys and their corresponding exam grades as values.\n    \"\"\"\n    # Unpack the tuples into separate variables\n    names = tuple(names)\n    grades = tuple(grades)\n    \n    # Create a dictionary using dict constructor\n    student_dict = dict(zip(names, grades))\n    \n    # Add a new student\n    student_dict['Ryan'] = 0.34\n    \n    return student_dict\n\n# Test the function\nnames = ('Ashley', 'David', 'Edward', 'Zoe')\ngrades = (0.92, 0.72, 0.88, 0.77)"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    \"\"\"\n    Count the number of indices where the values in two lists are the same.\n    \n    :param list1: A list of integers.\n    :param list2: A list of integers of the same length as list1.\n    :return: The count of indices where list1[i] == list2[i] for all i in range(len(list1)).\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    # Calculate the base to the power\n    result = 1\n    for _ in range(power):\n        result *= base\n    \n    # Convert the result to a string to easily sum its digits\n    result_str = str(result)\n    \n    # Sum all the digits of the result\n    digit_sum = sum(int(digit) for digit in result_str)\n    \n    return digit_sum"}
{"task_id": "Mbpp/725", "solution": "def extract_quoted_strings(text):\n    \"\"\"\n    Extracts values between quotation marks from a string.\n\n    Args:\n        text (str): The input string containing values between quotation marks.\n\n    Returns:\n        list: A list of strings, where each string is the content between quotation marks.\n    \"\"\"\n    # Split the text by quotation marks, assuming an even number of quotation marks\n    # This will give us a list where each element is a string between quotation marks\n    quoted_strings = text.split('\"')\n\n    return quoted_strings\n\n# Example usage:\ninput_text = \"SetVariables \\\"a\\\" \\\"b\\\" \\\"c\\\"\"\nquoted_values = extract_quoted_strings(input_text)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(tup):\n    \"\"\"\n    Function to multiply consecutive elements in a tuple.\n    \n    Args:\n        tup (tuple): A tuple of numbers (t_1, ..., t_{N+1}).\n        \n    Returns:\n        tuple: A tuple of length N where the i-th element is t_i * t_{i+1}.\n    \"\"\"\n    result = []\n    for i in range(len(tup) - 1):\n        result.append(tup[i] * tup[i + 1])\n    return tuple(result)"}
{"task_id": "Mbpp/728", "solution": "def sum_of_first_n_numbers(n):\n    \"\"\"\n    Calculate the sum of the first N numbers.\n    \n    Args:\n        n (int): The number of terms to sum.\n        \n    Returns:\n        int: The sum of the first N numbers.\n    \"\"\"\n    return n * (n + 1) // 2\n\n# Test the function with an example\nn = 5"}
{"task_id": "Mbpp/730", "solution": "def remove_consecutive_duplicates(lst):\n    \"\"\"Remove consecutive duplicates from a list.\"\"\"\n    return [item for i, item in enumerate(lst) if i == 0 or lst[i] != lst[i-1]]\n\n# Test cases\nlst1 = [1, 4, 4, 4, 5, 6, 7, 4, 3, 3, 9]"}
{"task_id": "Mbpp/731", "solution": "import math\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cone given the radius r and height h.\n\n    Args:\n        r (float): The radius of the base of the cone.\n        h (float): The height of the cone.\n\n    Returns:\n        float: The lateral surface area of the cone.\n    \"\"\"\n    # Formula for the lateral surface area of a cone: \u03c0 * r * l\n    # where l is the slant height, calculated as \u221a(r^2 + h^2)\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    \n    :param text: The string to be processed.\n    :return: The modified string with spaces, commas, or dots replaced by colons.\n    \"\"\"\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, num):\n    \"\"\"\n    Finds the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        arr (list): A sorted list of integers.\n        num (int): The number to find in the array.\n\n    Returns:\n        int: The index of the first occurrence of the given number in the array, or -1 if the number is not found.\n    \"\"\"\n    try:\n        return arr.index(num)\n    except ValueError:\n        return -1"}
{"task_id": "Mbpp/734", "solution": "def weekly_sum(daily_visitors):\n    \"\"\"\n    Calculate the sum of weekly visitors from a list of daily visitors.\n\n    :param daily_visitors: List of integers representing daily visitors.\n    :return: List of weekly sums.\n    \"\"\"\n    return [sum(daily_visitors[x:x+7]) for x in range(0, len(daily_visitors), 7)]\n\n# Test the function with the first example from the provided snippets\ndaily = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nweekly_sums = weekly_sum(daily)"}
{"task_id": "Mbpp/735", "solution": "def toglemidlebits(given_numb):\n    # Convert the number to a binary string\n    binary_str = bin(given_numb)[2:]\n    \n    # Initialize an empty string to store the result\n    result = ''\n    \n    # Iterate over the binary string, toggling bits except the first and last\n    for i in range(1, len(binary_str) - 1):\n        # Convert the bit to an integer and toggle it (1 -> 0, 0 -> 1)\n        bit = int(binary_str[i]) \n        result += str(not bit)\n    \n    # Append the first and last bits as they are (no toggling)\n    result += binary_str[0]\n    result += binary_str[-1]\n    \n    # Convert the result string back to an integer\n    return int(result)\n\n# Test the function with an example\ngven_numb = 15  # This should be replaced with any random number for testing"}
{"task_id": "Mbpp/736", "solution": "def index(a, x):\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n\n    Parameters:\n    a (list): The sorted list.\n    x (int): The value to locate the insertion point for.\n\n    Returns:\n    int: The index at which 'x' should be inserted to maintain the sorted order.\n    \"\"\"\n    return bisect.bisect_left(a, x)\n\n# Test cases\na = [1, 2, 4, 5]"}
{"task_id": "Mbpp/737", "solution": "import re"}
{"task_id": "Mbpp/739", "solution": "def find_strong_numbers(nums):\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    strong_numbers = []\n    for num in nums:\n        factorial_sum = sum(factorial(int(digit)) for digit in str(num))\n        if factorial_sum == num:\n            strong_numbers.append(num)\n\n    return strong_numbers\n\n# Test cases"}
{"task_id": "Mbpp/740", "solution": "def convert_tuples_to_dict(tuples_list):\n    \"\"\"\n    Converts a list of tuples into a dictionary where the first element of each tuple is the key and the second element is the value.\n    If a key appears multiple times, its values are grouped together in a list.\n    \"\"\"\n    result_dict = {}\n    for key, value in tuples_list:\n        if key in result_dict:\n            result_dict[key].append(value)\n        else:\n            result_dict[key] = [value]\n    return result_dict\n\n# Test cases\n# Example 1: Single tuple"}
{"task_id": "Mbpp/741", "solution": "def all_equal(s: str) -> bool:\n    \"\"\"Check if a string consists of just one character.\"\"\"\n    return len(set(s)) == 1\n\n# Testing the function with provided examples"}
{"task_id": "Mbpp/742", "solution": "import math"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, k):\n    \"\"\"\n    Rotate a given list to the right by k positions.\n    \n    Args:\n        lst (list): The list to be rotated.\n        k (int): The number of positions to rotate to the right.\n        \n    Returns:\n        list: The rotated list.\n    \"\"\"\n    # Calculate the length of the list\n    n = len(lst)\n    \n    # If k is greater than the length of the list, rotate to the left\n    if k > n:\n        k = k % n\n    \n    # Rotate the list to the right\n    return lst[-k:] + lst[:-k]\nk = 3"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    \"\"\"\n    Check if the given tuple contains any None value.\n    \n    Args:\n        tup (tuple): A tuple containing values.\n        \n    Returns:\n        bool: True if the tuple contains None, False otherwise.\n    \"\"\"\n    for value in tup:\n        if value is None:\n            return True\n    return False"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(start_num, end_num):\n    \"\"\"Return a list of numbers within the range [start_num, end_num] where every number is divisible by every digit it contains.\"\"\"\n    result = [n for n in range(start_num, end_num + 1) if not any(map(lambda x: int(x) == 0 or n % int(x) != 0, str(n)))]\n    return result"}
{"task_id": "Mbpp/748", "solution": "import re"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(nums_str):\n    # Convert each numeric string to an integer and store the result in 'result'\n    result = [int(x) for x in nums_str]\n    \n    # Sort the 'result' list in ascending order\n    result.sort()\n    \n    # Return the sorted list of integers\n    return result\nnums_str = ['4', '12', '45', '7', '0', '100', '200', '-12', '-500']"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    \"\"\"\n    Adds a tuple to a list.\n    \n    Args:\n        lst (list): The original list.\n        tup (tuple): The tuple to be added.\n        \n    Returns:\n        list: The updated list with the tuple appended.\n    \"\"\"\n    lst.extend(tup)\n    return lst"}
{"task_id": "Mbpp/751", "solution": "def is_min_heap(arr, n):\n    # Base case: if the array has less than 2 elements, it trivially represents a min-heap\n    if len(arr) < 2:\n        return True\n    \n    # Check the root node\n    root = arr[0]\n    left_child = 2 * 0 + 1  # Index of left child\n    right_child = 2 * 0 + 2  # Index of right child\n    \n    # If either left child or right child is out of bounds, it's a leaf node\n    if left_child >= n or right_child >= n:\n        return False\n    \n    # Check if the left child is greater than the root\n    if arr[left_child] > root:\n        return is_min_heap(arr, n - 1)  # Recur for the left subtree\n    \n    # If the left child condition fails, the root is a leaf node\n    return False\n    \n    # If the left child condition passes, check the right child\n    if arr[right_child] > root:\n        return is_min_heap(arr, n - 1)  # Recur for the right subtree\n    \n    # If the right child condition passes, the root is a valid internal node\n    return True\n\n# Test cases"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)"}
{"task_id": "Mbpp/753", "solution": "def find_min_k_records(records, k):\n    \"\"\"\n    Finds the K minimum records from a list of tuples where each tuple contains a record (id, score).\n\n    :param records: List of tuples (id, score)\n    :param k: Integer representing the number of minimum records to find\n    :return: List of tuples representing the K minimum records\n    \"\"\"\n    # Method #1: Using sorted and slicing\n    sorted_records = sorted(records, key=lambda x: x[1])\n    return sorted_records[:k]\n\n    # Method #2: Using heapq.nsmallest\n    import heapq\n    return heapq.nsmallest(k, records, key=lambda x: x[1])\n\n    # Method #3: Manual traversal with a for loop\n    min_k_records = []\n    for record in records:\n        if len(min_k_records) < k or record[1] < min(min_k_records, key=lambda x: x[1]):\n            min_k_records.remove(max(min_k_records, key=lambda x: x[1]))\n    return min_k_records\n\n    # Method #4: Explanation of the approach (not a runnable code snippet)\n    # This approach uses two nested for loops to find the minimum value in the list,\n    # and removes it from the list after it has been added to the result list.\n\n    # Method #5: Explanation of the problem formulation (not a runnable code snippet)\n    # In Python, given a list of tuples where each tuple contains records like (id, score),\n    # the task is to find the K minimum records such as scores. For example, given the list\n    # [('a', 10), ('b', 3), ('c', 7), ('d', 5)] and K=2, the desired output would be [('b', 3), ('d', 5)].\n    # This can be achieved using the sorted and slicing method or heapq.nsmallest as shown above.\n\n# Test cases\nrecords = [('a', 10), ('b', 3), ('c', 7), ('d', 5)]\nk = 2"}
{"task_id": "Mbpp/754", "solution": "def find_common_elements(l1, l2):\n    # Convert lists to sets to efficiently find common elements\n    set_l1 = set(l1)\n    set_l2 = set(l2)\n    \n    # Find the intersection of the two sets\n    common_elements = set_l1.intersection(set_l2)\n    \n    return list(common_elements)\n\n# Test cases based on the snippets provided\nl1 = [1, 2, 3, 4, 5, 6, 9, 10]\nl2 = [2, 4, 6, 8, 9]"}
{"task_id": "Mbpp/755", "solution": "def second_largest(numbers):\n    m1, m2 = float('inf'), float('inf')\n    for x in numbers:\n        if x >= m1:\n            m1, m2 = x, m1\n    return m2\n\n# Test cases based on provided snippets"}
{"task_id": "Mbpp/757", "solution": "def count_equal_pairs(s):\n    \"\"\"\n    This function counts the number of equal pairs in a string where a pair is considered equal if its reverse is the same.\n    \"\"\"\n    # Convert the string to a list for easier manipulation\n    s_list = list(s)\n    \n    # Count the occurrences of each character in the list\n    char_count = {}\n    for char in s_list:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    # Count the number of equal pairs\n    equal_pairs_count = 0\n    for count in char_count.values():\n        if count % 2 == 1:\n            equal_pairs_count += count // 2\n    \n    return equal_pairs_count\n\n# Test the function with the provided examples"}
{"task_id": "Mbpp/758", "solution": "import re"}
{"task_id": "Mbpp/759", "solution": "import re"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(lst):\n    \"\"\"\n    Check if a list contains only one distinct element.\n    \n    Args:\n        lst (list): A list of numbers.\n        \n    Returns:\n        bool: True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_elements = set(lst)\n    \n    # Check if the length of the set is 1 (which means all elements are the same)\n    return len(unique_elements) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    \"\"\"\n    Check if the given month number contains 30 days.\n    \n    Args:\n        month (int): The number representing the month (1-12).\n        \n    Returns:\n        bool: True if the month has 30 days, False otherwise.\n    \"\"\"\n    # Define the months with 30 days\n    thirty_days_months = [4, 6, 9, 11]\n    \n    # Check if the given month is in the list of thirty days months\n    return month in thirty_days_months"}
{"task_id": "Mbpp/763", "solution": "def find_smallest_in_list(lst):\n    smallest = lst[0]\n    for num in lst:\n        if num < smallest:\n            smallest = num\n    return smallest\n\n# Test cases\ntest_list = [3, 6, 8, 9, 12, 5, 18, 1]"}
{"task_id": "Mbpp/764", "solution": "def count_digits(n):\n    \"\"\"\n    This function counts the number of digits in a given number 'n'.\n    \"\"\"\n    # Convert the number to a string to handle negative numbers and count digits\n    num_str = str(abs(n))\n    \n    # Initialize a counter for digits\n    count = 0\n    \n    # Iterate over each character in the string representation of the number\n    for digit in num_str:\n        # Only increment the count for digits (0-9)\n        if digit.isdigit():\n            count += 1\n    \n    return count\n\n# Test cases"}
{"task_id": "Mbpp/765", "solution": "def nth_fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n\n# Test cases"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    pairs = []\n    for i in range(len(lst) - 1):\n        pairs.append((lst[i], lst[i + 1]))\n    return pairs"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, sum):\n    count = 0\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == sum:\n                count += 1\n    return count"}
{"task_id": "Mbpp/769", "solution": "def compare_lists(l1, l2):\n    # Using functools.reduce and map to compare lists for equality\n    # by checking if all elements are the same at corresponding indices\n    return functools.reduce(lambda x, y: x and y, map(lambda p, q: p == q, l1, l2), True)\n\n# Test cases\nl1 = [10, 20, 30, 40, 50]\nl2 = [20, 30, 50, 40, 70]\nl3 = [10, 20, 30, 40, 50]"}
{"task_id": "Mbpp/770", "solution": "def count_odd_factors_in_range(n, m):\n    \"\"\"\n    This function calculates the number of elements in the range [n, m] that have an odd number of factors.\n    \"\"\"\n    def count_factors(num):\n        count = 0\n        for i in range(1, int(num**0.5) + 1):\n            if num % i == 0:\n                if num // i == i:\n                    count += 1\n                else:\n                    count += 2\n        return count\n\n    total = 0\n    for num in range(n, m + 1):\n        total += count_factors(num)\n    return total\n\n# Test cases"}
{"task_id": "Mbpp/771", "solution": "def is_balanced_brackets(expr):\n    # Initialize a stack to hold opening brackets\n    stack = []\n    \n    # Traverse the expression string\n    for char in expr:\n        if char == '(' or char == '{' or char == '[':\n            # Push the opening bracket to the stack\n            stack.append(char)\n        else:\n            # If we encounter a closing bracket, check if the stack is empty or contains the matching opening bracket\n            if stack and stack[-1] != char:\n                # If the stack is not empty and the last element is not the matching closing bracket, return False (unbalanced)\n                return False\n            # If the stack is empty, it means we have a closing bracket without a matching opening bracket, return False\n            if not stack:\n                return False\n            # Pop the opening bracket from the stack\n            stack.pop()\n    \n    # If the stack is empty after traversal, the expression is balanced\n    return not stack\n\n# Test cases"}
{"task_id": "Mbpp/772", "solution": "def remove_length(text, k):\n    # Split the text into words\n    words = text.split()\n    \n    # Create a new list to store the words to keep\n    kept_words = []\n    \n    # Iterate through each word\n    for word in words:\n        # Check if the word's length is not equal to k\n        if len(word) != k:\n            kept_words.append(word)\n    \n    # Join the kept words back into a string\n    result = ' '.join(kept_words)\n    \n    return result"}
{"task_id": "Mbpp/773", "solution": "import re"}
{"task_id": "Mbpp/775", "solution": "def odd_even_position(nums):\n    \"\"\"\n    Check whether every even index contains an even number and every odd index contains an odd number of a given list.\n    \"\"\"\n    # Use the all() function along with a generator expression to check the conditions\n    return all(nums[i] % 2 == i % 2 for i in range(len(nums)))\n\n# Test case 1\nnums = [2, 1, 4, 3, 6, 7, 6, 3]"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    # Create an empty set to store unique elements\n    unique_elements = set()\n    \n    # Iterate through the list\n    for element in lst:\n        # If the element is not in the set, add it\n        if element not in unique_elements:\n            unique_elements.add(element)\n    \n    # Return the sum of unique elements\n    return sum(unique_elements)"}
{"task_id": "Mbpp/778", "solution": "from itertools import groupby"}
{"task_id": "Mbpp/780", "solution": "import itertools"}
{"task_id": "Mbpp/781", "solution": "def count_even_odd_divisors(n):\n    # Initialize the count of divisors\n    divisor_count = 0\n    \n    # Iterate through all numbers from 1 to n\n    for i in range(1, n + 1):\n        # Check if the current number divides n without a remainder\n        if n % i == 0:\n            # If it does, increment the divisor count\n            divisor_count += 1\n    \n    # Check if the divisor count is even or odd\n    is_even = divisor_count % 2 == 0\n    \n    return is_even\n\n# Test cases based on the snippets provided"}
{"task_id": "Mbpp/782", "solution": "def sum_of_odd_length_subarrays(arr):\n    n = len(arr)\n    total_sum = 0\n    \n    # Iterate over the array to calculate the sum of subarrays of odd length\n    for i in range(n):\n        # Calculate the sum of subarrays starting from index i with odd lengths\n        # For odd lengths, the formula is: ((i + 1) * (n - i) + 1) / 2 * arr[i]\n        sum_subarrays = ((i + 1) * (n - i) + 1) // 2 * arr[i]\n        total_sum += sum_subarrays\n    \n    return total_sum\n\n# Test cases based on the provided examples\ndef test_sum_of_odd_length_subarrays():\n    assert sum_of_odd_length_subarrays([3, 2, 4]) == 18\n    assert sum_of_odd_length_subarrays([4, 2, -3, 1, 6]) == True  # Assuming True means the sum is correct\n    assert sum_of_odd_length_subarrays([4, 2, 0, 1, 6]) == True  # Assuming True means the sum is zero (tricky case)\n    assert sum_of_odd_length_subarrays([3, 8, 2, 5, 7]) == 92  # Based on the detailed explanation\n\n# Run the test cases\ntest_sum_of_odd_length_subarrays()"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(numbers):\n    \"\"\"\n    Function to find the product of the first even and odd number in a given list.\n    \n    Args:\n    numbers (list): A list of integers.\n    \n    Returns:\n    int: The product of the first even and odd numbers in the list.\n    \"\"\"\n    if not numbers:\n        return None\n    \n    first_even = next((num for num in numbers if num % 2 == 0), None)\n    first_odd = next((num for num in numbers if num % 2 != 0), None)\n    \n    if first_even is None or first_odd is None:\n        return None\n    \n    return first_even * first_odd"}
{"task_id": "Mbpp/785", "solution": "# Function to convert a tuple of string values to a tuple of integer values\ndef tuple_int_str(tuple_str):\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\n    return result\n\n# Test the function with the provided example\ntuple_str = (('333', '33'), ('1416', '55'))"}
{"task_id": "Mbpp/786", "solution": "def index(a, x):\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n\n    Parameters:\n    a (list): The sorted list.\n    x (int): The value to locate the insertion point for.\n\n    Returns:\n    int: The index at which 'x' should be inserted to maintain the sorted order.\n    \"\"\"\n    return bisect.bisect_left(a, x)\n\n# Test cases\na = [1, 2, 4, 5]"}
{"task_id": "Mbpp/787", "solution": "def text_match_three(text):\n    \"\"\"\n    Check if a string contains 'abbb' starting from the first 'a'.\n    \"\"\"\n    return 'abbb' in text"}
{"task_id": "Mbpp/788", "solution": "def create_tuple_from_string_list(string, list_elements):\n    \"\"\"\n    Creates a tuple from a string and a list in Python.\n\n    Parameters:\n    string (str): The string to include in the tuple.\n    list_elements (list): The list of elements to include in the tuple.\n\n    Returns:\n    tuple: The tuple containing the string and the elements from the list.\n    \"\"\"\n    # Convert the list to a tuple and wrap the string in a single-element tuple\n    return (string, tuple(list_elements))\n\n# Test cases\na = [\"gfg\", \"is\"]\nb = \"best\"\nresult = create_tuple_from_string_list(b, a)"}
{"task_id": "Mbpp/790", "solution": "def odd_even_position(nums):\n    # Use the all() function along with a generator expression to check if every even index contains an even number\n    # and every odd index contains an odd number in the given list.\n    return all((nums[i] % 2 == i % 2) for i in range(len(nums)))\n\n# Test cases\ntest_lists = [\n    [2, 1, 4, 3, 6, 7, 6, 3],  # Expected output: True\n    [2, 1, 4, 3, 6, 7, 6, 4],  # Expected output: False\n    [2, 1, 4, 3, 6, 7, 6, 4]   # Expected output: True\n]\n\nfor test_list in test_lists:\n    result = odd_even_position(test_list)\n    print(f\"List: {test_list} -> {result}\")"}
{"task_id": "Mbpp/791", "solution": "def remove_duplicates_and_remove_char(tuples, char):\n    # Function to remove duplicates and remove K character from first element of tuples\n    result = []\n    for tup in tuples:\n        # Check if the first element is a string and its length is greater than 0\n        if isinstance(tup[0], str) and len(tup[0]) > 0:\n            # Remove K character from the first element of the tuple\n            new_tuple = tup[0].replace(char, '')\n            result.append(new_tuple)\n        else:\n            # Append the tuple as is if it doesn't meet the string condition\n            result.append(tup)\n    return result\n\n# Test cases\ntest_list = [(1, 2), (3, 4), (1, 2), (5, 6)]\nK = '$'"}
{"task_id": "Mbpp/792", "solution": "def count_list(lst):\n    \"\"\"\n    Count the number of lists in a given list of lists.\n    \n    :param lst: A list containing nested lists.\n    :return: The count of lists in the provided list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/793", "solution": "def find_range(nums, target):\n    def bsearch(nums, item):\n        if not nums:\n            return -1\n        hi = len(nums) - 1\n        lo = 0\n        while lo <= hi:\n            mid = (lo + hi) // 2\n            guess = nums[mid]\n            if guess == item:\n                return mid\n            if guess < item:\n                lo = mid + 1\n            else:\n                hi = mid - 1\n        return -1\n\n    i = bsearch(nums, target)\n    if i < 0:\n        return [-1, -1]\n    s = e = i\n    while s > 0 and nums[s-1] == target:\n        s -= 1\n    while e < len(nums) - 1 and nums[e+1] == target:\n        e += 1\n    return [s, e]\n\n# Test cases"}
{"task_id": "Mbpp/794", "solution": "import re"}
{"task_id": "Mbpp/796", "solution": "def sum_of_dictionary_values(dictionary):\n    \"\"\"\n    This function calculates the sum of all values in a given dictionary.\n    It uses the sum() function with d.values() to efficiently compute the total.\n    \"\"\"\n    return sum(dictionary.values())\n\n# Test cases to validate the function\ntest_dict1 = {3: 4, 9: 10, 15: 10}\ntest_dict2 = {'a': 100, 'b': 200, 'c': 300}\ntest_dict3 = {1: 5, 2: 4, 3: 3, 4: 2, 5: 1}\n\n# Expected outputs\noutput1 = sum_of_dictionary_values(test_dict1)  # Expected: 27\noutput2 = sum_of_dictionary_values(test_dict2)  # Expected: 600\noutput3 = sum_of_dictionary_values(test_dict3)  # Expected: 15"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    \"\"\"\n    Calculate the sum of all odd natural numbers within the range l and r.\n    \n    :param l: The lower limit of the range.\n    :param r: The upper limit of the range.\n    :return: The sum of all odd natural numbers in the range [l, r].\n    \"\"\"\n    sum = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            sum += num\n    return sum"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    \"\"\"Return the sum of elements in the array.\"\"\"\n    return sum(arr)"}
{"task_id": "Mbpp/799", "solution": "def rotate_left(x, n):\n    # Ensure n is within the valid range for 32-bit rotation\n    n = n & 0x1F\n\n    # Calculate the mask for the number of bits to shift\n    mask = (32 + (~x + 1)) & 0xFFFFFFFF\n\n    # Perform the rotation using bitwise operations\n    return (x << n) | (x >> mask) & 0xFFFFFFFF\n\n# Test cases based on the snippets provided\ndef test_rotate_left():\n    # Test with 32-bit numbers\n    assert rotate_left(0x87654321, 4) == 0x76543218\n    assert rotate_left(0x87654321, 8) == 0x65432187\n    assert rotate_left(0x80000000, 1) == 0x80000001\n    assert rotate_left(0x78123456, 4) == 0x46817345\n    assert rotate_left(0xFFFFFFFF, 4) == 0xFFFFFFFF\n\n    # Additional test cases for completeness\n    assert rotate_left(0, 0) == 0\n    assert rotate_left(0x12345678, 3) == 0x34567821\n    assert rotate_left(0x00000001, 32) == 0x00000001\n\n# Run the test cases\ntest_rotate_left()"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(input_string):\n    return input_string.replace(' ', '')"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(x, y, z):\n    result = set([x, y, z])\n    return 0 if len(result) == 3 else 4 - len(result)"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square(n):\n    \"\"\"Check if a number is a perfect square.\"\"\"\n    if n < 0:\n        return False\n    root = int(n ** 0.5)\n    return root * root == n"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    \"\"\"\n    Check if the product of numbers in a list is even.\n    \n    Args:\n        numbers (list): A list of integers.\n        \n    Returns:\n        bool: True if the product is even, False otherwise.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    \n    return product % 2 == 0"}
{"task_id": "Mbpp/805", "solution": "def max_sum_sublists(lst):\n    \"\"\"\n    Finds the list in a list of lists whose sum of elements is the highest.\n\n    Args:\n        lst (list): A list of lists where each sublist contains integers.\n\n    Returns:\n        int: The sum of elements in the sublist with the highest sum.\n\n    Example:\n        >>> max_sum_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        27\n    \"\"\"\n    # Using the built-in max function with a key argument to find the sublist with the max sum\n    return max(sum(sublist) for sublist in lst)\n\n# Test cases"}
{"task_id": "Mbpp/806", "solution": "def max_uppercase_run(s):\n    max_count = 0\n    current_count = 0\n    \n    for char in s:\n        if char.isupper():\n            current_count += 1\n            max_count = max(max_count, current_count)\n        else:\n            current_count = 0\n    \n    return max_count\n\n# Test cases"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    \"\"\"\n    Finds the first odd number in a given list of numbers.\n    \n    :param numbers: A list of numbers.\n    :return: The first odd number in the list, or None if there are no odd numbers.\n    \"\"\"\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None"}
{"task_id": "Mbpp/808", "solution": "def contains_k_in_tuple(tup, k):\n    \"\"\"\n    Determines if a tuple contains a specific value 'k'.\n    \n    Args:\n        tup (tuple): The input tuple.\n        k (int): The value to check for in the tuple.\n        \n    Returns:\n        bool: True if 'k' is in the tuple, False otherwise.\n    \"\"\"\n    try:\n        index = tup.index(k)\n        return index != -1\n    except ValueError:\n        return False\n\n# Test cases\ntup = (10, 4, 5, 6, 8)\nk = 6"}
{"task_id": "Mbpp/809", "solution": "def compare_tuples(t1, t2):\n    \"\"\"\n    This function compares two tuples and returns a boolean indicating whether the first tuple is less than, equal to, or greater than the second tuple.\n    \"\"\"\n    # Lexicographical comparison of tuples\n    return t1 < t2\n\n# Test cases based on provided snippets\n\n# Case 1: Tuples of equal length\nt1 = (4, 5)\nt2 = (4, 5)"}
