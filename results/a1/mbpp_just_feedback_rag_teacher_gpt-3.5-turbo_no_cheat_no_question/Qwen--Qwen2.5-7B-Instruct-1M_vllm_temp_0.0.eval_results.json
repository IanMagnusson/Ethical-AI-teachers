{"date": "2025-03-12 17:20", "hash": "ee43ecabebf20deef4bb776a405ac5b1", "eval": {"Mbpp/2": [{"task_id": "Mbpp/2", "solution": "def similar_elements(tup1, tup2):\n    # Convert the tuples to sets and find the intersection\n    result = set(tup1) & set(tup2)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/8": [{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    # Use a list comprehension to square each element in the input list\n    return [i ** 2 for i in nums]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/6": [{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(x, y):\n    # Calculate the XOR of x and y\n    xor = x ^ y\n    # Check if the result is a power of 2 (only one bit set)\n    return xor and not (xor & (xor - 1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/69": [{"task_id": "Mbpp/69", "solution": "def has_sublist(lst, sublst):\n    \"\"\"\n    Check if a sublist exists within a list.\n\n    Parameters:\n    lst (list): The list to search within.\n    sublst (list): The sublist to search for.\n\n    Returns:\n    bool: True if the sublist exists within the list, False otherwise.\n    \"\"\"\n    # Check if either list is empty\n    if not lst or not sublst:\n        return False\n\n    # Iterate over the main list\n    for i in range(len(lst) - len(sublst) + 1):\n        # Check if the sublist matches the slice of the main list starting at index i\n        if lst[i:i+len(sublst)] == sublst:\n            return True\n\n    return False\n\n# Test cases to verify the correctness of the function\ndef check_function():\n    test_cases = [([1, 2, 3, 4, 5], [2, 3], True),\n                  ([1, 2, 3, 4, 5], [0, 3], False),\n                  ([], [1], False),\n                  ([1, 2, 3], [], False),\n                  ([1, 2, 3], [1, 2, 3], True),\n                  ([1, 2, 3, 4, 5, 6], [3, 4, 5], True),\n                  ([1, 2, 3, 4, 5, 6], [6, 4, 3], False)]\n\n    all_passed = True\n    for lst, sublst, expected in test_cases:\n        result = has_sublist(lst, sublst)\n        if result != expected:\n            print(f\"Test failed for lst={lst} and sublst={sublst}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n\ncheck_function()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/63": [{"task_id": "Mbpp/63", "solution": "def find_max_difference(pairs):\n    \"\"\"\n    Finds the maximum difference between the second and first elements of tuple pairs.\n    \n    Args:\n    pairs (list of tuples): A list of tuples, where each tuple contains two integers.\n    \n    Returns:\n    int: The maximum difference between the second and first elements of the tuples.\n    \"\"\"\n    # Calculate the differences and find the maximum\n    max_diff = max(y - x for x, y in pairs)\n    return max_diff\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    test_cases = [([(-1, 4), (3, 8), (5, 2)], 6),\n                  ([(10, 3), (6, 9), (8, 1)], 6),\n                  ([(0, 5), (2, 2), (7, 1)], 4)]\n    \n    all_passed = True\n    for pairs, expected in test_cases:\n        result = find_max_difference(pairs)\n        if result != expected:\n            print(f\"Test failed for: {pairs}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n    else:\n        print(\"Some tests failed. Please review your function.\")\n\n# Uncomment the line below to run the check function\n# check_solution()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/70": [{"task_id": "Mbpp/70", "solution": "def get_equal(test_list):\n    # Check if all tuples in the list have the same length\n    res = all(len(i) == len(test_list[0]) for i in test_list)\n    return res", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/57": [{"task_id": "Mbpp/57", "solution": "def find_Max_Num(nums):\n    # Convert each number in the list to a string\n    str_nums = list(map(str, nums))\n    # Sort the list of strings in reverse order (descending)\n    str_nums.sort(reverse=True)\n    # Join the sorted strings to form the largest number\n    largest_num = ''.join(str_nums)\n    # Convert the result back to an integer\n    return int(largest_num)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/94": [{"task_id": "Mbpp/94", "solution": "def index_minimum(test_list):\n    # Find the tuple with the smallest second value and return its first value\n    res = min(test_list, key=lambda ele: ele[1])[0]\n    return res", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/66": [{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    # Initialize a counter to count positive numbers\n    count = 0\n    # Iterate through the list\n    for num in lst:\n        # Check if the current number is positive\n        if num > 0:\n            # Increment the counter if the number is positive\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/56": [{"task_id": "Mbpp/56", "solution": "def check(num):\n    # Calculate twice the reverse of the number and subtract 1\n    if num == 2 * int(str(num)[::-1]) - 1:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/118": [{"task_id": "Mbpp/118", "solution": "def string_to_list(str1):\n    # Split the string on spaces and return the list of words\n    return str1.split(' ')", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/64": [{"task_id": "Mbpp/64", "solution": "def subject_marks(test_list):\n    # Sort the list of tuples based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n    return test_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/59": [{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    # Calculate the nth octagonal number using the formula\n    return n * (3 * n - 2)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/72": [{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    # A number can be represented as the difference of two squares if and only if it is not of the form 4k+2\n    return n % 4 != 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/9": [{"task_id": "Mbpp/9", "solution": "def find_longest_substring(s):\n    \"\"\"\n    Finds the longest substring of consecutive characters in the given string.\n    \n    :param s: Input string\n    :return: Longest substring of consecutive characters\n    \"\"\"\n    if not s:\n        return \"\"\n    \n    max_substring = current_substring = s[0]\n    \n    for i in range(1, len(s)):\n        # Check if current character is consecutive to the previous one\n        if ord(s[i]) == ord(s[i-1]) + 1 or s[i] == s[i-1]:\n            current_substring += s[i]\n        else:\n            # Update max_substring if current one is longer\n            if len(current_substring) > len(max_substring):\n                max_substring = current_substring\n            current_substring = s[i]\n    \n    # Final check at the end of the loop\n    if len(current_substring) > len(max_substring):\n        max_substring = current_substring\n    \n    return max_substring\n\n# Test cases to verify the solution\ndef check_solution():\n    test_cases = [\n        ([\"ab\"], \"ab\"),\n        ([\"aaaaaaaaaaaaaaaab\"], \"aaaaaaaaaaaaaaaab\"),\n        ([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], \"abcdefg\"),\n        ([\"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"d\"], \"aaaa\"),\n        ([\"z\", \"y\", \"x\", \"w\", \"v\"], \"zyxwv\"),\n        ([\"\"], \"\"),\n        ([\"a\"], \"a\")\n    ]\n    \n    all_passed = True\n    for inputs, expected in test_cases:\n        result = find_longest_substring(inputs)\n        if result != expected:\n            print(f\"Test failed for input {inputs}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n\ncheck_solution()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/101": [{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    # Return the (k-1)th element of the array using 1-based indexing\n    return arr[k-1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/3": [{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    \"\"\"\n    Determines if a number is not a prime number.\n    \n    Args:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if the number is not a prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/92": [{"task_id": "Mbpp/92", "solution": "def is_undulating(num):\n    \"\"\"\n    Check if the given number is an undulating number.\n    An undulating number is a number that has an alternating pattern of digits.\n    For example, 12121 and 343434 are undulating numbers, but 12345 is not.\n    \n    Args:\n    num (int): The number to check.\n    \n    Returns:\n    bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    num_str = str(num)\n    if len(num_str) < 3:  # Undulating numbers must have at least 3 digits\n        return False\n    \n    # Check if the first two digits are the same and the rest alternate\n    if num_str[0] == num_str[1]:\n        for i in range(2, len(num_str) - 1):\n            if num_str[i] != num_str[i - 1]:\n                return False\n    else:\n        return False\n    \n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1212121]], "plus_fail_tests": [[2121212121212121]]}], "Mbpp/89": [{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    # Subtract 1 from n to find the closest smaller number\n    return n - 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/95": [{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    # Find the minimum length among all the lists in the list of lists\n    min_length = min(len(sublist) for sublist in list_of_lists)\n    return min_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/4": [{"task_id": "Mbpp/4", "solution": "import heapq\ndef heap_queue_largest(nums, n):\n    # Use nlargest from heapq to find the n largest numbers\n    largest_nums = heapq.nlargest(n, nums)\n    # Return the result sorted in descending order\n    return sorted(largest_nums, reverse=True)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/137": [{"task_id": "Mbpp/137", "solution": "def zero_to_nonzero_ratio(arr):\n    \"\"\"\n    Calculate the ratio of zeroes to non-zeroes in the given list of integers.\n    \n    Parameters:\n    arr (list): A list of integers.\n    \n    Returns:\n    float: The ratio of zeroes to non-zeroes in the list. Returns 0 if the list is empty.\n    \"\"\"\n    if not arr:  # Check if the list is empty\n        return 0\n    \n    zero_count = arr.count(0)\n    non_zero_count = len(arr) - zero_count\n    \n    if non_zero_count == 0:  # Avoid division by zero\n        return 0\n    \n    return zero_count / non_zero_count\n\n# Test cases to verify the correctness of the function\ndef check_function():\n    test_cases = [([1, 0, 2, 0, 3, 0, 4], 0.6666666666666666),\n                  ([0, 0, 0, 0, 0], 1.0),\n                  ([1, 2, 3, 4, 5], 0.0),\n                  ([], 0),\n                  ([0, 1, 0, 1, 0, 1, 0], 0.5)]\n    \n    all_passed = True\n    for i, (input_arr, expected) in enumerate(test_cases):\n        result = zero_to_nonzero_ratio(input_arr)\n        if result != expected:\n            print(f\"Test case {i+1} failed: expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n\ncheck_function()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/100": [{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    # Increment the number until a palindrome is found\n    while True:\n        n += 1\n        # Convert the number to a string and check if it reads the same forwards and backwards\n        if str(n) == str(n)[::-1]:\n            return n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/11": [{"task_id": "Mbpp/11", "solution": "def remove_Occ(string, char):\n    # Find the first occurrence of the character\n    first_occurrence = string.find(char)\n    # Find the last occurrence of the character\n    last_occurrence = string.rfind(char)\n    \n    # If the character is not found, return the original string\n    if first_occurrence == -1 or last_occurrence == -1:\n        return string\n    \n    # Remove the first and last occurrence of the character\n    new_string = string[:first_occurrence] + string[first_occurrence+1:last_occurrence] + string[last_occurrence+1:]\n    \n    return new_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/84": [{"task_id": "Mbpp/84", "solution": "def newman_conway_sequence(n):\n    \"\"\"\n    Returns the nth element of the Newman-Conway sequence.\n    \n    The Newman-Conway sequence is defined as follows:\n    - P(1) = 1\n    - P(n) = P(P(n - 1)) + P(n - P(n - 1)) for n > 1\n    \n    Args:\n    n (int): The position in the sequence.\n    \n    Returns:\n    int: The nth element of the Newman-Conway sequence.\n    \"\"\"\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [1]\n    \n    # Initialize the sequence with the first two values\n    P = [0, 1]\n    \n    # Compute the sequence up to the nth element\n    for i in range(2, n + 1):\n        P.append(P[P[i - 1]] + P[i - P[i - 1]])\n    \n    return P[n]\n\n# Check function to verify the correctness of the generated function\ndef check():\n    test_cases = [\n        (1, [1]),\n        (2, [1, 1]),\n        (10, [1, 1, 2, 2, 3, 4, 4, 4, 5, 6]),\n        ([], []),\n        ([[1000000]], []),\n    ]\n    \n    all_passed = True\n    for i, (input_val, expected) in enumerate(test_cases):\n        result = newman_conway_sequence(input_val)\n        if result != expected:\n            print(f\"Test case {i+1} failed: expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n    else:\n        print(\"Some test cases failed.\")\n\n# Run the check function\ncheck()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/82": [{"task_id": "Mbpp/82", "solution": "import math\ndef volume_sphere(radius):\n    # Calculate the volume of a sphere using the formula (4/3) * \u03c0 * r^3\n    volume = (4/3) * math.pi * (radius ** 3)\n    return volume", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/86": [{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    # Calculate the nth centered hexagonal number\n    return 3 * n * (n - 1) + 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/16": [{"task_id": "Mbpp/16", "solution": "import re", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/99": [{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    \"\"\"\n    Convert a non-negative integer to its binary representation as a string.\n    \n    Parameters:\n    n (int): The non-negative integer to convert.\n    \n    Returns:\n    str: The binary representation of the integer.\n    \n    Raises:\n    ValueError: If the input is not a non-negative integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return \"0\"\n    \n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/77": [{"task_id": "Mbpp/77", "solution": "def is_Diff(n):\n    # Check if the number is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/71": [{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    \"\"\"\n    Sorts an array using the Comb Sort algorithm.\n    \n    Comb sort improves on bubble sort by using a gap that starts out as the length of the array and is reduced by a shrink factor until it becomes 1.\n    \n    Parameters:\n    arr (list): The list of elements to be sorted.\n    \n    Returns:\n    list: The sorted list.\n    \"\"\"\n    gap = len(arr)\n    shrink = 1.3  # Common shrink factor\n    sorted = False\n\n    while not sorted:\n        # Update the gap for the next comb\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False  # We are not done yet\n        else:\n            gap = 1\n            sorted = True  # If there are no swaps this pass, we are done\n\n        i = 0\n        while i + gap < len(arr):\n            if arr[i] > arr[i + gap]:\n                # Swap elements\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n            i += 1\n\n# Example usage:", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 15, 37, 25, 79]]], "plus_fail_tests": [[[500, 1000, 1500, 2000, 3000]]]}], "Mbpp/80": [{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    # Calculate the nth tetrahedral number using the formula\n    return n * (n + 1) * (n + 2) // 6", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/18": [{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(s1, s2):\n    # Create a set of characters to be removed for faster lookup\n    chars_to_remove = set(s2)\n    # Use a list comprehension to filter out unwanted characters\n    result = [char for char in s1 if char not in chars_to_remove]\n    # Join the list back into a string and return\n    return ''.join(result)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/17": [{"task_id": "Mbpp/17", "solution": "def square_perimeter(side):\n    # Calculate the perimeter of the square\n    perimeter = 4 * side\n    return perimeter", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/145": [{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    # Calculate the maximum and minimum values in the array\n    max_val = max(arr)\n    min_val = min(arr)\n    \n    # Return the absolute difference between the max and min values\n    return abs(max_val - min_val)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/104": [{"task_id": "Mbpp/104", "solution": "def sort_sublists(list_of_lists):\n    # Use list comprehension to sort each sublist in the given list of lists\n    sorted_list = [sorted(sublist) for sublist in list_of_lists]\n    return sorted_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/142": [{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    # Initialize a counter for the matching elements\n    count = 0\n    # Iterate through the lists using zip to compare elements at the same position\n    for a, b, c in zip(list1, list2, list3):\n        # Increment the counter if elements in all three lists are the same\n        if a == b == c:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/12": [{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    # Sort the matrix based on the sum of each row in ascending order\n    sorted_matrix = sorted(matrix, key=sum)\n    return sorted_matrix", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/96": [{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    # Initialize a counter for divisors\n    count = 0\n    # Iterate from 1 to the square root of n\n    for i in range(1, int(n**0.5) + 1):\n        # If i is a divisor of n\n        if n % i == 0:\n            # Increment the count\n            count += 1\n            # If i is not the square root of n, count the complementary divisor\n            if i != n // i:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/98": [{"task_id": "Mbpp/98", "solution": "def multiply_num(nums):\n    # Calculate the product of all numbers in the list\n    product = 1\n    for num in nums:\n        product *= num\n    # Divide the product by the length of the list\n    return product / len(nums)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/109": [{"task_id": "Mbpp/109", "solution": "def count_odd_after_rotation(binary_str):\n    \"\"\"\n    Given a binary string, this function calculates the number of numbers that have an odd value\n    after rotating the binary string. A rotation means moving the first character to the end of the string.\n    \n    Example:\n    count_odd_after_rotation(\"101\") -> 2\n    count_odd_after_rotation(\"111\") -> 3\n    \"\"\"\n    # Count the number of '1's in the binary string\n    ones_count = binary_str.count('1')\n    \n    # If the count of '1's is odd, all rotations will result in an odd number\n    # If the count of '1's is even, only half of the rotations will result in an odd number\n    if ones_count % 2 == 0:\n        return ones_count // 2\n    else:\n        return ones_count\n\n# Check function to verify the correctness of the solution\ndef check():\n    test_cases = [\n        (\"101\", 2),\n        (\"111\", 3),\n        (\"000\", 0),\n        (\"1100\", 2),\n        (\"1001\", 2)\n    ]\n    \n    all_passed = True\n    for binary_str, expected in test_cases:\n        result = count_odd_after_rotation(binary_str)\n        if result != expected:\n            print(f\"Test failed for input {binary_str}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n\ncheck()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/62": [{"task_id": "Mbpp/62", "solution": "def smallest_num(lst):\n    # Initialize the smallest number with the first element of the list\n    smallest = lst[0]\n    # Iterate through the list to find the smallest number\n    for num in lst:\n        if num < smallest:\n            smallest = num\n    return smallest", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/124": [{"task_id": "Mbpp/124", "solution": "import math\ndef angle_complex(z):\n    \"\"\"\n    Calculate the angle (in degrees) of a complex number.\n    \n    Parameters:\n    z (complex): The complex number for which the angle is to be calculated.\n    \n    Returns:\n    float: The angle in degrees.\n    \"\"\"\n    # Calculate the phase in radians and convert to degrees\n    angle_rad = z.as_polar()[1]\n    angle_deg = angle_rad * (180 / 3.141592653589793)\n    return angle_deg", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["0.0", "1j"]], "plus_fail_tests": [["0.0", "0j"]]}], "Mbpp/138": [{"task_id": "Mbpp/138", "solution": "def can_be_sum_of_powers_of_two(n):\n    \"\"\"\n    Check if the given number can be represented as a sum of non-zero powers of 2.\n    \n    Args:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if the number can be represented as a sum of non-zero powers of 2, False otherwise.\n    \"\"\"\n    if n == 0:\n        return False\n    while n != 1:\n        if n % 2 == 1:\n            return False\n        n = n // 2\n    return True\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    test_cases = [\n        (1, True),  # 2^0\n        (2, True),  # 2^1\n        (3, True),  # 2^1 + 2^0\n        (4, True),  # 2^2\n        (5, True),  # 2^2 + 2^0\n        (6, True),  # 2^2 + 2^1\n        (7, True),  # 2^2 + 2^1 + 2^0\n        (8, True),  # 2^3\n        (9, True),  # 2^3 + 2^0\n        (10, True), # 2^3 + 2^1\n        (11, True), # 2^3 + 2^1 + 2^0\n        (12, True), # 2^3 + 2^2\n        (13, True), # 2^3 + 2^2 + 2^0\n        (14, True), # 2^3 + 2^2 + 2^1\n        (15, True), # 2^3 + 2^2 + 2^1 + 2^0\n        (16, True), # 2^4\n        (0, False), # 0 cannot be represented as a sum of non-zero powers of 2\n    ]\n    \n    all_passed = True\n    for n, expected in test_cases:\n        result = can_be_sum_of_powers_of_two(n)\n        if result != expected:\n            print(f\"Test failed for n={n}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n    else:\n        print(\"Some tests failed. Please review your function.\")\n\n# Uncomment the following line to run the check function\n# check_solution()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/14": [{"task_id": "Mbpp/14", "solution": "def find_Volume(a, b, c):\n    # Calculate the area of the triangular base\n    base_area = (a * b) / 2\n    # Calculate the volume of the prism\n    volume = base_area * c\n    return volume", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/170": [{"task_id": "Mbpp/170", "solution": "def sum_range_list(nums, start, end):\n    # Calculate the sum of the specified slice of the list\n    return sum(nums[start:end+1])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/126": [{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(a, b):\n    \"\"\"\n    Calculate the sum of all common divisors of two given numbers.\n    \n    :param a: First integer number\n    :param b: Second integer number\n    :return: Sum of all common divisors of a and b\n    \"\"\"\n    sum_divisors = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            sum_divisors += i\n    return sum_divisors\n\n# Test cases to verify the correctness of the function\nassert sum_common_divisors(12, 18) == 28, \"The sum of common divisors should be 28\"\nassert sum_common_divisors(100, 200) == 761, \"The sum of common divisors should be 761\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/93": [{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    # Calculate a to the power of b\n    return a ** b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/85": [{"task_id": "Mbpp/85", "solution": "import math\ndef surfacearea_sphere(radius):\n    # Calculate the surface area of a sphere using the formula 4 * pi * r^2\n    surface_area = 4 * math.pi * radius ** 2\n    return surface_area", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/88": [{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    # Initialize an empty dictionary to store the frequency of elements\n    frequency_dict = {}\n    # Iterate over each element in the list\n    for element in lst:\n        # If the element is already in the dictionary, increment its count\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            frequency_dict[element] = 1\n    # Return the dictionary containing the frequency of each element\n    return frequency_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/61": [{"task_id": "Mbpp/61", "solution": "def count_Substrings(S):\n    # Initialize the count of substrings\n    count = 0\n    # Iterate over all possible starting points of substrings\n    for start in range(len(S)):\n        sum_digits = 0\n        # Iterate over all possible ending points of substrings\n        for end in range(start, len(S)):\n            # Add the current digit to the sum\n            sum_digits += int(S[end])\n            # Check if the sum of digits is equal to the length of the substring\n            if sum_digits == end - start + 1:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/65": [{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(data):\n    # Initialize sum to 0\n    total_sum = 0\n    # Iterate through each element in the list\n    for element in data:\n        # Check if the element is a list\n        if isinstance(element, list):\n            # If it's a list, recursively call the function to sum its elements\n            total_sum += recursive_list_sum(element)\n        else:\n            # If it's not a list, add the element to the total sum\n            total_sum += element\n    return total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/127": [{"task_id": "Mbpp/127", "solution": "def multiply_int(x, y):\n    # Multiply two integers and return the result\n    return x * y", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/108": [{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    # Merge all three lists into one\n    merged_list = list1 + list2 + list3\n    # Sort the merged list\n    merged_list.sort()\n    return merged_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/19": [{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    # Check if the array contains any duplicate elements\n    return len(arr) != len(set(arr))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/160": [{"task_id": "Mbpp/160", "solution": "def extended_gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor of a and b, and find the integers x and y such that:\n    ax + by = gcd(a, b)\n    \n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n    \n    Returns:\n    tuple: A tuple (gcd, x, y) where gcd is the greatest common divisor of a and b,\n           and x, y are the coefficients such that ax + by = gcd(a, b)\n    \"\"\"\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        gcd, x1, y1 = extended_gcd(b % a, a)\n        x = y1 - (b // a) * x1\n        y = x1\n        return (gcd, x, y)\n\ndef scale_solution(a, b, gcd, x, y):\n    \"\"\"\n    Scale the solution to match the original coefficients.\n    \n    Parameters:\n    a (int): Original first coefficient\n    b (int): Original second coefficient\n    gcd (int): Greatest common divisor of a and b\n    x (int): Coefficient x from the extended Euclidean algorithm\n    y (int): Coefficient y from the extended Euclidean algorithm\n    \n    Returns:\n    tuple: A tuple (scaled_x, scaled_y) such that a*scaled_x + b*scaled_y = gcd(a, b)\n    \"\"\"\n    scaled_x = x * (a // gcd)\n    scaled_y = y * (b // gcd)\n    return (scaled_x, scaled_y)\n\n# Test cases to verify the correctness of the solution\ndef check_solution():\n    test_cases = [\n        (30, 20, (10, 1, -1)),  # gcd(30, 20) = 10, x = 1, y = -1\n        (35, 15, (5, 1, -2)),   # gcd(35, 15) = 5, x = 1, y = -2\n        (0, 5, (5, 0, 1)),      # gcd(0, 5) = 5, x = 0, y = 1\n        (17, 0, (17, 1, 0)),    # gcd(17, 0) = 17, x = 1, y = 0\n    ]\n    \n    all_passed = True\n    for a, b, expected in test_cases:\n        gcd, x, y = extended_gcd(a, b)\n        scaled_x, scaled_y = scale_solution(a, b, gcd, x, y)\n        if (a * scaled_x + b * scaled_y) != gcd:\n            print(f\"Test failed for a={a}, b={b}. Expected gcd {expected[0]}, got {a * scaled_x + b * scaled_y}.\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n    else:\n        print(\"Some tests failed. Please review your solution.\")\n\n# Run the test cases\ncheck_solution()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/58": [{"task_id": "Mbpp/58", "solution": "def opposite_Signs(a, b):\n    # Check if the signs of a and b are opposite\n    return (a ^ b) < 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/68": [{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    increasing = decreasing = True\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n            \n    return increasing or decreasing", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/223": [{"task_id": "Mbpp/223", "solution": "def is_majority(items: list):\n    \"\"\"\n    Check if the majority of the elements in the list are the same as the specified item.\n    \n    Args:\n    items (list): The list of elements to check.\n    item: The element to check the majority of the list against.\n    \n    Returns:\n    bool: True if the majority of the list elements are the specified item, False otherwise.\n    \"\"\"\n    if not items:\n        return False\n    item_count = items.count(items[0])\n    return item_count > len(items) / 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 3, 3, 3, 10], 7, 3]], "plus_fail_tests": [[[], 0, 1]]}], "Mbpp/79": [{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    # Check if the length of the word is odd\n    return len(word) % 2 != 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/230": [{"task_id": "Mbpp/230", "solution": "def replace_blank(str1, ch):\n    # Replace spaces in the string with the specified character\n    result = str1.replace(' ', ch)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/239": [{"task_id": "Mbpp/239", "solution": "def find_max_sequence_length(nums):\n    \"\"\"\n    Finds the maximum length of a sequence where each element is greater than or equal to twice the previous element.\n    \n    :param nums: List[int] - A list of integers.\n    :return: int - The length of the longest sequence that satisfies the condition.\n    \"\"\"\n    if not nums:\n        return 0\n    \n    n = len(nums)\n    dp = [1] * n  # Initialize the dp array with 1s\n    \n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] >= 2 * nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    test_cases = [([1, 2, 5, 3, 4], 4), ([6, 0, 1, 1, 3, 2, 2, 5], 3), ([1], 1), ([], 0)]\n    \n    all_passed = True\n    for nums, expected in test_cases:\n        result = find_max_sequence_length(nums)\n        if result != expected:\n            print(f\"Test failed for: {nums}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n\ncheck_solution()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/7": [{"task_id": "Mbpp/7", "solution": "def find_long_words(text):\n    \"\"\"\n    Finds words in the given text that are at least 4 characters long.\n    \n    Args:\n    text (str): The input string to search within.\n    \n    Returns:\n    set: A set of words that are at least 4 characters long.\n    \"\"\"\n    # Split the text into words and filter based on length\n    words = set(word for word in text.split() if len(word) >= 4)\n    return words\n\n# Test cases to verify the correctness of the function\ndef check_function():\n    test_cases = [\n        (\"This is a very long string with no words that are at least 4 characters long.\", set()),\n        (\"Hello world!\", {\"Hello\", \"world\"}),\n        (\"\", set()),\n        (\"a b c d\", set()),\n        (\"Python is fun\", {\"Python\", \"fun\"}),\n    ]\n    \n    all_passed = True\n    for text, expected in test_cases:\n        result = find_long_words(text)\n        if result != expected:\n            print(f\"Failed for input: '{text}'. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n    else:\n        print(\"Some tests failed. Please review your function.\")\n\n# Run the check function to verify the solution\ncheck_function()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/165": [{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    # Initialize the count to 0\n    count = 0\n    # Iterate over the string with index\n    for index, char in enumerate(s):\n        # Convert character to lowercase and check if it matches the position\n        if char.lower() == chr(ord('a') + index):\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/87": [{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    # Merge the three dictionaries using the update method\n    result = dict1.copy()\n    result.update(dict2)\n    result.update(dict3)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/90": [{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    # Find the maximum length of the words in the list\n    max_length = max(len(word) for word in words)\n    return max_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/140": [{"task_id": "Mbpp/140", "solution": "def extract_singly(list_of_tuples):\n    # Flatten the list of tuples and convert it to a set to remove duplicates\n    return set([item for sublist in list_of_tuples for item in sublist])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/168": [{"task_id": "Mbpp/168", "solution": "def frequency(arr, num):\n    # Initialize a counter to zero\n    count = 0\n    # Iterate through the list to count occurrences of num\n    for n in arr:\n        if n == num:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/111": [{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    # Initialize the common elements with the first list's elements\n    common_elements = set(nested_lists[0])\n    \n    # Iterate over the nested lists starting from the second list\n    for lst in nested_lists[1:]:\n        # Update the common elements to only include elements present in the current list\n        common_elements.intersection_update(lst)\n    \n    # Return the set of common elements\n    return common_elements", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/128": [{"task_id": "Mbpp/128", "solution": "def long_words(n, string):\n    # Split the string into words\n    words = string.split(\" \")\n    # Filter words that are longer than n characters\n    result = [word for word in words if len(word) > n]\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/74": [{"task_id": "Mbpp/74", "solution": "def is_sequence_following_pattern(sequence, pattern):\n    \"\"\"\n    Checks if the given sequence follows the given pattern.\n    \n    Parameters:\n    sequence (list): The sequence of elements to check.\n    pattern (str): The pattern to match against the sequence.\n    \n    Returns:\n    bool: True if the sequence follows the pattern, False otherwise.\n    \"\"\"\n    if len(sequence) != len(pattern):\n        return False\n    \n    mapping = {}\n    pattern_to_sequence = {}\n    \n    for seq, pat in zip(sequence, pattern):\n        if seq not in mapping:\n            mapping[seq] = pat\n        else:\n            if mapping[seq] != pat:\n                return False\n        \n        if pat not in pattern_to_sequence:\n            pattern_to_sequence[pat] = seq\n        else:\n            if pattern_to_sequence[pat] != seq:\n                return False\n    \n    return True\n\n# Test cases to verify the correctness of the function\ndef check_function():\n    test_cases = [([1, 2, 3, 4], \"abcd\", True),\n                  ([1, 2, 3, 4], \"abca\", False),\n                  ([1, 2, 2, 3], \"abba\", True),\n                  ([1, 1, 1, 1], \"aaaa\", True),\n                  ([1, 2, 3, 4], \"xyzw\", False)]\n    \n    all_passed = True\n    for sequence, pattern, expected in test_cases:\n        result = is_sequence_following_pattern(sequence, pattern)\n        if result != expected:\n            print(f\"Failed for sequence: {sequence}, pattern: {pattern}. Expected {expected}, got {result}.\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n    else:\n        print(\"Some test cases failed.\")\n\n# Uncomment the line below to run the check function\n# check_function()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/131": [{"task_id": "Mbpp/131", "solution": "def reverse_vowels(text):\n    # Define vowels\n    vowels = \"aeiouAEIOU\"\n    # Convert text to a list for easy manipulation\n    text_list = list(text)\n    # Initialize two pointers\n    left, right = 0, len(text_list) - 1\n    \n    # Traverse the string with two pointers\n    while left < right:\n        # Move the left pointer until a vowel is found\n        if text_list[left] not in vowels:\n            left += 1\n        # Move the right pointer until a vowel is found\n        elif text_list[right] not in vowels:\n            right -= 1\n        # Swap the vowels\n        else:\n            text_list[left], text_list[right] = text_list[right], text_list[left]\n            left += 1\n            right -= 1\n    \n    # Convert the list back to a string\n    return ''.join(text_list)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/244": [{"task_id": "Mbpp/244", "solution": "import math", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/129": [{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    # Calculate the sum of the first row to use as a reference\n    magic_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check columns\n    for col in range(len(matrix)):\n        if sum(matrix[row][col] for row in range(len(matrix))) != magic_sum:\n            return False\n    \n    # Check main diagonal\n    if sum(matrix[i][i] for i in range(len(matrix))) != magic_sum:\n        return False\n    \n    # Check secondary diagonal\n    if sum(matrix[i][len(matrix)-1-i] for i in range(len(matrix))) != magic_sum:\n        return False\n    \n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/20": [{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    \"\"\"\n    Check if a number is a Woodall number.\n    \n    A Woodall number is of the form W_k = k * 2^k - 1 for some integer k >= 1.\n    \n    Parameters:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if n is a Woodall number, False otherwise.\n    \"\"\"\n    if n < 1:\n        return False\n    k = 1\n    while True:\n        woodall = k * (2 ** k) - 1\n        if woodall == n:\n            return True\n        if woodall > n:\n            return False\n        k += 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/113": [{"task_id": "Mbpp/113", "solution": "def sum_elements(lst):\n    \"\"\"\n    Calculate the sum of all elements in the given list.\n    If the list is empty or contains only empty strings, return 0.\n    \n    Args:\n    lst (list): A list of integers and/or strings.\n    \n    Returns:\n    int: The sum of all non-empty string elements converted to integers.\n    \"\"\"\n    return sum(int(item) for item in lst if item != \"\")\n\n# Example usage and test cases", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/91": [{"task_id": "Mbpp/91", "solution": "def find_substring(test_list, test_str):\n    # Check if the test_str is a substring of any string in test_list\n    res = any(test_str in sub for sub in test_list)\n    return res", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/139": [{"task_id": "Mbpp/139", "solution": "import math\ndef circle_circumference(radius):\n    # Calculate the circumference of a circle given its radius\n    return 2 * math.pi * radius", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/132": [{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    # Join the elements of the tuple into a single string\n    result = ''.join(tup)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/106": [{"task_id": "Mbpp/106", "solution": "def append_and_convert(data_tuple, data_list):\n    \"\"\"\n    Appends elements from the given list to the given tuple and then converts the result back into a tuple.\n    \n    Parameters:\n    - data_tuple (tuple): The tuple to which elements will be appended.\n    - data_list (list): The list containing elements to append to the tuple.\n    \n    Returns:\n    - tuple: The new tuple after appending elements from the list.\n    \"\"\"\n    # Convert the tuple to a list to allow modification\n    temp_list = list(data_tuple)\n    # Extend the list with elements from the provided list\n    temp_list.extend(data_list)\n    # Convert the list back to a tuple\n    result_tuple = tuple(temp_list)\n    return result_tuple\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    test_cases = [(((), [1, 2, 3]), (1, 2, 3)),\n                  ((('a', 'b'), ['c', 'd']), ('a', 'b', 'c', 'd')),\n                  ((1, 2, 3), [4, 5])]\n\n    all_passed = True\n    for inputs, expected in test_cases:\n        result = append_and_convert(*inputs)\n        if result != expected:\n            print(f\"Test failed for inputs {inputs}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n\n# Uncomment the following line to run the check function\n# check_solution()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/102": [{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    # Split the string by underscore and capitalize each word\n    # Then join them without any spaces\n    return ''.join(word.capitalize() or '_' for word in snake_str.split('_'))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/120": [{"task_id": "Mbpp/120", "solution": "def max_product_tuple(test_list):\n    # Calculate the absolute product for each tuple and return the maximum value\n    res = max(abs(a * b) for a, b in test_list)\n    return res", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/141": [{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    # Iterate over the array from the end to the beginning\n    for cur_size in range(len(arr), 1, -1):\n        # Find the index of the maximum element in the current subarray\n        max_pos = 0\n        for i in range(cur_size):\n            if arr[i] > arr[max_pos]:\n                max_pos = i\n        # If the maximum element is not at the current position, flip it to the front\n        if max_pos != cur_size - 1:\n            # Flip the element to the front\n            arr[:max_pos + 1] = reversed(arr[:max_pos + 1])\n            # Flip the element to its correct position\n            arr[:cur_size] = reversed(arr[:cur_size])\n    return arr", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/116": [{"task_id": "Mbpp/116", "solution": "def tuple_to_int(nums):\n    # Convert each element in the tuple to a string and join them together\n    str_nums = ''.join(str(num) for num in nums)\n    # Convert the resulting string to an integer\n    return int(str_nums)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/161": [{"task_id": "Mbpp/161", "solution": "def remove_elements(original_list, elements_to_remove):\n    # Use a list comprehension to filter out elements that are in the elements_to_remove list\n    result = [element for element in original_list if element not in elements_to_remove]\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/125": [{"task_id": "Mbpp/125", "solution": "def max_difference(binary_string):\n    \"\"\"\n    Calculate the maximum difference between the number of 0s and 1s in any substring of the binary string.\n    \n    :param binary_string: A string consisting of '0's and '1's.\n    :return: The maximum difference between the number of 0s and 1s in any substring.\n    \"\"\"\n    max_diff = 0\n    current_diff = 0\n    for char in binary_string:\n        if char == '0':\n            current_diff -= 1\n        else:\n            current_diff += 1\n        max_diff = max(max_diff, current_diff)\n    return max_diff\n\n# Test cases to verify the correctness of the function\ndef check_function():\n    test_cases = [\n        (\"0100101\", 2),\n        (\"111\", 0),\n        (\"000\", 0),\n        (\"101010\", 1),\n        (\"1101001111\", 2),\n    ]\n    \n    all_passed = True\n    for binary_string, expected in test_cases:\n        result = max_difference(binary_string)\n        if result != expected:\n            print(f\"Test failed for input: {binary_string}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n\n# Run the check function to verify the solution\ncheck_function()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/166": [{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    # Initialize the count of even pairs to 0\n    count = 0\n    # Iterate through each pair of integers in the list\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            # Check if the XOR of the pair results in an even number\n            if ((nums[i] ^ nums[j]) % 2 == 0):\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/227": [{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    # Return the minimum of the three numbers\n    return min(a, b, c)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/97": [{"task_id": "Mbpp/97", "solution": "def frequency_lists(lists):\n    # Initialize an empty dictionary to store the frequency of each element\n    frequency_dict = {}\n    \n    # Iterate through each sublist in the given list of lists\n    for sublist in lists:\n        # Update the frequency dictionary with the elements from the current sublist\n        for element in sublist:\n            if element in frequency_dict:\n                frequency_dict[element] += 1\n            else:\n                frequency_dict[element] = 1\n                \n    return frequency_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/135": [{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    # Calculate the nth hexagonal number using the formula\n    return n * (2 * n - 1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/75": [{"task_id": "Mbpp/75", "solution": "def find_tuples(test_list, K):\n    # Use list comprehension to filter tuples where all elements are divisible by K\n    res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n    return res", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/237": [{"task_id": "Mbpp/237", "solution": "from collections import defaultdict", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/172": [{"task_id": "Mbpp/172", "solution": "def count_occurance(str1):\n    # Initialize a counter to keep track of occurrences\n    count = 0\n    # Iterate through the string to find occurrences of 'std'\n    for i in range(len(str1) - 2):\n        # Check if the substring from current position to current position + 3 is 'std'\n        if str1[i:i+3] == 'std':\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/240": [{"task_id": "Mbpp/240", "solution": "def replace_list(lst1, lst2):\n    # Replace the last element of the first list with the elements of the second list\n    lst1[-1:] = lst2\n    return lst1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/247": [{"task_id": "Mbpp/247", "solution": "def is_palindrome_subsequence(s: str) -> bool:\n    \"\"\"\n    Check if there exists a palindrome subsequence in the given string.\n    \"\"\"\n    n = len(s)\n    # Initialize the dp table with dimensions (len(s), len(s))\n    dp = [[False] * n for _ in range(n)]\n    \n    # Every single character is a palindrome of length 1\n    for i in range(n):\n        dp[i][i] = True\n    \n    # Fill the table\n    for length in range(2, n + 1):  # length of the substring\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = True\n            else:\n                dp[i][j] = dp[i + 1][j] or dp[i][j - 1]\n    \n    return dp[0][n - 1]\n\n# Check function to verify the correctness of the solution\ndef check():\n    test_cases = [\n        (\"abccba\", True),\n        (\"abcdefg\", False),\n        (\"a\", True),\n        (\"aa\", True),\n        (\"abcba\", True),\n        (\"abcde\", False)\n    ]\n    \n    all_passed = True\n    for s, expected in test_cases:\n        result = is_palindrome_subsequence(s)\n        if result != expected:\n            print(f\"Test failed for input: {s}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n\ncheck()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/245": [{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n    \n    # Calculate the maximum increasing subsequence sum ending at each index\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    \n    # Calculate the maximum decreasing subsequence sum starting at each index\n    for i in range(n-1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    \n    # Find the maximum sum of a bitonic sequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    \n    return max_bitonic_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/167": [{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    # If n is 0, the next power of 2 is 1\n    if n == 0:\n        return 1\n    # If n is already a power of 2, return n itself\n    if (n & (n - 1)) == 0:\n        return n\n    # Otherwise, find the next power of 2\n    power = 1\n    while power < n:\n        power <<= 1\n    return power", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/119": [{"task_id": "Mbpp/119", "solution": "def search(arr):\n    # Initialize the result variable\n    result = 0\n    \n    # Iterate through the array\n    for num in arr:\n        # XOR each element with the result\n        result ^= num\n    \n    # Return the result which is the element that appears only once\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/250": [{"task_id": "Mbpp/250", "solution": "def count_X(test_tup, K):\n    # Count the occurrences of K in the tuple using the count method\n    res = test_tup.count(K)\n    return res", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/130": [{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    # Create a dictionary to store the frequency of each item\n    frequency_dict = {}\n    \n    # Iterate over each item in the list\n    for item in lst:\n        # Increment the count of the item in the dictionary\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    \n    # Find the item with the maximum frequency\n    max_item = max(frequency_dict, key=frequency_dict.get)\n    \n    return max_item", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/251": [{"task_id": "Mbpp/251", "solution": "def insert_before_each(lst, element):\n    \"\"\"\n    Insert 'element' before each element in the given list 'lst'.\n    \n    Args:\n    lst (list): The list to insert the element into.\n    element: The element to insert before each element in the list.\n    \n    Returns:\n    list: A new list with 'element' inserted before each element of the original list.\n    \n    Examples:\n    >>> insert_before_each([], 2)\n    []\n    >>> insert_before_each([1, 3, 4], 2)\n    [2, 1, 2, 3, 2, 4]\n    \"\"\"\n    if not lst:  # Handle empty list case\n        return []\n    \n    result = []\n    for item in lst:\n        result.extend([element, item])\n    return result\n\n# Check function to verify the correctness of the solution\ndef check():\n    test_cases = [([], 2, []),\n                  ([1, 3, 4], 2, [2, 1, 2, 3, 2, 4]),\n                  ([5, 6], 1, [1, 5, 1, 6]),\n                  ([7], 0, [0, 7])]\n    \n    all_passed = True\n    for lst, element, expected in test_cases:\n        result = insert_before_each(lst, element)\n        if result != expected:\n            print(f\"Failed for insert_before_each({lst}, {element}). Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n    else:\n        print(\"Some tests failed. Please review your function.\")\n\n# Uncomment the following line to run the check function\n# check()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/253": [{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    # Initialize a counter to count the integer elements\n    count = 0\n    # Iterate through each element in the list\n    for element in lst:\n        # Check if the element is an integer\n        if type(element) is int:\n            # Increment the counter if the element is an integer\n            count += 1\n    # Return the total count of integer elements\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/232": [{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    # Sort the list in descending order and slice the first n elements\n    return sorted(lst, reverse=True)[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/103": [{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number A(n, m).\n    \n    Args:\n    n : int - The number of elements in the permutation.\n    m : int - The number of ascents in the permutation.\n    \n    Returns:\n    int - The Eulerian number A(n, m).\n    \"\"\"\n    if m == 0:\n        return 1 if n == 1 else 0\n    if m == n:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, 1]], "plus_fail_tests": [[1, 1]]}], "Mbpp/235": [{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    \"\"\"\n    Sets all even bits (0-based index) of the given number to 1.\n    \n    Args:\n    n (int): The number whose even bits need to be set.\n    \n    Returns:\n    int: The number with all even bits set to 1.\n    \"\"\"\n    # Generate a mask with all even bits set to 1\n    mask = 0xAAAAAAAA  # This is a hexadecimal representation of a binary number with all even bits set to 1\n    \n    # Use bitwise OR to set even bits of the input number\n    return n | mask", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[999999999]]}], "Mbpp/234": [{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    # Calculate the volume of the cube\n    volume = side_length ** 3\n    return volume", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/252": [{"task_id": "Mbpp/252", "solution": "import cmath\ndef convert(num):\n    # Convert the complex number to polar coordinates\n    polar_coordinates = cmath.polar(num)\n    return polar_coordinates", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/233": [{"task_id": "Mbpp/233", "solution": "import math", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/226": [{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    # Initialize an empty string to store the result\n    result = ''\n    # Iterate through the string, considering only characters at even indices\n    for i in range(0, len(s), 2):\n        result += s[i]\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/238": [{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    # Initialize the count of substrings\n    count = 0\n    # Calculate the number of substrings\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/133": [{"task_id": "Mbpp/133", "solution": "def sum_negativenum(nums):\n    # Initialize sum to 0\n    sum = 0\n    # Iterate through each number in the list\n    for num in nums:\n        # Check if the number is negative\n        if num < 0:\n            # Add the negative number to the sum\n            sum += num\n    return sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/242": [{"task_id": "Mbpp/242", "solution": "def count_charac(str1):\n    # Calculate the length of the string\n    length = len(str1)\n    return length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/222": [{"task_id": "Mbpp/222", "solution": "def check_type(test_tuple):\n    # Extract the type of the first element in the tuple\n    first_type = type(test_tuple[0])\n    # Check if all elements in the tuple have the same type as the first element\n    return all(isinstance(element, first_type) for element in test_tuple)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/105": [{"task_id": "Mbpp/105", "solution": "def count(test_list):\n    # Count the number of True booleans in the list\n    count = sum(test_list)\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/67": [{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        bell = [[0 for i in range(n+1)] for j in range(n+1)]\n        bell[0][0] = 1\n        for i in range(1, n+1):\n            bell[i][0] = bell[i-1][i-1]\n            for j in range(1, i+1):\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        return bell[n][0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/171": [{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    # Calculate the perimeter of a regular pentagon\n    perimeter = 5 * side_length\n    return perimeter", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/224": [{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    # Initialize count of set bits to 0\n    count = 0\n    # Loop until n becomes 0\n    while n:\n        # Increment count if the least significant bit is 1\n        count += n & 1\n        # Right shift n by 1 to check the next bit\n        n >>= 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/162": [{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    # Calculate the sum of the series (n - 2*i) from i=0 to n // 2\n    return sum(n - 2 * i for i in range(n // 2 + 1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/260": [{"task_id": "Mbpp/260", "solution": "import sympy", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/257": [{"task_id": "Mbpp/257", "solution": "def swap_numbers(num1, num2):\n    # Return a tuple with the second number first and then the first number\n    return (num2, num1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/267": [{"task_id": "Mbpp/267", "solution": "def calculate_odd_squares(n):\n    \"\"\"\n    This function takes an integer n and returns a list of tuples. Each tuple contains an odd number and its square,\n    starting from 1 up to n (inclusive if n is odd). If n is 0, it returns an empty list.\n    \"\"\"\n    result = []\n    for i in range(1, n + 1, 2):  # Start from 1, go up to n, step by 2 to get only odd numbers\n        result.append((i, i * i))\n    return result\n\n# Check function to verify the correctness of the solution\ndef check():\n    test_cases = [\n        (0, []),\n        (1, [(1, 1)]),\n        (5, [(1, 1), (3, 9), (5, 25)]),\n        (10, [(1, 1), (3, 9), (5, 25), (7, 49), (9, 81)])\n    ]\n    \n    all_passed = True\n    for n, expected in test_cases:\n        result = calculate_odd_squares(n)\n        if result != expected:\n            print(f\"Test failed for n={n}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n    else:\n        print(\"Some tests failed. Please review your function.\")\n\n# Uncomment the line below to run the check function\n# check()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/272": [{"task_id": "Mbpp/272", "solution": "def rear_extract(test_list):\n    # Extract the last element of each tuple in the list\n    rear_elements = [sub[-1] for sub in test_list]\n    return rear_elements", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/283": [{"task_id": "Mbpp/283", "solution": "def validate(num):\n    # Convert the number to a string to iterate over each digit\n    num_str = str(num)\n    # Iterate through each unique digit in the number\n    for digit in set(num_str):\n        # Count the frequency of the current digit in the number\n        if num_str.count(digit) > int(digit):\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/266": [{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side):\n    # Calculate the lateral surface area of a cube\n    return 4 * side * side", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/268": [{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    # Calculate the n'th star number using the formula\n    return 6 * n * (n - 1) + 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/274": [{"task_id": "Mbpp/274", "solution": "def calculate_binomial_coefficients(n):\n    \"\"\"\n    Calculate the sum of binomial coefficients for a given n.\n    \n    Args:\n    n (int): The number of items.\n    \n    Returns:\n    int: The sum of binomial coefficients.\n    \"\"\"\n    sum_binomials = 0\n    for i in range(n + 1):\n        # Calculate binomial coefficient using the formula: n! / (i! * (n-i)!)\n        binom_coeff = 1\n        for j in range(min(i, n - i)):\n            binom_coeff *= (n - j) / (j + 1)\n        sum_binomials += binom_coeff\n    return int(sum_binomials)\n\n# Check function to verify the correctness of the generated function\ndef check():\n    test_cases = [(3, 8), (4, 16), (5, 32)]\n    all_passed = True\n    for n, expected in test_cases:\n        result = calculate_binomial_coefficients(n)\n        if result != expected:\n            print(f\"Test failed for n={n}. Expected {expected}, got {result}\")\n            all_passed = False\n    if all_passed:\n        print(\"All test cases passed!\")\n\ncheck()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/292": [{"task_id": "Mbpp/292", "solution": "def find(x, y):\n    # Calculate the quotient using integer division\n    quotient = x // y\n    return quotient", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/264": [{"task_id": "Mbpp/264", "solution": "def dog_age(human_years):\n    \"\"\"\n    Converts human years to dog years.\n    \n    Parameters:\n    human_years (int): The age in human years.\n    \n    Returns:\n    int: The age in dog years.\n    \"\"\"\n    if human_years < 0:\n        return \"Age should be a non-negative number.\"\n    elif human_years == 0 or human_years == 1:\n        return human_years * 15\n    elif human_years == 2:\n        return 24\n    else:\n        return 24 + (human_years - 2) * 5", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[12]], "plus_fail_tests": [[100]]}], "Mbpp/293": [{"task_id": "Mbpp/293", "solution": "import math\ndef otherside_rightangle(side1, side2):\n    # Calculate the third side using Pythagorean theorem\n    third_side = math.sqrt(side1**2 + side2**2)\n    return third_side", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/390": [{"task_id": "Mbpp/390", "solution": "def add_string(l, s):\n    # Apply the format string to each element in the list\n    res = [s.format(i) for i in l]\n    return res", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/285": [{"task_id": "Mbpp/285", "solution": "import re", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/279": [{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    # Calculate the nth decagonal number using the formula\n    return 4 * n * n - 3 * n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/259": [{"task_id": "Mbpp/259", "solution": "def update_tuples(tuples_list, update_value):\n    \"\"\"\n    Update the second element of each tuple in the list with the update_value if the first element is the smallest among all.\n    \n    :param tuples_list: List of tuples, each containing at least two elements.\n    :param update_value: The value to update the second element of the tuples.\n    :return: A new list of tuples with the second element updated if the first element is the smallest.\n    \"\"\"\n    if not tuples_list:\n        return []\n\n    # Find the smallest first element\n    min_first_element = min(tuples_list, key=lambda x: x[0])[0]\n\n    # Update the second element of tuples with the smallest first element\n    updated_list = [\n        (t[0], update_value) if t[0] == min_first_element else t for t in tuples_list\n    ]\n\n    return updated_list\n\n# Check function to verify the correctness of the solution\ndef check():\n    test_cases = [([[], [(1, 2), (3, 4), (1, 3)]], 7, [(), (7, 4), (7, 3)]),\n                  ([(-10, 20), (-10, 30), (0, 40)], 100, [(-10, 100), (-10, 100), (0, 40)])]\n    \n    all_passed = True\n    for input_list, update_val, expected in test_cases:\n        result = update_tuples(input_list, update_val)\n        if result != expected:\n            print(f\"Test failed for input {input_list}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n\ncheck()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/309": [{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    # Return the larger of the two numbers\n    if a > b:\n        return a\n    else:\n        return b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/294": [{"task_id": "Mbpp/294", "solution": "def find_max_value(numbers):\n    \"\"\"\n    Finds the maximum value in a list of numbers.\n    \n    The function initializes `max_value` with the smallest possible number for the data type,\n    ensuring that any number in the list will be larger during comparison.\n    \n    Parameters:\n    - numbers: A list of integers.\n    \n    Returns:\n    - The maximum integer value in the list.\n    \"\"\"\n    if not numbers:  # Check if the list is empty\n        return None\n    \n    # Initialize max_value to the smallest possible integer\n    max_value = float('-inf')\n    \n    for num in numbers:\n        if num > max_value:\n            max_value = num\n            \n    return max_value\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    test_cases = [([1, 2, 3], 3), ([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 123), \n                  ([100], 100), ([-1, -2, -3, -4], -1), ([], None)]\n    \n    all_passed = True\n    for nums, expected in test_cases:\n        result = find_max_value(nums)\n        if result != expected:\n            print(f\"Test failed for: {nums}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n    else:\n        print(\"Some tests failed. Please review your function.\")\n\n# Uncomment the following line to run the check function\n# check_solution()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/394": [{"task_id": "Mbpp/394", "solution": "def check_distinct(test_tup):\n    # Check if the length of the tuple is the same as the length of the set created from the tuple\n    # If they are the same, it means there are no duplicates\n    return len(test_tup) == len(set(test_tup))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/391": [{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(list1, list2, list3):\n    # Create a list of dictionaries using the zipped lists\n    result = [dict(zip([item1], [dict(zip([item2], [item3]))])) for item1, item2, item3 in zip(list1, list2, list3)]\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/270": [{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    # Initialize sum to 0\n    sum = 0\n    # Iterate over the list with index\n    for index, value in enumerate(lst):\n        # Check if the index is even and the value is even\n        if index % 2 == 0 and value % 2 == 0:\n            sum += value\n    return sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/282": [{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    # Subtract each element of the second list from the first list element-wise\n    return [a - b for a, b in zip(list1, list2)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/287": [{"task_id": "Mbpp/287", "solution": "def sum_of_squares_of_evens(n):\n    \"\"\"\n    Calculate the sum of squares of the first n even natural numbers.\n    \n    :param n: The number of even natural numbers to consider.\n    :return: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    return sum(i**2 for i in range(1, n+1) * 2)\n\n# Check function to verify the correctness of the solution\ndef check():\n    test_cases = [(1, 4), (2, 20), (3, 56), (4, 120), (5, 220)]\n    all_passed = True\n    for n, expected in test_cases:\n        result = sum_of_squares_of_evens(n)\n        if result != expected:\n            print(f\"Test failed for n={n}. Expected {expected}, got {result}\")\n            all_passed = False\n    if all_passed:\n        print(\"All test cases passed!\")\n\ncheck()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/269": [{"task_id": "Mbpp/269", "solution": "def ascii_value(c):\n    # Convert the character to its ASCII value and return it\n    return ord(c)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/280": [{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, target):\n    # Iterate through the array with index\n    for index, element in enumerate(arr):\n        # Check if the current element matches the target\n        if element == target:\n            return (True, index)\n    # Return (False, -1) if the target is not found\n    return (False, -1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/261": [{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    # Use a generator expression to perform element-wise division and handle division by zero\n    result = tuple(i / j if j != 0 else 0 for i, j in zip(tuple1, tuple2))\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/397": [{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    # Calculate the median of three numbers\n    if (a <= b <= c) or (c <= b <= a):\n        return b\n    elif (b <= a <= c) or (c <= a <= b):\n        return a\n    else:\n        return c", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/436": [{"task_id": "Mbpp/436", "solution": "def neg_nos(nums):\n    # Use list comprehension to filter negative numbers\n    return [num for num in nums if num < 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/305": [{"task_id": "Mbpp/305", "solution": "def extract_words_starting_with_p(words):\n    \"\"\"\n    Extracts words from the input list that start with the letter 'p' (case-insensitive).\n    Handles edge cases like empty input lists or lists within lists.\n    \n    :param words: List of words to filter.\n    :return: List of words starting with 'p'.\n    \"\"\"\n    # Ensure the input is a list\n    if not isinstance(words, list):\n        raise ValueError(\"Input should be a list of words.\")\n    \n    # Filter words starting with 'p' (case-insensitive)\n    result = [word for word in words if isinstance(word, str) and word.lower().startswith('p')]\n    \n    return result\n\n# Check function to verify the correctness of the solution\ndef check():\n    test_cases = [\n        ([\"Pineapple\", \"apple\", \"Peach\", \"banana\"], [\"Pineapple\", \"apple\", \"Peach\"]),\n        ([], []),\n        ([\"P\", \"p\", \"Q\", \"q\"], [\"P\", \"p\"]),\n        ([\"Pineapple\", [\"apple\", \"Peach\"], \"banana\"], [\"Pineapple\", \"apple\", \"Peach\"]),\n        ([\"penguin\", \"parrot\", \"elephant\"], [\"penguin\", \"parrot\"]),\n    ]\n    \n    all_passed = True\n    for words, expected in test_cases:\n        result = extract_words_starting_with_p(words)\n        if result != expected:\n            print(f\"Test failed for input {words}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All tests passed!\")\n    else:\n        print(\"Some tests failed.\")\n\n# Uncomment the line below to run the check function\n# check()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/311": [{"task_id": "Mbpp/311", "solution": "def set_leftmost_unset_bit(n):\n    \"\"\"\n    Sets the leftmost unset bit of the given integer n.\n    \n    Parameters:\n    n (int): The integer whose leftmost unset bit needs to be set.\n    \n    Returns:\n    int: The integer with the leftmost unset bit set.\n    \"\"\"\n    if n == 0:\n        return 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n |= n >> 32  # For handling 64-bit integers\n    return n - 1\n\n# Check function to verify the correctness of the solution\ndef check():\n    test_cases = [\n        (0, 1),\n        (1, 1),\n        (2, 3),\n        (3, 3),\n        (4, 5),\n        (7, 7),\n        (8, 9),\n        (10, 11),\n        (12, 15),\n        (13, 15),\n        (14, 15),\n        (15, 15),\n        (16, 17)\n    ]\n    \n    all_passed = True\n    for n, expected in test_cases:\n        result = set_leftmost_unset_bit(n)\n        if result != expected:\n            print(f\"Test failed for input {n}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n    else:\n        print(\"Some tests failed. Please review your solution.\")\n\n# Uncomment the line below to run the check function\n# check()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/310": [{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    \"\"\"\n    Converts a given string to a tuple of characters, excluding spaces.\n    \n    :param s: The string to be converted.\n    :return: A tuple containing the characters of the string, excluding spaces.\n    \"\"\"\n    # Filter out spaces and convert the string to a tuple of characters\n    return tuple(char for char in s if char != ' ')", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["\n\t"]]}], "Mbpp/296": [{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    # Initialize inversion count\n    inv_count = 0\n    # Traverse each element in the array\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            # If there is an inversion, increment the count\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/300": [{"task_id": "Mbpp/300", "solution": "def count_binary_seq(n):\n    \"\"\"\n    Calculate the count of valid binary sequences of length n.\n    A valid binary sequence is one where there are no consecutive 1's.\n    \n    :param n: Length of the binary sequence\n    :return: Count of valid binary sequences\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    \n    # Initialize the first two base cases\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 2\n    \n    # Fill the dp array using the relation:\n    # dp[i] = dp[i-1] + dp[i-2]\n    # dp[i-1] represents sequences ending with 0\n    # dp[i-2] represents sequences ending with 01\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    \n    return dp[n]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[4]]}], "Mbpp/286": [{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    # Calculate the maximum subarray sum for a single array\n    max_current = max_global = arr[0]\n    for i in range(1, n):\n        max_current = max(arr[i], max_current + arr[i])\n        if max_current > max_global:\n            max_global = max_current\n\n    # Calculate the total sum of the array\n    total_sum = sum(arr)\n\n    # If k is 1, return the result of the single array case\n    if k == 1:\n        return max_global\n\n    # If the total sum is negative, do not add extra sums\n    if total_sum < 0:\n        return max_global\n\n    # Otherwise, the result is total_sum * (k-1) + max_global\n    return max_global + (k - 1) * total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/273": [{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    # Use a tuple comprehension to subtract elements of tuple2 from tuple1\n    result = tuple(x - y for x, y in zip(tuple1, tuple2))\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/276": [{"task_id": "Mbpp/276", "solution": "import math\ndef volume_cylinder(radius, height):\n    # Calculate the volume of the cylinder\n    volume = math.pi * (radius ** 2) * height\n    return volume", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/281": [{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    # Check if the length of the list is the same as the length of the set of the list\n    # If they are the same, all elements are unique\n    return len(lst) == len(set(lst))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/388": [{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    # Initialize the power of 2\n    power = 1\n    # Keep multiplying by 2 until it exceeds n\n    while power * 2 <= n:\n        power *= 2\n    return power", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/420": [{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    # Calculate the cube sum of the first n even natural numbers\n    return sum([(2 * i) ** 3 for i in range(1, n + 1)])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/395": [{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(input_string):\n    # Create a dictionary to store the count of each character\n    char_count = {}\n    \n    # Count the occurrences of each character in the string\n    for char in input_string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first character with a count of 1\n    for char in input_string:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/278": [{"task_id": "Mbpp/278", "solution": "def count_elements_before_tuple(input_tuple):\n    \"\"\"\n    Counts the number of elements before the first tuple in the given tuple.\n    \n    Parameters:\n    input_tuple (tuple): The tuple to be processed.\n    \n    Returns:\n    int: The count of elements before the first tuple in the tuple.\n    \"\"\"\n    count = 0\n    for index, element in enumerate(input_tuple):\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    test_cases = [((1, 2, 3, (4, 5), 6), 3),\n                  ((10, 20, 30, 40, (50, 60), 70), 4),\n                  ((1, (2, 3), 4, 5), 1),\n                  ((1, 2, 3), 0),\n                  (((), 1, 2), 0)]\n    \n    all_passed = True\n    for input_tuple, expected in test_cases:\n        result = count_elements_before_tuple(input_tuple)\n        if result != expected:\n            print(f\"Test failed for: {input_tuple}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n    else:\n        print(\"Some tests failed. Please review your function.\")\n\n# Uncomment the following line to run the check function\n# check_solution()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/290": [{"task_id": "Mbpp/290", "solution": "def max_length(lists):\n    # Find the maximum length of the sublists\n    max_len = max(len(sublist) for sublist in lists)\n    # Return the maximum length and the sublist with that length\n    return (max_len, [sublist for sublist in lists if len(sublist) == max_len][0])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/284": [{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    # Check if all items in the list are equal to the given element\n    return all(item == element for item in lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/392": [{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    # Create a dictionary to store the results of subproblems\n    memo = {0: 0, 1: 1}\n    \n    def helper(x):\n        # If the result is already computed, return it\n        if x in memo:\n            return memo[x]\n        # Compute the maximum sum recursively\n        max_sum = max(x, helper(x // 2) + helper(x // 3) + helper(x // 4) + helper(x // 5))\n        # Store the result in the dictionary\n        memo[x] = max_sum\n        return max_sum\n    \n    return helper(n)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/415": [{"task_id": "Mbpp/415", "solution": "def find_max_product_pair(arr):\n    \"\"\"\n    Finds the pair of distinct elements in the array that has the highest product.\n    \n    Args:\n    arr (list): A list of integers.\n    \n    Returns:\n    tuple: A tuple containing the pair of integers with the highest product.\n    \"\"\"\n    if len(arr) < 2:\n        return None  # Not enough elements to form a pair\n    \n    # Initialize variables to store the maximum and second maximum, and minimum and second minimum\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2, max1 = max1, num\n        elif num > max2:\n            max2 = num\n        \n        if num < min1:\n            min2, min1 = min1, num\n        elif num < min2:\n            min2 = num\n    \n    return (max1, max2) if max1 * max2 > min1 * min2 else (min1, min2)\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    test_cases = [([1, 10, -5, 1, -100], [-100, -5]), \n                  ([5, 1, 2, 7, 3, 4], [7, 5]),\n                  ([-1, -3, -10, -2, -4], [-1, -10]),\n                  ([0, 2, 3, 0, -2, -1], [3, 2])\n                 ]\n    \n    all_passed = True\n    for arr, expected in test_cases:\n        result = find_max_product_pair(arr)\n        if result != expected:\n            print(f\"Failed for {arr}. Expected {expected}, got {result}.\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n    else:\n        print(\"Some test cases failed.\")\n\n# Uncomment the line below to run the check function\n# check_solution()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/265": [{"task_id": "Mbpp/265", "solution": "def chunk_list(lst, n):\n    \"\"\"\n    Splits a given list into n-sized chunks. If the list length is not an exact multiple of n,\n    the last sublist will contain the remaining elements.\n    \n    :param lst: List of elements to be split.\n    :param n: Size of each chunk.\n    :return: A list of n-sized chunks.\n    \"\"\"\n    # Initialize an empty list to store the chunks\n    chunks = []\n    # Iterate over the list in steps of n\n    for i in range(0, len(lst), n):\n        # Append the sliced sublist to the chunks list\n        chunks.append(lst[i:i + n])\n    return chunks\n\n# Check function to verify the correctness of the generated function\ndef check():\n    test_cases = [([1, 2, 3, 4, 5], 2, [[1, 2], [3, 4], [5]]),\n                  ([1, 2, 3, 4, 5, 6], 3, [[1, 2, 3], [4, 5, 6]]),\n                  ([1, 2, 3, 4, 5, 6, 7], 3, [[1, 2, 3], [4, 5, 6], [7]])]\n    \n    all_passed = True\n    for lst, n, expected in test_cases:\n        result = chunk_list(lst, n)\n        if result != expected:\n            print(f\"Test failed for lst={lst} with n={n}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n\n# Uncomment the following line to run the check function\n# check()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/262": [{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    # Split the list into two parts based on the length L\n    first_part = lst[:L]\n    second_part = lst[L:]\n    # Return the two parts as a tuple\n    return (first_part, second_part)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/312": [{"task_id": "Mbpp/312", "solution": "import math\ndef volume_cone(radius, height):\n    # Calculate the volume of a cone using the formula V = (1/3)\u03c0r\u00b2h\n    volume = (1/3) * math.pi * radius**2 * height\n    return volume", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/256": [{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    # If n is less than 2, there are no prime numbers less than n\n    if n < 2:\n        return 0\n    \n    # Initialize a list to mark prime numbers\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False  # 0 and 1 are not prime numbers\n    \n    # Use the Sieve of Eratosthenes algorithm to find all prime numbers less than n\n    for start in range(2, int(n**0.5) + 1):\n        if is_prime[start]:\n            for multiple in range(start*start, n, start):\n                is_prime[multiple] = False\n    \n    # Count and return the number of prime numbers\n    return sum(is_prime)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/439": [{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    # Convert each number in the list to a string and join them together\n    combined_str = ''.join(str(number) for number in numbers)\n    # Convert the combined string back to an integer\n    return int(combined_str)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/297": [{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    # Initialize an empty list to store the flattened elements\n    flat_list = []\n    # Iterate through each element in the nested list\n    for element in nested_list:\n        # If the element is a list, extend the flat_list with its elements\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            # If the element is not a list, append it to the flat_list\n            flat_list.append(element)\n    return flat_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/405": [{"task_id": "Mbpp/405", "solution": "def check_tuplex(test_tup, K):\n    # Check if K is in test_tup using the 'in' keyword\n    if K in test_tup:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/418": [{"task_id": "Mbpp/418", "solution": "def Find_Max(input_list):\n    # Find the element with maximum length using max function with key=len\n    max_element = max(input_list, key=len)\n    return max_element", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/299": [{"task_id": "Mbpp/299", "solution": "def max_aggregate(lst):\n    # Initialize a dictionary to keep track of the maximum aggregate for each person\n    max_aggregate_dict = {}\n    \n    # Iterate through each tuple in the list\n    for name, score in lst:\n        # If the name is already in the dictionary, add the score to the existing total\n        if name in max_aggregate_dict:\n            max_aggregate_dict[name] += score\n        else:\n            # Otherwise, initialize the name in the dictionary with the score\n            max_aggregate_dict[name] = score\n    \n    # Find the name with the maximum aggregate score\n    max_name = max(max_aggregate_dict, key=max_aggregate_dict.get)\n    \n    # Return the name with the maximum aggregate score and the score itself as a tuple\n    return (max_name, max_aggregate_dict[max_name])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/430": [{"task_id": "Mbpp/430", "solution": "import math", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/453": [{"task_id": "Mbpp/453", "solution": "def sum_even_factors(n):\n    \"\"\"\n    Calculate the sum of all even factors of a given number n.\n    \n    :param n: Integer, the number to find even factors for.\n    :return: Integer, the sum of all even factors of n.\n    \"\"\"\n    sum_even = 0\n    # Iterate through all numbers from 2 to n, checking for even factors\n    for i in range(2, n + 1, 2):  # Only check even numbers\n        if n % i == 0:\n            sum_even += i\n    return sum_even\n\n# Check function to verify the correctness of the solution\ndef check():\n    test_cases = [(1, 0), (6, 2), (28, 12), (12, 10), (30, 42)]\n    all_passed = True\n    for n, expected in test_cases:\n        result = sum_even_factors(n)\n        if result != expected:\n            print(f\"Test failed for n={n}. Expected {expected}, got {result}\")\n            all_passed = False\n    if all_passed:\n        print(\"All test cases passed!\")\n\ncheck()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/422": [{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    # Calculate the average of the sum of cubes\n    average = sum_of_cubes / n\n    return average", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/457": [{"task_id": "Mbpp/457", "solution": "def Find_Min(lst):\n    # Find the sublist with the minimum length\n    min_length = min(len(sublist) for sublist in lst)\n    # Return the first sublist that matches the minimum length\n    for sublist in lst:\n        if len(sublist) == min_length:\n            return sublist", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/459": [{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    \"\"\"\n    Removes all uppercase characters from the given string.\n    \n    :param s: The string from which to remove uppercase characters.\n    :return: A new string with all uppercase characters removed.\n    \"\"\"\n    return ''.join([char for char in s if not char.isupper()])", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["ThiS%^%!s&a(mY)TesTStR%i*ng"]]}], "Mbpp/458": [{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    # Calculate the area of the rectangle\n    area = length * width\n    return area", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/447": [{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    # Use list comprehension to find the cube of each element in the list\n    return [i ** 3 for i in nums]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/456": [{"task_id": "Mbpp/456", "solution": "def reverse_string_list(str_list):\n    # Reverse each string in the list using a list comprehension\n    return [s[::-1] for s in str_list]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/460": [{"task_id": "Mbpp/460", "solution": "def Extract(test_list):\n    # Extract the first element from each sublist\n    res = [sub_list[0] for sub_list in test_list]\n    return res", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/479": [{"task_id": "Mbpp/479", "solution": "def first_Digit(n):\n    # Convert the number to a string and return the first character as an integer\n    return int(str(abs(n))[0])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/446": [{"task_id": "Mbpp/446", "solution": "def count_Occurrence(test_tup, test_list):\n    # Initialize the result counter\n    res = 0\n    # Iterate through each element in the test_list\n    for ele in test_list:\n        # Count the occurrences of the current element in the test_tup\n        res += test_tup.count(ele)\n    return res", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/454": [{"task_id": "Mbpp/454", "solution": "def text_match_wordz(text):\n    # Check if 'z' is present in the text\n    return 'z' in text", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/308": [{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    # Generate all possible products\n    products = [x * y for x in list1 for y in list2]\n    # Sort the products in descending order and select the top n products\n    largest_products = sorted(products, reverse=True)[:n]\n    return largest_products", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/277": [{"task_id": "Mbpp/277", "solution": "def dict_filter(dict1, n):\n    # Filter the dictionary to only include entries with values >= n\n    result = {key: value for key, value in dict1.items() if value >= n}\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/455": [{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    # List of months with 31 days\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    # Check if the given month is in the list\n    if month in months_with_31_days:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/432": [{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, c, height):\n    # Calculate the median length of the trapezium\n    median_length = (a + c) / 2\n    return median_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/406": [{"task_id": "Mbpp/406", "solution": "def find_Parity(n):\n    # Check if the number is even\n    if n % 2 == 0:\n        return False\n    else:\n        return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/421": [{"task_id": "Mbpp/421", "solution": "def join_elements_with_delimiter(input_tuple, delimiter):\n    \"\"\"\n    Joins all elements in the input_tuple into a single string, separated by the specified delimiter.\n    \n    Parameters:\n    - input_tuple: A tuple containing elements of various data types.\n    - delimiter: A string used to separate the elements in the final output string.\n    \n    Returns:\n    A string with all elements from the input_tuple joined by the delimiter.\n    \"\"\"\n    # Convert all elements in the tuple to strings\n    string_elements = map(str, input_tuple)\n    # Join the string elements with the specified delimiter\n    result_string = delimiter.join(string_elements)\n    return result_string\n\n# Test cases to verify the correctness of the function\ndef check_function():\n    test_cases = [((('a', 'b', 'c', 'd'), '-'), 'a-b-c-d'),\n                  (((1, 2, 3, 4), ','), '1,2,3,4'),\n                  ((('hello', 'world'), ' '), 'hello world'),\n                  (((True, False, 'Python'), ''), 'TrueFalsePython')]\n    \n    all_passed = True\n    for inputs, expected in test_cases:\n        result = join_elements_with_delimiter(*inputs)\n        if result != expected:\n            print(f\"Test failed for inputs {inputs}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n\n# Uncomment the following line to run the check function\n# check_function()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/398": [{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    \"\"\"\n    Calculate the sum of the digits of each number in the list.\n    \n    Args:\n    numbers (list): A list of integers.\n    \n    Returns:\n    list: A list containing the sum of the digits of each number in the input list.\n    \"\"\"\n    result = []\n    for num in numbers:\n        if isinstance(num, int):\n            sum_digits = sum(int(digit) for digit in str(abs(num)))\n            result.append(sum_digits)\n        else:\n            result.append(None)  # Handle non-integer inputs gracefully\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[10, 2, 56]]], "plus_fail_tests": [[[]]]}], "Mbpp/419": [{"task_id": "Mbpp/419", "solution": "def round_and_sum(nums):\n    # Round each number in the list and calculate the sum\n    rounded_sum = sum(round(num) for num in nums)\n    # Multiply the sum by the length of the list\n    result = rounded_sum * len(nums)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/404": [{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    # Use the built-in min function to find the minimum of two numbers\n    return min(a, b)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/424": [{"task_id": "Mbpp/424", "solution": "def extract_last_characters(input_tuple):\n    \"\"\"\n    Extracts the last character from each string in the given tuple and returns a list of these characters.\n    \n    Example:\n    extract_last_characters((\"hello\", \"world\")) should return ['o', 'd']\n    \"\"\"\n    return [s[-1] for s in input_tuple]\n\n# Test the function to ensure it works as expected\ndef check_function():\n    test_cases = [\n        ((\"\", \"\"), []),\n        (\"hello\", [\"o\"]),\n        (\"world\", [\"d\"]),\n        (\"python\", [\"n\"]),\n        ((\"a\", \"b\", \"c\"), [\"a\", \"b\", \"c\"]),\n        ((\"hello\", \"world\", \"python\"), [\"o\", \"d\", \"n\"]),\n    ]\n    \n    all_passed = True\n    for input_tuple, expected in test_cases:\n        result = extract_last_characters(input_tuple)\n        if result != expected:\n            print(f\"Test failed for input {input_tuple}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All tests passed!\")\n    else:\n        print(\"Some tests failed. Please review your function.\")\n\n# Uncomment the following line to run the check function\n# check_function()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/560": [{"task_id": "Mbpp/560", "solution": "def union_elements(tup1, tup2):\n    # Convert tuples to sets, find the union, and convert back to tuple\n    result = tuple(set(tup1) | set(tup2))\n    # Return the sorted tuple\n    return tuple(sorted(result))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/437": [{"task_id": "Mbpp/437", "solution": "def remove_odd(string):\n    # Initialize an empty string to store the result\n    result = ''\n    # Iterate over the string, taking every second character starting from index 1\n    for i in range(1, len(string), 2):\n        result += string[i]\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/472": [{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    # Check if the list is empty or has only one element\n    if len(lst) <= 1:\n        return True\n    # Sort the list to check for consecutiveness\n    sorted_lst = sorted(lst)\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i] + 1 != sorted_lst[i + 1]:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/435": [{"task_id": "Mbpp/435", "solution": "def last_Digit(n):\n    # Return the last digit of the number\n    return abs(n) % 10", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/462": [{"task_id": "Mbpp/462", "solution": "from typing import List", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/410": [{"task_id": "Mbpp/410", "solution": "def find_minimum(numbers):\n    \"\"\"\n    Finds the minimum value in a list of integers.\n    \n    Parameters:\n    numbers (list): A list of integers.\n    \n    Returns:\n    int: The minimum integer in the list.\n    \"\"\"\n    if not numbers:  # Check if the list is empty\n        return None  # Return None if the list is empty\n    \n    # Initialize min_val with the largest possible integer\n    min_val = float('inf')\n    \n    for num in numbers:\n        if num < min_val:\n            min_val = num\n            \n    return min_val\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    test_cases = [([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 1),\n                  ([10, 22, 5, 75, 65, 80], 5),\n                  ([1], 1),\n                  ([], None),\n                  ([-1, -2, -3, 0], -3)]\n    \n    all_passed = True\n    for nums, expected in test_cases:\n        result = find_minimum(nums)\n        if result != expected:\n            print(f\"Test failed for: {nums}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n    else:\n        print(\"Some tests failed. Please review your function.\")\n\n# Call the check function to verify the solution\ncheck_solution()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/463": [{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    # Initialize variables to store the maximum and minimum products up to the current position\n    max_product = min_product = result = arr[0]\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, len(arr)):\n        # If the current element is negative, swap max and min products\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        # Update the maximum and minimum products up to the current position\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        # Update the result with the maximum product found so far\n        result = max(result, max_product)\n    \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/474": [{"task_id": "Mbpp/474", "solution": "def replace_char(string, old_char, new_char):\n    # Replace occurrences of old_char with new_char in the string\n    return string.replace(old_char, new_char)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/450": [{"task_id": "Mbpp/450", "solution": "def extract_string(strings, size):\n    # Use list comprehension to filter strings that match the specified size\n    return [s for s in strings if len(s) == size]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/414": [{"task_id": "Mbpp/414", "solution": "def overlapping(list1, list2):\n    # Check if any value in list1 exists in list2\n    return any(item in list2 for item in list1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/433": [{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    # Check if the given number is greater than all elements in the array\n    for element in arr:\n        if num <= element:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/468": [{"task_id": "Mbpp/468", "solution": "from typing import List", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/413": [{"task_id": "Mbpp/413", "solution": "def extract_nth_element(test_list, n):\n    # Extracts the nth element from each tuple in the list\n    res = [sub[n] for sub in test_list]\n    return res", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/409": [{"task_id": "Mbpp/409", "solution": "def min_product_tuple(pairs):\n    # Calculate the product of each tuple and find the minimum product\n    min_product = min([x * y for x, y in pairs])\n    return min_product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/301": [{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    \"\"\"\n    Calculate the depth of a nested dictionary.\n    \n    :param d: The dictionary to calculate the depth of.\n    :return: The depth of the dictionary.\n    \"\"\"\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(i) for i in d.values()), default=0)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[{"a": 1, "b": {"c": {"d": {}}}}]], "plus_fail_tests": [[{}]]}], "Mbpp/471": [{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    # Initialize result to 1\n    result = 1\n    # Multiply each number in the array and take modulo n\n    for num in arr:\n        result = (result * num) % n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/451": [{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(input_string):\n    \"\"\"\n    Removes all whitespaces from the input string.\n    \n    Parameters:\n    - input_string (str): The string from which to remove whitespaces.\n    \n    Returns:\n    - str: The string with all whitespaces removed.\n    \"\"\"\n    # Split the string into a list of words, filtering out any empty strings that may occur due to multiple spaces\n    words = input_string.split()\n    # Join the list of words back into a string without any additional separators\n    return ''.join(words)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["\n\t"]]}], "Mbpp/445": [{"task_id": "Mbpp/445", "solution": "def convert_nested_lists_to_tuples(nested_lists):\n    \"\"\"\n    Convert a nested list of lists into a nested tuple of tuples.\n    \n    :param nested_lists: List of lists to be converted.\n    :return: Nested tuple of tuples.\n    \"\"\"\n    return tuple(map(convert_nested_lists_to_tuples, nested_lists)) if nested_lists else nested_lists\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    test_cases = [\n        ([], ()),\n        ([[1, 2], [3, 4]], ((1, 2), (3, 4))),\n        ([[1, 2, [3, 4]], [5, 6]], ((1, 2, (3, 4)), (5, 6)))\n    ]\n    \n    all_passed = True\n    for i, (input_data, expected) in enumerate(test_cases):\n        result = convert_nested_lists_to_tuples(input_data)\n        if result != expected:\n            print(f\"Test case {i+1} failed: expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n    else:\n        print(\"Some test cases failed. Please review your function.\")\n\n# Running the check function to validate the solution\ncheck_solution()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/559": [{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    # Initialize variables to store the maximum sum so far and the current sum\n    max_so_far = 0\n    max_ending_here = 0\n    \n    # Iterate through the array\n    for i in range(0, n):\n        # Update the current sum\n        max_ending_here = max_ending_here + arr[i]\n        # If current sum is greater than the maximum sum so far, update it\n        if (max_so_far < max_ending_here):\n            max_so_far = max_ending_here\n        # If current sum becomes negative, reset it to 0\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/555": [{"task_id": "Mbpp/555", "solution": "def difference(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    # Calculate the sum of the first n natural numbers\n    sum_of_naturals = sum([i for i in range(1, n+1)])\n    # Return the difference between the two sums\n    return sum_of_cubes - sum_of_naturals", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/465": [{"task_id": "Mbpp/465", "solution": "def drop_empty(colours):\n    # Filter out any key-value pairs where the value is None\n    return {k: v for k, v in colours.items() if v is not None}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/306": [{"task_id": "Mbpp/306", "solution": "def find_max_increasing_sum(arr):\n    \"\"\"\n    Finds the maximum sum of an increasing subsequence in the given array.\n    \n    Parameters:\n    arr (list): A list of integers.\n    \n    Returns:\n    int: The maximum sum of an increasing subsequence.\n    \"\"\"\n    if not arr:\n        return 0\n\n    n = len(arr)\n    max_sum = [0] * n\n    max_sum[0] = arr[0]\n\n    for i in range(1, n):\n        max_sum[i] = arr[i]\n        for k in range(i):\n            if arr[k] < arr[i]:\n                max_sum[i] = max(max_sum[i], max_sum[k] + arr[i])\n\n    return max(max_sum)\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    test_cases = [([10, 22, 9, 33, 21, 50, 41, 60], 123),\n                  ([5, 4, 3, 2, 1], 5),\n                  ([1, 3, 6, 5, 2, 8], 16),\n                  ([], 0),\n                  ([7], 7)]\n    \n    all_passed = True\n    for idx, (arr, expected) in enumerate(test_cases):\n        result = find_max_increasing_sum(arr)\n        if result != expected:\n            print(f\"Test case {idx + 1} failed: expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n\ncheck_solution()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/448": [{"task_id": "Mbpp/448", "solution": "def sum_perrin(n):\n    \"\"\"\n    Calculate the sum of the first n Perrin numbers.\n    \n    The Perrin sequence is defined as follows:\n    P(0) = 3, P(1) = 0, P(2) = 2,\n    and for k >= 3, P(k) = P(k-2) + P(k-3).\n    \n    Args:\n    n (int): The number of terms in the Perrin sequence to sum.\n    \n    Returns:\n    int: The sum of the first n Perrin numbers.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 3  # 3 + 0\n    \n    p0, p1, p2 = 3, 0, 2\n    sum_perrin = p0 + p1 + p2\n    \n    for _ in range(3, n + 1):\n        p_next = p0 + p1\n        sum_perrin += p_next\n        p0, p1, p2 = p1, p_next, p2\n    \n    return sum_perrin\n\n# Check function to verify the correctness of the generated function\ndef check():\n    test_cases = [(0, 0), (1, 3), (2, 3), (3, 5), (10, 82)]\n    all_passed = True\n    for n, expected in test_cases:\n        result = sum_perrin(n)\n        if result != expected:\n            print(f\"Test failed for n={n}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n\ncheck()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/426": [{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(nums):\n    # Use list comprehension to filter odd numbers\n    return [num for num in nums if num % 2 != 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/564": [{"task_id": "Mbpp/564", "solution": "def equal_pairs(lst):\n    \"\"\"\n    Counts the number of pairs in the list that have equal elements.\n    \n    Parameters:\n    lst (list): A list of integers.\n    \n    Returns:\n    int: The number of pairs with equal elements.\n    \"\"\"\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] == lst[j]:\n                count += 1\n    return count\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    test_cases = [([1, 2, 3, 2, 3], 2), ([1, 1, 1, 1], 6), ([1, 2, 3], 0)]\n    all_passed = True\n    for inputs, expected in test_cases:\n        result = equal_pairs(inputs)\n        if result != expected:\n            print(f\"Test failed for input {inputs}. Expected {expected}, got {result}\")\n            all_passed = False\n    if all_passed:\n        print(\"All test cases passed!\")\n\ncheck_solution()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/428": [{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2  # Initialize the gap size to half of the array length\n    \n    # Start with a big gap, then reduce the gap\n    while gap > 0:\n        for i in range(gap, n):\n            # Save the current element\n            temp = arr[i]\n            j = i\n            # Shift earlier gap-sorted elements up until the correct location for arr[i] is found\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            # Put temp (the original arr[i]) in its correct location\n            arr[j] = temp\n        gap //= 2  # Reduce the gap for the next round\n    \n    return arr", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/565": [{"task_id": "Mbpp/565", "solution": "def split(string):\n    # Split the string into a list of characters\n    return list(string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/563": [{"task_id": "Mbpp/563", "solution": "def check_palindrome(s):\n    \"\"\"\n    Checks if the given string is a palindrome.\n    \n    Args:\n    s (str): The string to check.\n    \n    Returns:\n    bool: True if the string is a palindrome, False otherwise.\n    \"\"\"\n    # Normalize the string by removing non-alphanumeric characters and converting to lowercase\n    normalized_str = ''.join(char.lower() for char in s if char.isalnum())\n    return normalized_str == normalized_str[::-1]\n\n# Test cases to verify the correctness of the function\ntest_cases = [\n    (\"A man, a plan, a canal, Panama\", True),\n    (\"No lemon, no melon\", True),\n    (\"Hello, World!\", False),\n    (\"\", True),\n    (\"Was it a car or a cat I saw?\", True)\n]\n\n# Function to check all test cases\ndef check_function():\n    all_passed = True\n    for test_input, expected in test_cases:\n        result = check_palindrome(test_input)\n        if result != expected:\n            print(f\"Test failed for: \\\"{test_input}\\\". Expected {expected}, got {result}\")\n            all_passed = False\n    if all_passed:\n        print(\"All test cases passed!\")\n\n# Run the check function\ncheck_function()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/566": [{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    # Convert the integer to a string, iterate over each character, convert it back to an integer, and sum them up\n    return sum(int(digit) for digit in str(n))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/567": [{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    # Iterate through the list and check if each element is less than or equal to the next\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/568": [{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    # Create a list of n empty dictionaries\n    result = [{} for _ in range(n)]\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/557": [{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    # Toggle the case of each character in the string\n    toggled = ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    return toggled", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/427": [{"task_id": "Mbpp/427", "solution": "from datetime import datetime", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/429": [{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    # Use a generator expression to compute the elementwise AND operation\n    result = tuple(a & b for a, b in zip(tuple1, tuple2))\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/476": [{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    # Calculate the sum of the maximum and minimum values in the array\n    return max(arr) + min(arr)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/473": [{"task_id": "Mbpp/473", "solution": "def tuple_intersection(list1, list2):\n    # Convert each tuple in the lists to a sorted tuple to handle unordered elements\n    set1 = {tuple(sorted(t)) for t in list1}\n    set2 = {tuple(sorted(t)) for t in list2}\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Return the intersection as a frozenset to ensure immutability\n    return frozenset(intersection)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/470": [{"task_id": "Mbpp/470", "solution": "def add_pairwise(test_tuple):\n    # Initialize an empty list to store the results\n    result = []\n    # Iterate through the tuple, stopping at the second-to-last element\n    for i in range(len(test_tuple) - 1):\n        # Add the current element and the next element, and append to the result list\n        result.append(test_tuple[i] + test_tuple[i + 1])\n    return tuple(result)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/478": [{"task_id": "Mbpp/478", "solution": "def remove_lowercase(string):\n    # Use a list comprehension to filter out lowercase letters\n    result = [char for char in string if char.isupper() or not char.isalpha()]\n    # Join the list back into a string and return\n    return ''.join(result)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/558": [{"task_id": "Mbpp/558", "solution": "def absolute_difference(num1, num2):\n    \"\"\"\n    Calculate the absolute difference between two integers after extracting their digits.\n    \n    Args:\n    num1 (int): The first integer.\n    num2 (int): The second integer.\n    \n    Returns:\n    int: The absolute difference between the digits of the two integers.\n    \"\"\"\n    # Extract digits and calculate the absolute difference\n    return abs(int(str(abs(num1)).replace(\" \", \"\")) - int(str(abs(num2)).replace(\" \", \"\")))\n\n# Test cases to verify the correctness of the function\ndef check_function():\n    test_cases = [\n        ((1, 2), 1),\n        ((10, 20), 10),\n        ((-10, 20), 30),\n        ((-1, -2), 1),\n        ((123, 456), 333),\n        ((12345, 67890), 55545)\n    ]\n    \n    all_passed = True\n    for inputs, expected in test_cases:\n        result = absolute_difference(*inputs)\n        if result != expected:\n            print(f\"Test failed for inputs {inputs}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n\n# Uncomment the following line to run the check function\n# check_function()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/477": [{"task_id": "Mbpp/477", "solution": "def is_lower(text):\n    # Convert the given string to lower case\n    return text.lower()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/425": [{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    # Initialize a counter to keep track of the occurrences\n    count = 0\n    # Iterate through each sublist in the given list\n    for sublist in lst:\n        # If the current sublist contains the specified element, increment the counter\n        if element in sublist:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/556": [{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    # Initialize count of pairs with odd XOR\n    count = 0\n    \n    # Iterate through each pair in the array\n    for i in range(n):\n        for j in range(i + 1, n):\n            # Check if the XOR of the pair is odd\n            if ((arr[i] ^ arr[j]) & 1):\n                count += 1\n                \n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/412": [{"task_id": "Mbpp/412", "solution": "def remove_odd(lst):\n    # Use list comprehension to filter out odd numbers\n    return [num for num in lst if num % 2 == 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/475": [{"task_id": "Mbpp/475", "solution": "def sort_counter(dict1):\n    # Sort the dictionary by value in descending order and return as a list of tuples\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/441": [{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    # Calculate the surface area of a cube\n    return 6 * size * size", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/562": [{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(test_list):\n    # Find the maximum length among the sublists\n    max_length = max(len(sublist) for sublist in test_list)\n    return max_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/440": [{"task_id": "Mbpp/440", "solution": "import re", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/554": [{"task_id": "Mbpp/554", "solution": "def Split(lst):\n    # Use list comprehension to filter out only odd numbers\n    return [num for num in lst if num % 2 != 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/577": [{"task_id": "Mbpp/577", "solution": "def last_digit_of_factorial(n):\n    \"\"\"\n    Calculate the last digit of the factorial of a given non-negative integer.\n    If the input is not a non-negative integer, return -1.\n    \n    Examples:\n    last_digit_of_factorial(5) should return 0.\n    last_digit_of_factorial(10) should return 0.\n    last_digit_of_factorial(-1) should return -1.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        return -1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n        # Since the last digit is what we're interested in,\n        # we can take the modulus of 10 to keep only the last digit.\n        factorial %= 10\n    return factorial % 10\n\n# Check function to verify the correctness of the solution\ndef check():\n    test_cases = [\n        (5, 0),\n        (10, 0),\n        (-1, -1),\n        (3, 6),\n        (0, 1),\n        (1, 1),\n    ]\n    \n    all_passed = True\n    for n, expected in test_cases:\n        result = last_digit_of_factorial(n)\n        if result != expected:\n            print(f\"Test failed for input {n}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n\ncheck()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/586": [{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    # Split the array at the nth element and add the first part to the end\n    return arr[n:] + arr[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/590": [{"task_id": "Mbpp/590", "solution": "def polar_to_rectangular(magnitude, angle):\n    \"\"\"\n    Converts polar coordinates to rectangular coordinates.\n    \n    Parameters:\n    magnitude (float): The magnitude of the complex number.\n    angle (float): The angle in radians of the complex number.\n    \n    Returns:\n    complex: The complex number in rectangular form.\n    \"\"\"\n    real_part = magnitude * cos(angle)\n    imaginary_part = magnitude * sin(angle)\n    \n    # Constructing the complex number\n    complex_number = complex(real_part, imaginary_part)\n    return complex_number\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    test_cases = [\n        (5, 1.0471975511965976, 4.330127018922193+2.5000000000000004j),  # (magnitude, angle, expected result)\n        (10, 0, 10+0j),\n        (1, 3.141592653589793, -1+1.2246467991473532e-16j),\n    ]\n    \n    all_passed = True\n    for magnitude, angle, expected in test_cases:\n        result = polar_to_rectangular(magnitude, angle)\n        if result != expected:\n            print(f\"Test failed for magnitude={magnitude}, angle={angle}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n    else:\n        print(\"Some tests failed. Please review your function.\")\n\n# Uncomment the following line to run the check function\n# check_solution()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/572": [{"task_id": "Mbpp/572", "solution": "def remove_duplicates_from_lists(lists):\n    \"\"\"\n    Removes duplicate numbers from each list in the input list of lists.\n    \n    Parameters:\n    lists (list of list of int): A list containing multiple lists of numbers.\n    \n    Returns:\n    list of list of int: A new list of lists with duplicates removed from each sublist.\n    \"\"\"\n    result = []\n    for lst in lists:\n        # Convert each sublist to a set to remove duplicates, then back to a list\n        unique_lst = list(set(lst))\n        result.append(unique_lst)\n    return result\n\n# Check function to verify the correctness of the solution\ndef check():\n    test_cases = [([[], [1], [1, 2], [1, 2, 3], [1, 2, 3, 4]], [[], [1], [1, 2], [1, 2, 3], [1, 2, 3, 4]]),\n                  ([[], [1, 1, 1], [2, 2, 2], [3, 3, 3, 3]], [[], [1], [2], [3]])]\n    \n    all_passed = True\n    for i, (inputs, expected) in enumerate(test_cases):\n        result = remove_duplicates_from_lists(inputs)\n        if result != expected:\n            print(f\"Test case {i+1} failed: expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n    else:\n        print(\"Some test cases failed.\")\n\n# Uncomment the following line to run the check function\n# check()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/569": [{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    # Use list comprehension to sort each sublist in the given list of lists\n    sorted_list = [sorted(sublist) for sublist in list_of_lists]\n    return sorted_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/580": [{"task_id": "Mbpp/580", "solution": "def replace_odds_with_none(input_tuple):\n    \"\"\"\n    Given a tuple of integers, return a new tuple where all odd integers are replaced with None.\n    The function should not modify the original tuple, as tuples are immutable in Python.\n    \n    Examples:\n    replace_odds_with_none((1, 2, 3, 4)) == (None, 2, None, 4)\n    replace_odds_with_none((2, 4, 6)) == (2, 4, 6)\n    replace_odds_with_none((11,)) == (None,)\n    \"\"\"\n    return tuple(None if x % 2 != 0 else x for x in input_tuple)\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    test_cases = [((1, 2, 3, 4), (None, 2, None, 4)),\n                  ((2, 4, 6), (2, 4, 6)),\n                  ((11,), (None,)),\n                  ((1, 3, 5, 7), (None, None, None, None))]\n    \n    all_passed = True\n    for input_tuple, expected in test_cases:\n        result = replace_odds_with_none(input_tuple)\n        if result != expected:\n            print(f\"Test failed for input {input_tuple}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n\n# Uncomment the following line to run the check function\n# check_solution()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/585": [{"task_id": "Mbpp/585", "solution": "def expensive_items(data, n):\n    # Sort the data based on the price in descending order\n    sorted_data = sorted(data, key=lambda x: x['price'], reverse=True)\n    # Return the first n items from the sorted list\n    return sorted_data[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/583": [{"task_id": "Mbpp/583", "solution": "def compute_nth_catalan(n):\n    \"\"\"\n    Calculate the nth Catalan number using a dynamic programming approach.\n    \n    Args:\n    n (int): The position of the Catalan number to compute.\n    \n    Returns:\n    int: The nth Catalan number.\n    \"\"\"\n    if n <= 1:\n        return 1\n\n    catalan = [0] * (n + 1)\n    catalan[0], catalan[1] = 1, 1\n\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n\n    return catalan[n]\n\n# Check function to verify the correctness of the generated function\ndef check():\n    test_cases = {\n        0: 1,\n        1: 1,\n        2: 2,\n        3: 5,\n        4: 14,\n        5: 42,\n    }\n    \n    all_passed = True\n    for n, expected in test_cases.items():\n        result = compute_nth_catalan(n)\n        if result != expected:\n            print(f\"Test failed for n={n}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n\ncheck()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/581": [{"task_id": "Mbpp/581", "solution": "import math", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/592": [{"task_id": "Mbpp/592", "solution": "from math import comb", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/589": [{"task_id": "Mbpp/589", "solution": "def find_perfect_squares(start, end):\n    \"\"\"\n    Find all perfect squares between the start and end numbers, inclusive.\n    \n    Args:\n    start (int): The start of the range.\n    end (int): The end of the range.\n    \n    Returns:\n    list: A list of perfect squares within the specified range.\n    \"\"\"\n    return [i**2 for i in range(int(start**0.5), int(end**0.5) + 1) if i**2 >= start and i**2 <= end]\n\n# Check function to verify the correctness of the solution\ndef check():\n    test_cases = [\n        (1, 16, [1, 4, 9, 16]),\n        (5, 30, [9, 16, 25]),\n        (10, 10, []),\n        (25, 25, [25]),\n        (1, 100, [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\n    ]\n    \n    all_passed = True\n    for start, end, expected in test_cases:\n        result = find_perfect_squares(start, end)\n        if result != expected:\n            print(f\"Test failed for range ({start}, {end}). Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n    else:\n        print(\"Some tests failed. Please review your function.\")\n\n# Uncomment the following line to run the check function\n# check()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/579": [{"task_id": "Mbpp/579", "solution": "def find_dissimilar(test_tup1, test_tup2):\n    # Find the symmetric difference between the two tuples\n    res = tuple(set(test_tup1) ^ set(test_tup2))\n    return res", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/573": [{"task_id": "Mbpp/573", "solution": "def unique_product(lst):\n    # Calculate the product of unique numbers in the list\n    product = 1\n    for num in set(lst):\n        product *= num\n    return product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/576": [{"task_id": "Mbpp/576", "solution": "def merge_and_sum_lists(list1, list2):\n    \"\"\"\n    Merges two lists of integers and calculates the sum of the elements at the even indices.\n    \n    Parameters:\n    - list1: List[int], the first list of integers.\n    - list2: List[int], the second list of integers.\n    \n    Returns:\n    - int, the sum of elements at even indices after merging both lists.\n    \"\"\"\n    # Merge the two lists\n    merged_list = list1 + list2\n    \n    # Initialize sum variable\n    sum_even_indices = 0\n    \n    # Iterate over the merged list\n    for index in range(len(merged_list)):\n        # Check if the index is even\n        if index % 2 == 0:\n            # Add the element at the even index to the sum\n            sum_even_indices += merged_list[index]\n    \n    return sum_even_indices\n\n# Check function to verify the correctness of the solution\ndef check():\n    test_cases = [([], [], 0), \n                  ([1, 3, 5], [], 6),\n                  ([], [2, 4, 6], 6),\n                  ([1, 3, 5], [2, 4, 6], 9),\n                  ([10, 20, 30], [40, 50, 60], 40)]\n    \n    all_passed = True\n    for list1, list2, expected in test_cases:\n        result = merge_and_sum_lists(list1, list2)\n        if result != expected:\n            print(f\"Test failed for merge_and_sum_lists({list1}, {list2}). Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n\n# Call the check function to verify the solution\ncheck()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/587": [{"task_id": "Mbpp/587", "solution": "def list_tuple(list1):\n    # Convert the list to a tuple\n    return tuple(list1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/606": [{"task_id": "Mbpp/606", "solution": "def radian_degree(degrees):\n    # Convert degrees to radians\n    radians = degrees * (3.141592653589793 / 180)\n    return radians", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/588": [{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    # Check if the list is empty or contains a single element\n    if len(nums) <= 1:\n        return 0\n    # Calculate the difference between the max and min values in the list\n    return max(nums) - min(nums)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/593": [{"task_id": "Mbpp/593", "solution": "def process_string(s):\n    \"\"\"\n    Processes a string by removing all characters except digits and '0'. If a part of the string consists only of zeros,\n    it should be kept as '0' in the result.\n    \n    :param s: Input string to be processed.\n    :return: Processed string with only digits and '0's.\n    \"\"\"\n    result = []\n    for char in s:\n        if char.isdigit() or char == '0':\n            result.append(char)\n    return ''.join(result)\n\n# Check function to verify the correctness of the solution\ndef check():\n    test_cases = [\n        (\"abc101xyz0\", \"1010\"),\n        (\"000\", \"0\"),\n        (\"1234567890\", \"1234567890\"),\n        (\"no numbers\", \"\"),\n        (\"1a2b3c0\", \"1230\"),\n        (\"0000\", \"0\")\n    ]\n    \n    all_passed = True\n    for input_str, expected in test_cases:\n        result = process_string(input_str)\n        if result != expected:\n            print(f\"Test failed for input: {input_str}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n\ncheck()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/612": [{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    # Initialize two empty lists to hold the first and second elements\n    first_elements = []\n    second_elements = []\n    \n    # Iterate through each sublist in the input list\n    for sub_list in lst:\n        # Append the first element of the sublist to the first_elements list\n        first_elements.append(sub_list[0])\n        # Append the second element of the sublist to the second_elements list\n        second_elements.append(sub_list[1])\n    \n    # Return a list containing the two lists: first_elements and second_elements\n    return [first_elements, second_elements]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/603": [{"task_id": "Mbpp/603", "solution": "def ludic_sort(numbers):\n    \"\"\"\n    Remove every nth element from the list of ludic numbers, where n is the current position of the element in the list.\n    \n    :param numbers: List of integers representing ludic numbers.\n    :return: List of ludic numbers after removing every nth element.\n    \"\"\"\n    index = 0\n    while index < len(numbers):\n        # Remove every nth element starting from the current index\n        numbers = numbers[:index] + numbers[index + numbers[index]:]\n        if index < len(numbers):\n            index += numbers[index]\n    return numbers\n\n# Check function to verify the correctness of the generated function\ndef check():\n    test_cases = [([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [1, 2, 6, 10, 14, 18]),\n                  ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 6, 10])]\n    all_passed = True\n    for input_list, expected in test_cases:\n        result = ludic_sort(input_list)\n        if result != expected:\n            print(f\"Test failed for input {input_list}. Expected {expected}, got {result}\")\n            all_passed = False\n    if all_passed:\n        print(\"All tests passed!\")\n\ncheck()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/599": [{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    # Calculate the sum of the first n natural numbers\n    total_sum = n * (n + 1) // 2\n    # Calculate the average of the first n natural numbers\n    average = total_sum / n\n    return total_sum, average", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/628": [{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    # Replace all spaces in the string with '%20'\n    return string.replace(' ', '%20')", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/578": [{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate through the lists using the index\n    for i in range(len(list1)):\n        # Append elements from each list in order\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/594": [{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    # Initialize variables to store the first even and first odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and first odd numbers\n    for num in lst:\n        if num % 2 == 0:  # Check if the number is even\n            if first_even is None:\n                first_even = num\n        else:  # The number is odd\n            if first_odd is None:\n                first_odd = num\n    \n    # Calculate the difference between the first even and first odd numbers\n    return first_even - first_odd if first_even is not None and first_odd is not None else None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/618": [{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    # Check if lists are of the same length\n    if len(list1) != len(list2):\n        return \"Lists are of different lengths.\"\n    # Use a list comprehension to divide elements of list1 by elements of list2\n    result = [i / j for i, j in zip(list1, list2)]\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/616": [{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple_a, tuple_b):\n    # Use a generator expression to perform element-wise modulo operation\n    result = tuple(a % b for a, b in zip(tuple_a, tuple_b))\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/622": [{"task_id": "Mbpp/622", "solution": "def find_median_sorted_arrays(nums1, nums2):\n    \"\"\"\n    Finds the median of two sorted arrays.\n    \n    :param nums1: List[int] - First sorted array.\n    :param nums2: List[int] - Second sorted array.\n    :return: float - The median of the two sorted arrays.\n    \"\"\"\n    # Merge the two sorted arrays\n    merged_list = []\n    i, j = 0, 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] < nums2[j]:\n            merged_list.append(nums1[i])\n            i += 1\n        else:\n            merged_list.append(nums2[j])\n            j += 1\n    # Append remaining elements\n    merged_list.extend(nums1[i:])\n    merged_list.extend(nums2[j:])\n    \n    # Calculate the median\n    n = len(merged_list)\n    if n % 2 == 1:\n        return float(merged_list[n // 2])\n    else:\n        return (merged_list[n // 2 - 1] + merged_list[n // 2]) / 2\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    test_cases = [([1, 3], [2], 2.0),\n                  ([1, 2], [3, 4], 2.5),\n                  ([0, 0], [0, 0], 0.0),\n                  ([], [1], 1.0),\n                  ([2], [], 2.0)]\n    \n    all_passed = True\n    for nums1, nums2, expected in test_cases:\n        result = find_median_sorted_arrays(nums1, nums2)\n        if result != expected:\n            print(f\"Test failed for nums1={nums1} and nums2={nums2}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n\ncheck_solution()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/623": [{"task_id": "Mbpp/623", "solution": "def nth_nums(lst, n):\n    # Use list comprehension to raise each element to the power of n\n    return [i**n for i in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/615": [{"task_id": "Mbpp/615", "solution": "def calculate_averages(data):\n    \"\"\"\n    Calculate the average of each inner tuple in a tuple of tuples.\n    \n    Parameters:\n    data (tuple of tuples): A tuple containing multiple tuples of numbers.\n    \n    Returns:\n    tuple: A tuple containing the average of each inner tuple.\n    \"\"\"\n    averages = []\n    for inner_tuple in data:\n        sum_of_elements = sum(inner_tuple)\n        count_of_elements = len(inner_tuple)\n        averages.append(sum_of_elements / count_of_elements)\n    return tuple(averages)\n\n# Test cases to verify the correctness of the function\ntest_data = (\n    ((10, 20, 30),),  # Expected average: 20.0\n    ((5, 15, 25, 35),),  # Expected average: 20.0\n    ((1, 2, 3, 4, 5),),  # Expected average: 3.0\n    ((100, 200, 300),)  # Expected average: 200.0\n)\n\n# Check function to verify the solution\ndef check_solution():\n    all_passed = True\n    for i, test_case in enumerate(test_data):\n        result = calculate_averages(test_case)\n        expected = (sum(test_case[0]) / len(test_case[0]),)\n        if result != expected:\n            print(f\"Test case {i+1} failed: expected {expected}, got {result}\")\n            all_passed = False\n    if all_passed:\n        print(\"All test cases passed!\")\n\ncheck_solution()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/626": [{"task_id": "Mbpp/626", "solution": "def triangle_area(radius):\n    # Return None for negative radius as radius cannot be negative\n    if radius < 0:\n        return None\n    # Area of the largest inscribed triangle in a semicircle is (radius^2)\n    return radius ** 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/624": [{"task_id": "Mbpp/624", "solution": "def is_upper(string):\n    # Convert the given string to uppercase\n    return string.upper()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/619": [{"task_id": "Mbpp/619", "solution": "def move_num(str1):\n    # Extract all non-digit characters and all digit characters separately\n    non_digit = [char for char in str1 if not char.isdigit()]\n    digits = [char for char in str1 if char.isdigit()]\n    # Concatenate non-digit characters with digit characters\n    return ''.join(non_digit + digits)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/602": [{"task_id": "Mbpp/602", "solution": "def find_max_consecutive_char(s):\n    \"\"\"\n    Finds the maximum number of consecutive occurrences of a character in a string.\n    \n    Parameters:\n    s (str): The string to be analyzed.\n    \n    Returns:\n    int: The maximum number of consecutive occurrences of any character.\n    \"\"\"\n    if not s:  # Check if the string is empty\n        return 0\n\n    max_count = 1\n    current_count = 1\n\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            current_count += 1\n            max_count = max(max_count, current_count)\n        else:\n            current_count = 1\n\n    return max_count\n\n# Test cases to verify the correctness of the function\ndef check_function():\n    test_cases = [\n        (\"\", 0),\n        (\"a\", 1),\n        (\"aa\", 2),\n        (\"aaa\", 3),\n        (\"abc\", 1),\n        (\"aabbbcc\", 3),\n        (\"abccbaaa\", 3),\n    ]\n    \n    all_passed = True\n    for text, expected in test_cases:\n        result = find_max_consecutive_char(text)\n        if result != expected:\n            print(f\"Test failed for input: '{text}'. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n\n# Uncomment the following line to run the check function\n# check_function()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/607": [{"task_id": "Mbpp/607", "solution": "import re\ndef find_literals(text, pattern):\n    # Use re.search to find the pattern in the text\n    match = re.search(pattern, text)\n    # If a match is found, return the matched substring and its start and end indices\n    if match:\n        return (match.group(), match.start(), match.end())\n    # If no match is found, return None\n    else:\n        return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/604": [{"task_id": "Mbpp/604", "solution": "def reverse_words(str1):\n    # Split the string into words, reverse the list of words, and join them back with spaces\n    return ' '.join(str1.split()[::-1])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/600": [{"task_id": "Mbpp/600", "solution": "def is_Even(n):\n    # Check if the number is divisible by 2\n    return n % 2 == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/620": [{"task_id": "Mbpp/620", "solution": "def filter_divisible_numbers(numbers, divisor):\n    \"\"\"\n    Filters numbers in the given list that are divisible by the specified divisor.\n    \n    Parameters:\n    numbers (list): A list of integers to be filtered.\n    divisor (int): The divisor used to filter the numbers.\n    \n    Returns:\n    list: A list of integers from the input list that are divisible by the divisor.\n    \"\"\"\n    return [num for num in numbers if num % divisor == 0]\n\n# Test cases to verify the correctness of the function\ndef check_function():\n    test_cases = [([10, 20, 33, 46, 55], 5, [10, 20, 55]),\n                  ([1, 2, 3, 4, 5], 2, [2, 4]),\n                  ([11, 22, 33, 44, 55], 11, [11, 22, 33, 44, 55]),\n                  ([0, 15, 30, 45, 60], 15, [0, 15, 30, 45, 60])]\n    \n    all_passed = True\n    for numbers, divisor, expected in test_cases:\n        result = filter_divisible_numbers(numbers, divisor)\n        if result != expected:\n            print(f\"Test failed for numbers={numbers} with divisor={divisor}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n\n# Call the check function to verify the solution\ncheck_function()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/598": [{"task_id": "Mbpp/598", "solution": "def armstrong_number(n):\n    # Calculate the number of digits in the number\n    num_digits = len(str(n))\n    # Calculate the sum of each digit raised to the power of the number of digits\n    sum_of_powers = sum([int(digit) ** num_digits for digit in str(n)])\n    # Check if the sum of powers is equal to the original number\n    return sum_of_powers == n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/596": [{"task_id": "Mbpp/596", "solution": "import sys\ndef tuple_size(test_tuple):\n    # Calculate the size of the tuple in bytes\n    return sys.getsizeof(test_tuple)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/591": [{"task_id": "Mbpp/591", "solution": "def swap_List(input_list):\n    # Swap the first and last elements of the list\n    input_list[0], input_list[-1] = input_list[-1], input_list[0]\n    return input_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/608": [{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    # Create a 2D array to store Bell numbers\n    bell = [[0 for i in range(n+1)] for i in range(n+1)]\n    \n    # Base case\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        # Explicitly fill for small n\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    # Return the nth Bell number\n    return bell[n][0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/597": [{"task_id": "Mbpp/597", "solution": "def find_kth_element(arr1, arr2, k):\n    \"\"\"\n    Finds the k-th smallest element in the union of two sorted arrays.\n    \n    :param arr1: First sorted array.\n    :param arr2: Second sorted array.\n    :param k: The k-th position to find in the merged array.\n    :return: The k-th smallest element.\n    \"\"\"\n    if not arr1:\n        return arr2[k]\n    if not arr2:\n        return arr1[k]\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth_element(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth_element(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth_element(arr1[:mid1], arr2, k)\n        else:\n            return find_kth_element(arr1, arr2[:mid2], k)\n\n# Check function to verify the correctness of the solution\ndef check():\n    test_cases = [([1, 3, 5], [2, 4, 6], 4, 4),\n                  ([1, 2], [3, 4], 2, 2),\n                  ([], [1], 0, 1),\n                  ([2], [], 0, 2)]\n    \n    all_passed = True\n    for arr1, arr2, k, expected in test_cases:\n        result = find_kth_element(arr1, arr2, k)\n        if result != expected:\n            print(f\"Test failed for arr1={arr1}, arr2={arr2}, k={k}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n\ncheck()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/614": [{"task_id": "Mbpp/614", "solution": "def cummulative_sum(lst):\n    # Calculate the sum of all elements in the tuple list\n    total_sum = sum(sum(t) for t in lst)\n    return total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/629": [{"task_id": "Mbpp/629", "solution": "def Split(numbers):\n    # Use list comprehension to filter even numbers\n    return [num for num in numbers if num % 2 == 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/611": [{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    # Initialize the max value to a very low number\n    max_value = float('-inf')\n    # Iterate through each row in the matrix\n    for row in matrix:\n        # Check if the current row has enough elements\n        if n < len(row):\n            # Update max_value if the current element in the nth column is greater\n            max_value = max(max_value, row[n])\n    return max_value", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/610": [{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    \"\"\"\n    Removes the k'th element from the list using list comprehension.\n    \n    Parameters:\n    lst (list): The list from which to remove the k'th element.\n    k (int): The 1-based index of the element to remove.\n    \n    Returns:\n    list: A new list with the k'th element removed.\n    \"\"\"\n    # Adjust k to be 0-based index\n    k -= 1\n    # Use list comprehension to filter out the k'th element\n    return [item for i, item in enumerate(lst) if i != k]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/605": [{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    # Check if n is less than 2, which are not prime numbers\n    if n < 2:\n        return False\n    # Check for factors from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/722": [{"task_id": "Mbpp/722", "solution": "def calculate_bmi(data):\n    \"\"\"\n    Calculate the Body Mass Index (BMI) for a list of individuals.\n    \n    Each individual's data is a tuple containing their height in meters and weight in kilograms.\n    The function returns a list of BMI values corresponding to each individual.\n    \n    Parameters:\n    - data: A list of tuples, where each tuple contains (height_in_meters, weight_in_kg).\n    \n    Returns:\n    - A list of BMI values.\n    \"\"\"\n    bmi_list = []\n    for individual in data:\n        height, weight = individual  # Correctly unpacking the tuple\n        bmi = weight / (height ** 2)\n        bmi_list.append(bmi)\n    return bmi_list\n\n# Check function to verify the correctness of the generated function\ndef check():\n    test_data = [\n        ((1.75, 70), 22.988506218487944),  # Example 1\n        ((1.60, 60), 23.4375),             # Example 2\n        ((1.80, 80), 24.691358024691358)    # Example 3\n    ]\n    \n    all_passed = True\n    for individual, expected_bmi in test_data:\n        calculated_bmi = calculate_bmi([individual])[0]\n        if not round(calculated_bmi, 2) == round(expected_bmi, 2):\n            print(f\"Failed for {individual}. Expected {expected_bmi}, got {calculated_bmi}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n    else:\n        print(\"Some tests failed. Please review your function.\")\n\n# Running the check function\ncheck()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/633": [{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(arr, n): \n    # Calculate the sum of XOR for all pairs\n    xor_sum = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/720": [{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(test_tuple, test_dict):\n    # Add the dictionary to the tuple\n    result = test_tuple + (test_dict,)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/724": [{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    # Calculate the power of the base\n    num = base ** power\n    # Convert the number to a string to iterate over each digit\n    num_str = str(num)\n    # Calculate the sum of the digits\n    sum_of_digits = sum(int(digit) for digit in num_str)\n    return sum_of_digits", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/635": [{"task_id": "Mbpp/635", "solution": "def heap_sort(nums):\n    # Function to heapify a subtree rooted with node i which is an index in nums[]\n    def heapify(nums, n, i):\n        largest = i  # Initialize largest as root\n        left = 2 * i + 1  # left = 2*i + 1\n        right = 2 * i + 2  # right = 2*i + 2\n\n        # See if left child of root exists and is greater than root\n        if left < n and nums[i] < nums[left]:\n            largest = left\n\n        # See if right child of root exists and is greater than root\n        if right < n and nums[largest] < nums[right]:\n            largest = right\n\n        # Change root, if needed\n        if largest != i:\n            nums[i], nums[largest] = nums[largest], nums[i]  # swap\n\n            # Heapify the root.\n            heapify(nums, n, largest)\n\n    # Build a maxheap.\n    n = len(nums)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(nums, n, i)\n\n    # One by one extract elements\n    for i in range(n - 1, 0, -1):\n        nums[i], nums[0] = nums[0], nums[i]  # swap\n        heapify(nums, i, 0)\n\n    return nums", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/644": [{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    # Reverse the elements from the start of the array up to the position k\n    arr[:k] = reversed(arr[:k])\n    return arr", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/643": [{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    # Check if 'z' is present in the string excluding the first and last character\n    return 'z' in text[1:-1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/730": [{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    # Initialize an empty list to store the result\n    result = []\n    # Append the first element of the list to the result\n    if lst:\n        result.append(lst[0])\n    \n    # Iterate through the list starting from the second element\n    for i in range(1, len(lst)):\n        # If the current element is not the same as the last element in the result, append it\n        if lst[i] != lst[i-1]:\n            result.append(lst[i])\n    \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/632": [{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    # Create a new list to store non-zero elements\n    non_zero = [element for element in lst if element != 0]\n    # Append zeros to the end of the non-zero list\n    non_zero.extend([0] * lst.count(0))\n    return non_zero", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/732": [{"task_id": "Mbpp/732", "solution": "def replace_specialchar(input_str):\n    # Replace spaces, commas, and dots with a colon\n    result = input_str.replace(' ', ':').replace(',', ':').replace('.', ':')\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/741": [{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(str1):\n    # Check if the string is empty or has only one character\n    if len(str1) <= 1:\n        return True\n    # Compare the first character with the rest of the string\n    for i in range(1, len(str1)):\n        if str1[0] != str1[i]:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/723": [{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    # Initialize a counter to keep track of the indices with matching values\n    count = 0\n    # Iterate through the lists and compare elements at each index\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/733": [{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    # Initialize the start and end pointers\n    start, end = 0, len(arr) - 1\n    \n    # Loop until the start pointer exceeds the end pointer\n    while start <= end:\n        mid = start + (end - start) // 2  # Calculate the middle index\n        \n        # Check if the middle element is the target\n        if arr[mid] == target:\n            # If it's the first element or the previous element is not the target, return mid\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            else:\n                # Otherwise, continue searching in the left half\n                end = mid - 1\n        elif arr[mid] < target:\n            # If the middle element is less than the target, search in the right half\n            start = mid + 1\n        else:\n            # If the middle element is greater than the target, search in the left half\n            end = mid - 1\n    \n    # If the target is not found, return -1\n    return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/638": [{"task_id": "Mbpp/638", "solution": "import math", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/631": [{"task_id": "Mbpp/631", "solution": "def replace_spaces(str1):\n    # Replace spaces with underscores and vice versa\n    result = ''\n    for char in str1:\n        if char == ' ':\n            result += '_'\n        else:\n            result += ' ' if char == '_' else char\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/641": [{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    # Calculate the nth nonagonal number using the formula\n    nonagonal_number = (7 * n * n - 5 * n) // 2\n    return nonagonal_number", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/749": [{"task_id": "Mbpp/749", "solution": "def sort_string_integers(string_list):\n    \"\"\"\n    Sorts a list of strings that represent integers in ascending order.\n    \n    Parameters:\n    string_list (list): A list of strings, where each string is an integer.\n    \n    Returns:\n    list: A sorted list of integers.\n    \"\"\"\n    # Convert the list of strings to a list of integers and sort it\n    return sorted(string_list, key=int)\n\n# Example usage and test cases", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/752": [{"task_id": "Mbpp/752", "solution": "def jacobsthal(n):\n    \"\"\"\n    Calculate the n-th Jacobsthal number.\n    \n    The Jacobsthal numbers are defined by the recurrence relation:\n    J(n) = J(n-1) + 2*J(n-2), with J(0) = 0 and J(1) = 1.\n    \n    Parameters:\n    n (int): The position in the Jacobsthal sequence.\n    \n    Returns:\n    int: The n-th Jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + 2 * b\n        return b\n\n# Test cases to verify the correctness of the function\ndef check_jacobsthal():\n    test_cases = [(0, 0), (1, 1), (2, 1), (3, 3), (4, 5), (5, 11)]\n    all_passed = True\n    for n, expected in test_cases:\n        result = jacobsthal(n)\n        if result != expected:\n            print(f\"Test failed for n={n}: expected {expected}, got {result}\")\n            all_passed = False\n    if all_passed:\n        print(\"All test cases passed!\")\n\n# Call the check function to verify the solution\ncheck_jacobsthal()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/742": [{"task_id": "Mbpp/742", "solution": "import math\ndef area_tetrahedron(side_length):\n    # Calculate the area of a tetrahedron given the side length\n    area = math.sqrt(3) * (side_length ** 2)\n    return area", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/734": [{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    # Initialize the sum to 0\n    sum_prod = 0\n    # Iterate over all possible subarray lengths\n    for i in range(len(arr)):\n        product = 1\n        for j in range(i, len(arr)):\n            product *= arr[j]\n            sum_prod += product\n    return sum_prod", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/639": [{"task_id": "Mbpp/639", "solution": "def sum_of_uppercase_names(names):\n    \"\"\"\n    Calculate the sum of lengths of names that start with an uppercase letter after filtering out names starting with lowercase letters.\n    \n    :param names: List of names (strings)\n    :return: Sum of lengths of names that start with an uppercase letter\n    \"\"\"\n    return sum(len(name) for name in names if name and name[0].isupper())\n\n# Test cases to verify the correctness of the function\ndef check_function():\n    test_cases = [([], 0), (['Alice', 'bob', 'Charlie'], 10), (['alice', 'BOB', 'charlie'], 0), (['John', 'DOE', 'jane'], 5)]\n    all_passed = True\n    for names, expected in test_cases:\n        result = sum_of_uppercase_names(names)\n        if result != expected:\n            print(f\"Test failed for: {names}. Expected {expected}, got {result}\")\n            all_passed = False\n    if all_passed:\n        print(\"All test cases passed!\")\n\ncheck_function()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/745": [{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(start, end):\n    \"\"\"\n    Find numbers within the range [start, end] that are divisible by every digit they contain.\n    \n    :param start: Start of the range (inclusive)\n    :param end: End of the range (inclusive)\n    :return: List of numbers that are divisible by every digit they contain\n    \"\"\"\n    result = []\n    for num in range(start, end + 1):\n        str_num = str(num)\n        if all(num % int(digit) == 0 for digit in str_num if digit != '0'):\n            result.append(num)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 22]], "plus_fail_tests": [[100, 200]]}], "Mbpp/753": [{"task_id": "Mbpp/753", "solution": "def min_k(test_list, K): \n    # Sort the list of tuples based on the second element of each tuple\n    # and then select the first K elements from the sorted list.\n    res = sorted(test_list, key=lambda x: x[1])[:K] \n    return res", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/735": [{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    \"\"\"\n    Toggles the middle bits of the binary representation of n.\n    If n is 0, it returns 0. For other numbers, it toggles the middle bits.\n    \"\"\"\n    # Handle the case where n is 0\n    if n == 0:\n        return 0\n    \n    # Find the number of bits in the binary representation of n\n    num_bits = n.bit_length()\n    \n    # Calculate the number of middle bits to toggle\n    middle_bits = num_bits // 2\n    \n    # Create a mask with the middle bits set to 1\n    mask = (1 << middle_bits) - 1\n    \n    # Toggle the middle bits using XOR\n    result = n ^ mask\n    \n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": [[2147483647]]}], "Mbpp/725": [{"task_id": "Mbpp/725", "solution": "def extract_quoted_content(text):\n    \"\"\"\n    Extracts content between quotation marks from a given string, ensuring to skip the first and last elements\n    when splitting by quotation marks. A flag variable is used to keep track of whether the parser is inside a\n    quotation or not, which helps in properly extracting the quoted content.\n    \n    :param text: The string from which to extract quoted content.\n    :return: A list of strings containing the content between quotation marks.\n    \"\"\"\n    result = []\n    in_quotes = False\n    current_content = \"\"\n    \n    for char in text:\n        if char == '\"':\n            if in_quotes:\n                # End of quoted content\n                result.append(current_content)\n                current_content = \"\"\n            else:\n                # Start of quoted content\n                in_quotes = True\n        elif in_quotes:\n            current_content += char\n        elif char == ' ' and not in_quotes:\n            # End of a word, not inside quotes\n            if current_content:\n                result.append(current_content)\n                current_content = \"\"\n    \n    # Append the last word if not inside quotes\n    if not in_quotes and current_content:\n        result.append(current_content)\n    \n    return result\n\n# Check function to verify the correctness of the generated function\ndef check():\n    test_cases = [\n        (\"Hello \\\"world\\\" and \\\"hello world\\\"\", [\"world\", \"hello world\"]),\n        (\"\\\"Nested\\\" \\\"quotes\\\" are tricky\", [\"Nested\", \"quotes\"]),\n        (\"No quotes here\", []),\n        ('\"Single quote at the start', []),\n        ('Ends with quote \"', []),\n        ('\"Multiple words\" in a sentence', [\"Multiple words\"])\n    ]\n    \n    all_passed = True\n    for text, expected in test_cases:\n        result = extract_quoted_content(text)\n        if result != expected:\n            print(f\"Test failed for: {text}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All tests passed!\")\n\ncheck()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/739": [{"task_id": "Mbpp/739", "solution": "def smallest_n_digit_triangular(n):\n    \"\"\"\n    Finds the index of the smallest n-digit triangular number.\n    \n    Parameters:\n    n (int): The number of digits.\n    \n    Returns:\n    int: The index of the smallest n-digit triangular number.\n    \"\"\"\n    low, high = 1, n\n    while low < high:\n        mid = (low + high) // 2\n        if mid * (mid + 1) // 2 < 10**(n-1):\n            low = mid + 1\n        else:\n            high = mid\n    return low\n\n# Example usage and validation", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/736": [{"task_id": "Mbpp/736", "solution": "def left_insertion(lst, num):\n    # Iterate through the list to find the correct insertion point\n    for i in range(len(lst)):\n        if lst[i] >= num:\n            return i\n    # If the number is greater than all elements, return the length of the list\n    return len(lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/759": [{"task_id": "Mbpp/759", "solution": "def is_valid_decimal(s):\n    \"\"\"\n    Checks if the given string is a valid decimal number with a precision of 2.\n    \n    Parameters:\n    s (str): The string to check.\n    \n    Returns:\n    bool: True if the string is a valid decimal number with a precision of 2, False otherwise.\n    \"\"\"\n    try:\n        # Attempt to convert the string to a float and check the precision\n        num = float(s)\n        return num == round(num, 2)\n    except ValueError:\n        return False\n\n# Test cases to verify the correctness of the function\ntest_cases = [\n    '123.11',  # True\n    '123.123', # False\n    '123',     # False\n    '123.00',  # True\n    'abc',     # False\n    '123.1',   # False\n    '123.0',   # True\n]\n\n# Check function to validate the test cases\ndef check():\n    all_passed = True\n    for test in test_cases:\n        result = is_valid_decimal(test)\n        print(f\"Test case '{test}': {'Passed' if result else 'Failed'}\")\n        if not result:\n            all_passed = False\n    return all_passed\n\n# Run the check function\nif check():\n    print(\"All test cases passed!\")\nelse:\n    print(\"Some test cases failed.\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/760": [{"task_id": "Mbpp/760", "solution": "def unique_Element(test_list):\n    # Check if all elements in the list are the same by comparing the set length\n    return len(set(test_list)) == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/743": [{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    # Handle the case where the list is empty or n is 0\n    if not lst or n == 0:\n        return lst\n    # Normalize the rotation count in case it's greater than the list length\n    n = n % len(lst)\n    # Rotate the list by slicing and concatenating\n    return lst[-n:] + lst[:-n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/728": [{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    # Check if both lists have the same length\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length.\")\n    # Sum the corresponding elements of the lists\n    return [a + b for a, b in zip(list1, list2)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/731": [{"task_id": "Mbpp/731", "solution": "import math\ndef lateralsurface_cone(r, h):\n    # Calculate the lateral surface area of a cone\n    lateral_surface_area = math.pi * r * math.sqrt(r * r + h * h)\n    return lateral_surface_area", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/740": [{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(test_tup):\n    # Initialize an empty dictionary\n    res = {}\n    # Iterate through the tuple, stepping by 2 to get key-value pairs\n    for idx in range(0, len(test_tup) - 1, 2):\n        res[test_tup[idx]] = test_tup[idx + 1]\n    return res", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/721": [{"task_id": "Mbpp/721", "solution": "def max_average_path(grid):\n    \"\"\"\n    Calculate the maximum average path in a grid.\n    \n    Args:\n    grid: A 2D list of integers representing the grid.\n    \n    Returns:\n    float: The maximum average of any path in the grid.\n    \"\"\"\n    rows, cols = len(grid), len(grid[0])\n    dp = [[0] * cols for _ in range(rows)]\n    \n    for col in range(cols):\n        dp[0][col] = grid[0][col]\n    \n    for row in range(1, rows):\n        for col in range(cols):\n            if col == 0:\n                dp[row][col] = grid[row][col] + max(dp[row-1][col], dp[row-1][col+1])\n            elif col == cols - 1:\n                dp[row][col] = grid[row][col] + max(dp[row-1][col-1], dp[row-1][col])\n            else:\n                dp[row][col] = grid[row][col] + max(dp[row-1][col-1], dp[row-1][col], dp[row-1][col+1])\n    \n    return max(max(row) / len(row) for row in dp)\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    test_cases = [([[-1, -2, 2, -4], [5, 3, -3, 4], [2, 3, -5, -4], [-2, -3, 3, -5]], 0.0),\n                  ([[1, 2, 3], [1, 5, 1], [3, 1, 5]], 2.3333333333333335)]\n    \n    all_passed = True\n    for grid, expected in test_cases:\n        result = max_average_path(grid)\n        if not abs(result - expected) < 1e-9:\n            print(f\"Test failed for grid: {grid}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n    else:\n        print(\"Some tests failed. Please review your solution.\")\n\ncheck_solution()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/750": [{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tpl):\n    # Extend the list with the elements of the tuple\n    lst.extend(tpl)\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/755": [{"task_id": "Mbpp/755", "solution": "def second_smallest(nums):\n    # Initialize the smallest and second smallest to infinity\n    smallest = second_smallest = float('inf')\n    \n    for num in nums:\n        if num < smallest:\n            # Update second smallest before updating smallest\n            second_smallest = smallest\n            smallest = num\n        elif smallest < num < second_smallest:\n            # Update second smallest if num is between smallest and second smallest\n            second_smallest = num\n    \n    # If second smallest is still infinity, it means there wasn't a second unique smallest number\n    return second_smallest if second_smallest != float('inf') else None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/769": [{"task_id": "Mbpp/769", "solution": "def list_difference_preserve_order(list1, list2):\n    \"\"\"\n    Return a new list that contains all elements from list1 that are not in list2,\n    preserving the original order of elements in list1.\n    \n    >>> list_difference_preserve_order([1, 2, 3, 4], [2, 3])\n    [1, 4]\n    >>> list_difference_preserve_order([5, 6, 7], [7, 8, 9])\n    [5, 6]\n    >>> list_difference_preserve_order([1, 2, 2, 3], [2, 4])\n    [1, 3]\n    \"\"\"\n    result = []\n    for item in list1:\n        if item not in list2:\n            result.append(item)\n    return result\n\n# Check function to verify the correctness of the solution\ndef check():\n    test_cases = [([1, 2, 3, 4], [2, 3], [1, 4]),\n                  ([5, 6, 7], [7, 8, 9], [5, 6]),\n                  ([1, 2, 2, 3], [2, 4], [1, 3])]\n    all_passed = True\n    for list1, list2, expected in test_cases:\n        result = list_difference_preserve_order(list1, list2)\n        if result != expected:\n            print(f\"Test failed for list1={list1} and list2={list2}. Expected {expected}, got {result}\")\n            all_passed = False\n    if all_passed:\n        print(\"All tests passed!\")\n\ncheck()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/737": [{"task_id": "Mbpp/737", "solution": "import re\ndef check_str(string):\n    # Check if the string starts with a vowel using regex\n    return bool(re.match(r'^[aeiouAEIOU]', string))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/726": [{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate through the tuple, stopping at the second last element\n    for i in range(len(t) - 1):\n        # Multiply the current element with the next one and append to the result list\n        result.append(t[i] * t[i + 1])\n    # Convert the result list to a tuple and return it\n    return tuple(result)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/637": [{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(cost_price, selling_price):\n    # Check if cost price is equal to selling price\n    if cost_price == selling_price:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/748": [{"task_id": "Mbpp/748", "solution": "def split_words(s):\n    \"\"\"\n    Splits a string into words based on capital letters.\n    \n    Example:\n    >>> split_words(\"Hi\") == [\"Hi\"]\n    >>> split_words(\"HiHi\") == [\"Hi\", \"Hi\"]\n    >>> split_words(\"HiHiHi\") == [\"Hi\", \"Hi\", \"Hi\"]\n    >>> split_words(\"HiHiHiHi\") == [\"Hi\", \"Hi\", \"Hi\", \"Hi\"]\n    >>> split_words(\"HiHiHiHiHi\") == [\"Hi\", \"Hi\", \"Hi\", \"Hi\", \"Hi\"]\n    >>> split_words(\"HiHiHiHiHiHi\") == [\"Hi\", \"Hi\", \"Hi\", \"Hi\", \"Hi\", \"Hi\"]\n    \"\"\"\n    if not s:\n        return []\n    \n    words = []\n    current_word = s[0]\n    \n    for i in range(1, len(s)):\n        if s[i].isupper():\n            words.append(current_word)\n            current_word = s[i]\n        else:\n            current_word += s[i]\n    \n    words.append(current_word)  # Include the last word\n    \n    return words\n\n# Check function to verify the correctness of the solution\ndef check():\n    test_cases = [\n        (\"Hi\", [\"Hi\"]),\n        (\"HiHi\", [\"Hi\", \"Hi\"]),\n        (\"HiHiHi\", [\"Hi\", \"Hi\", \"Hi\"]),\n        (\"HiHiHiHi\", [\"Hi\", \"Hi\", \"Hi\", \"Hi\"]),\n        (\"HiHiHiHiHi\", [\"Hi\", \"Hi\", \"Hi\", \"Hi\", \"Hi\"]),\n        (\"HiHiHiHiHiHi\", [\"Hi\", \"Hi\", \"Hi\", \"Hi\", \"Hi\", \"Hi\"]),\n        (\"\", []),\n        (\"a\", [\"a\"]),\n        (\"aA\", [\"a\", \"A\"]),\n    ]\n    \n    all_passed = True\n    for text, expected in test_cases:\n        result = split_words(text)\n        if result != expected:\n            print(f\"Test failed for input: {text}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n    else:\n        print(\"Some tests failed. Please review your function.\")\n\n# Uncomment the following line to run the check function\n# check()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/744": [{"task_id": "Mbpp/744", "solution": "def check_none(test_tup):\n    # Check if any element in the tuple is None\n    return any(item is None for item in test_tup)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/778": [{"task_id": "Mbpp/778", "solution": "def remove_consecutive_duplicates(lst):\n    \"\"\"\n    Removes consecutive duplicate elements from a given list.\n    \n    Args:\n    lst (list): The input list from which consecutive duplicates need to be removed.\n    \n    Returns:\n    list: A new list with consecutive duplicates removed.\n    \"\"\"\n    if not lst:\n        return []\n\n    result = []\n    temp = [lst[0]]\n\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i - 1]:\n            temp.append(lst[i])\n        else:\n            result.extend(temp)\n            temp = [lst[i]]\n    \n    result.extend(temp)\n    return result\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    test_cases = [\n        ([1, 2, 2, 3, 3, 3, 4, 4, 4, 4], [1, 2, 3, 4]),\n        ([1, 1, 1, 1, 1], [1]),\n        ([], []),\n        ([5, 5, 5, 6, 6, 7, 7, 7, 8], [5, 6, 7, 8]),\n        ([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n    ]\n    \n    all_passed = True\n    for input_list, expected in test_cases:\n        result = remove_consecutive_duplicates(input_list)\n        if result != expected:\n            print(f\"Test failed for input {input_list}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n    else:\n        print(\"Some tests failed. Please review your solution.\")\n\n# Uncomment the following line to run the check function\n# check_solution()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/754": [{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    # Initialize an empty list to store common elements\n    common_elements = []\n    # Determine the minimum length of the three lists\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    # Iterate through the lists up to the minimum length\n    for i in range(min_length):\n        # Check if elements at the current index are the same in all three lists\n        if l1[i] == l2[i] == l3[i]:\n            # If so, add the element to the common_elements list\n            common_elements.append(l1[i])\n    \n    # Return the list of common elements\n    return common_elements", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/777": [{"task_id": "Mbpp/777", "solution": "from collections import Counter", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/751": [{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    # Iterate through the array to check the heap property\n    for i in range(len(arr)):\n        # Check if the left child index is within bounds\n        if (2 * i + 1) < len(arr) and arr[i] > arr[2 * i + 1]:\n            return False\n        # Check if the right child index is within bounds\n        if (2 * i + 2) < len(arr) and arr[i] > arr[2 * i + 2]:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/757": [{"task_id": "Mbpp/757", "solution": "def find_reverse_pairs(words):\n    \"\"\"\n    Finds and returns a list of tuples where each tuple contains two words that are reverses of each other.\n    \n    :param words: List of words to check for reverse pairs.\n    :return: List of tuples containing reverse pairs.\n    \"\"\"\n    # Create a copy of the original list to avoid modifying it during iteration\n    original_words = words[:]\n    reverse_pairs = []\n    \n    for word in original_words:\n        reversed_word = word[::-1]\n        if reversed_word in original_words:\n            reverse_pairs.append((reversed_word, word))\n    \n    return reverse_pairs\n\n# Check function to verify the correctness of the solution\ndef check():\n    test_cases = [\n        ([\"abc\", \"cba\", \"bca\", \"xyz\"], [(\"abc\", \"cba\"), (\"cba\", \"abc\")]),\n        ([\"hello\", \"world\", \"dlrow\", \"olleh\"], [(\"hello\", \"olleh\"), (\"dlrow\", \"world\")]),\n        ([\"a\", \"b\", \"c\"], []),\n        ([\"deified\", \"level\", \"radar\", \"civic\"], [(\"deified\", \"deified\"), (\"level\", \"level\"), (\"radar\", \"radar\"), (\"civic\", \"civic\")])\n    ]\n    \n    all_passed = True\n    for words, expected in test_cases:\n        result = find_reverse_pairs(words)\n        if sorted(result) != sorted(expected):\n            print(f\"Test failed for: {words}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All tests passed!\")\n    else:\n        print(\"Some tests failed.\")\n\n# Uncomment the line below to run the check function\n# check()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/766": [{"task_id": "Mbpp/766", "solution": "def pair_wise(input_list):\n    # Initialize an empty list to store the pairs\n    pairs = []\n    # Iterate through the list, stopping at the second-to-last element\n    for i in range(len(input_list) - 1):\n        # Append the current element and the next element as a tuple to the pairs list\n        pairs.append((input_list[i], input_list[i + 1]))\n    return pairs", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/764": [{"task_id": "Mbpp/764", "solution": "def number_ctr(string):\n    # Initialize a counter to count digits\n    count = 0\n    # Iterate through each character in the string\n    for char in string:\n        # Check if the character is a digit\n        if char.isdigit():\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/758": [{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    # Initialize a dictionary to store the count of each tuple\n    count_dict = {}\n    # Iterate through each sublist in the provided list\n    for sublist in lst:\n        # Convert the sublist to a tuple and count its occurrences\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/798": [{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    # Calculate the sum of the array elements\n    return sum(arr)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/791": [{"task_id": "Mbpp/791", "solution": "def remove_nested(tpl):\n    \"\"\"\n    Recursively removes all elements from a nested tuple that are of type int.\n    \n    :param tpl: The tuple to process.\n    :return: A new tuple with all int elements removed.\n    \"\"\"\n    result = []\n    for item in tpl:\n        if isinstance(item, tuple):\n            # Recursively process nested tuples.\n            result.append(remove_nested(item))\n        elif not isinstance(item, int):\n            # Append non-int elements.\n            result.append(item)\n    return tuple(result)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 5, 7, [4, 6], 10]]], "plus_fail_tests": [[[2, 6, 8, [5, 7], 11, [[2, 9], [6, 3]], 4]]]}], "Mbpp/765": [{"task_id": "Mbpp/765", "solution": "def find_nth_polite_number(n):\n    \"\"\"\n    Find the nth polite number. A polite number is a positive integer that can be written as the sum of two or more consecutive positive integers.\n    \n    Args:\n    n : int - The position of the polite number to find.\n    \n    Returns:\n    int - The nth polite number.\n    \"\"\"\n    count = 0\n    num = 1\n    while True:\n        # Check if the number is polite\n        if (num & (num - 1)) != 0:  # This checks if the number is a power of 2\n            count += 1\n            if count == n:\n                return num\n        num += 1\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    test_cases = [(1, 3), (2, 5), (3, 6), (4, 7), (5, 9)]\n    all_passed = True\n    for n, expected in test_cases:\n        result = find_nth_polite_number(n)\n        if result != expected:\n            print(f\"Test failed for n={n}. Expected {expected}, got {result}\")\n            all_passed = False\n    if all_passed:\n        print(\"All test cases passed!\")\n\ncheck_solution()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/792": [{"task_id": "Mbpp/792", "solution": "def count_list(lst):\n    \"\"\"\n    Counts the total number of lists within the given list, including nested lists.\n    \n    :param lst: List of elements to be checked.\n    :return: Integer count of lists within the given list.\n    \"\"\"\n    count = 0\n    for element in lst:\n        if isinstance(element, list):\n            count += 1\n            # Recursively count nested lists\n            count += count_list(element)\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[1, [2, [3, 4]]]]]]}], "Mbpp/762": [{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    # Check if the month has 30 days\n    if month in {4, 6, 9, 11}:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/772": [{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    # Split the string into words\n    words = string.split()\n    # Filter out words with length k\n    filtered_words = [word for word in words if len(word) != k]\n    # Join the filtered words back into a string\n    result = ' '.join(filtered_words)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/770": [{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    # Calculate the sum of the fourth power of the first n odd natural numbers\n    return sum(i**4 for i in range(1, 2*n, 2))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/794": [{"task_id": "Mbpp/794", "solution": "import re\ndef text_starta_endb(text):\n    \"\"\"\n    Checks if the given text starts with 'a' and ends with 'b'.\n    This function uses regular expressions for flexible pattern matching.\n    \n    Args:\n    text (str): The text to check.\n    \n    Returns:\n    bool: True if the text starts with 'a' and ends with 'b', False otherwise.\n    \"\"\"\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["xaabbyz1323ababb"]]}], "Mbpp/781": [{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    # Initialize count of divisors\n    count = 0\n    # Iterate from 1 to the square root of n\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:  # If i is a divisor\n            count += 1  # Increment count\n            if i != n // i:  # Check if n/i is a different divisor\n                count += 1  # Increment count if so\n    return count % 2 == 0  # Return True if count is even", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/780": [{"task_id": "Mbpp/780", "solution": "from itertools import combinations", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/763": [{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, x):\n    # Sort the array to make finding the closest element easier\n    arr.sort()\n    # Initialize variables to store the minimum difference and the result\n    min_diff = float('inf')\n    result = None\n    \n    # Iterate through the array to find the closest element to x\n    for num in arr:\n        # Calculate the absolute difference between the current number and x\n        diff = abs(num - x)\n        # If the current difference is smaller than the minimum difference found so far, update min_diff and result\n        if diff < min_diff:\n            min_diff = diff\n            result = num\n        # If the difference is zero, we've found the exact match and can break early\n        elif diff == 0:\n            break\n    \n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 5, 3, 19, 18, 25], 6]], "plus_fail_tests": [[[15, 12, 20, 30, 8, 4, 19, 37, 22, 28, 11, 25], 12]]}], "Mbpp/771": [{"task_id": "Mbpp/771", "solution": "def is_balanced(expression):\n    \"\"\"\n    Checks if the brackets in the given expression are balanced.\n    \n    Args:\n    expression (str): The expression containing brackets to check.\n    \n    Returns:\n    bool: True if the brackets are balanced, False otherwise.\n    \"\"\"\n    # Initialize a counter to track the balance of the expression\n    balance = 0\n    \n    # Iterate through each character in the expression\n    for char in expression:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        \n        # If balance goes negative, it means there are more closing brackets\n        # than opening ones at some point, which is not balanced\n        if balance < 0:\n            return False\n    \n    # If balance is zero, all opening brackets have matching closing ones\n    return balance == 0\n\n# Check function to verify the correctness of the generated function\ndef check():\n    test_cases = [\n        (\"()\", True),\n        (\"(()())\", True),\n        (\"(()\", False),\n        (\")(\", False),\n        (\"\", True),\n        (\"((()))\", True),\n        (\"(()))(\", False)\n    ]\n    \n    all_passed = True\n    for expression, expected in test_cases:\n        result = is_balanced(expression)\n        if result != expected:\n            print(f\"Failed for {expression}. Expected {expected}, got {result}.\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n    else:\n        print(\"Some tests failed. Please review your function.\")\n\n# Uncomment the line below to run the check function\n# check()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/785": [{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    # Remove the parentheses and split the string by commas\n    tuple_str = tuple_str.strip('()').split(',')\n    # Convert each element to an integer and return as a tuple\n    return tuple(int(num.strip()) for num in tuple_str)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/782": [{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    # Initialize the sum to 0\n    total_sum = 0\n    # Calculate the number of elements in the array\n    n = len(arr)\n    # Iterate over all possible starting points of subarrays\n    for i in range(n):\n        # Calculate the sum of the current subarray\n        current_sum = 0\n        # Iterate over all possible ending points of subarrays starting from i\n        for j in range(i, n):\n            # Include the current element in the subarray\n            current_sum += arr[j]\n            # Check if the length of the subarray is odd\n            if (j - i + 1) % 2 == 1:\n                # Add the sum of the current subarray to the total sum\n                total_sum += current_sum\n    return total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/796": [{"task_id": "Mbpp/796", "solution": "def return_sum(dict1):\n    # Calculate the sum of all values in the dictionary\n    sum_values = sum(dict1.values())\n    return sum_values", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/773": [{"task_id": "Mbpp/773", "solution": "def find_substring_indices(s, sub):\n    \"\"\"\n    Finds the starting and ending indices of all occurrences of the substring 'sub' in the string 's'.\n    \n    Parameters:\n    s (str): The string to search within.\n    sub (str): The substring to find.\n    \n    Returns:\n    list: A list of tuples, each containing the starting and ending indices of an occurrence of 'sub'.\n    \"\"\"\n    indices = []\n    sub_len = len(sub)\n    s_len = len(s)\n    \n    for i in range(s_len - sub_len + 1):\n        if s[i:i + sub_len] == sub:\n            indices.append((i, i + sub_len - 1))\n    \n    return indices\n\n# Check function to verify the correctness of the solution\ndef check():\n    test_cases = [\n        (\"hello\", \"ll\", [(2, 3)]),\n        (\"hello\", \"world\", []),\n        (\"aaaa\", \"aa\", [(0, 1), (1, 2), (2, 3)]),\n        (\"abcabcabc\", \"abc\", [(0, 2), (3, 5), (6, 8)]),\n        (\"mississippi\", \"issi\", [(1, 4)])\n    ]\n    \n    all_passed = True\n    for s, sub, expected in test_cases:\n        result = find_substring_indices(s, sub)\n        if result != expected:\n            print(f\"Failed for {s} with substring {sub}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n    else:\n        print(\"Some tests failed. Please review your function.\")\n\n# Uncomment the following line to run the check function\n# check()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/790": [{"task_id": "Mbpp/790", "solution": "def check_even_indices(nums):\n    \"\"\"\n    Checks if all numbers at even indices in the list are even.\n    \n    Args:\n    nums (list): A list of integers.\n    \n    Returns:\n    bool: True if all even indices contain even numbers, False otherwise.\n    \"\"\"\n    for i in range(0, len(nums), 2):  # Iterate over even indices\n        if nums[i] % 2 != 0:  # Check if the number at the even index is not even\n            return False\n    return True\n\n# Test cases to verify the correctness of the function\ndef test_check_even_indices():\n    test_cases = [([2, 4, 6, 8], True),\n                  ([1, 3, 5, 7], False),\n                  ([2, 3, 4, 5, 6], True),\n                  ([1, 2, 3, 4, 5, 6], False),\n                  ([], True),  # Edge case: Empty list should return True\n                  ([2], True)]  # Edge case: Single element should return True\n    \n    all_passed = True\n    for nums, expected in test_cases:\n        result = check_even_indices(nums)\n        if result != expected:\n            print(f\"Test failed for: {nums}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n    else:\n        print(\"Some tests failed.\")\n\n# Uncomment the following line to run the test cases\n# test_check_even_indices()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/787": [{"task_id": "Mbpp/787", "solution": "def check_abb(text):\n    \"\"\"\n    Checks if the input text contains 'a' followed by exactly three 'b's.\n    This function also handles cases where the input text is shorter than 4 characters.\n    \n    Args:\n    text (str): The input text to check.\n    \n    Returns:\n    bool: True if the text contains 'a' followed by exactly three 'b's, False otherwise.\n    \"\"\"\n    # Ensure the text is at least 4 characters long to check for 'a' followed by 'bbb'\n    if len(text) < 4:\n        return False\n    \n    # Check if the text contains 'a' followed by exactly three 'b's\n    return text.startswith('a') and text[1:4] == 'bbb'\n\n# Test cases to verify the correctness of the function\ntest_cases = [\n    (\"abbb\", True),\n    (\"aabb\", False),\n    (\"abbbx\", True),\n    (\"abbc\", False),\n    (\"abcd\", False),\n    (\"\", False),\n    (\"a\", False),\n    (\"b\", False),\n    (\"bbb\", False),\n    (\"abbbb\", False)\n]\n\n# Function to run test cases\ndef run_tests():\n    all_passed = True\n    for text, expected in test_cases:\n        result = check_abb(text)\n        if result != expected:\n            print(f\"Test failed for input: '{text}'. Expected {expected}, got {result}\")\n            all_passed = False\n    if all_passed:\n        print(\"All test cases passed!\")\n\n# Execute test cases\nrun_tests()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/784": [{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        # Stop iteration if both first even and odd numbers are found\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Calculate the product of the first even and odd numbers\n    return first_even * first_odd if first_even is not None and first_odd is not None else None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/793": [{"task_id": "Mbpp/793", "solution": "def last(arr, x):\n    # Initialize the result variable to -1\n    result = -1\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the current element matches the target element, update result\n        if arr[i] == x:\n            result = i\n    # Return the last position of the target element\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/775": [{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    # Iterate through the list, checking only odd indices\n    for i in range(1, len(lst), 2):\n        # Check if the number at the current odd index is not odd\n        if lst[i] % 2 == 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/788": [{"task_id": "Mbpp/788", "solution": "def new_tuple(list1, str1):\n    # Create a new tuple by combining the elements of the list and the string\n    result = tuple(list1) + (str1,)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/767": [{"task_id": "Mbpp/767", "solution": "def get_pairs_count(arr, target_sum):\n    \"\"\"\n    Counts the number of pairs in the list whose sum is equal to target_sum.\n\n    :param arr: List of integers.\n    :param target_sum: The target sum for pairs.\n    :return: The count of pairs whose sum is equal to target_sum.\n    \"\"\"\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == target_sum:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/786": [{"task_id": "Mbpp/786", "solution": "def find_insert_position(arr, x):\n    \"\"\"\n    Find the index where x should be inserted to keep the array sorted.\n    \n    :param arr: List of integers sorted in ascending order.\n    :param x: Integer to insert into the list.\n    :return: Index at which x should be inserted.\n    \"\"\"\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n\n# Check function to verify the correctness of the solution\ndef check_solution():\n    test_cases = [([1, 3, 5, 6], 5, 2),\n                  ([1, 3, 5, 6], 2, 1),\n                  ([1, 3, 5, 6], 7, 4),\n                  ([1, 3, 5, 6], 0, 0)]\n    \n    all_passed = True\n    for arr, x, expected in test_cases:\n        result = find_insert_position(arr, x)\n        if result != expected:\n            print(f\"Test failed for arr={arr} and x={x}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n\ncheck_solution()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/801": [{"task_id": "Mbpp/801", "solution": "def count_equal_numbers(a, b, c):\n    \"\"\"\n    Counts the number of equal numbers among the three integers a, b, and c.\n    \n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n    c (int): The third integer.\n    \n    Returns:\n    int: The count of equal numbers among a, b, and c.\n    \"\"\"\n    # Count the occurrences of each number\n    count_a = (a, b, c).count(a)\n    count_b = (a, b, c).count(b)\n    count_c = (a, b, c).count(c)\n    \n    # Return the maximum count, which represents the number of equal numbers\n    return max(count_a, count_b, count_c)\n\n# Test cases to verify the correctness of the function\ndef check_function():\n    test_cases = [\n        (1, 1, 1, 3),  # All numbers are equal\n        (1, 2, 2, 2),  # Two numbers are equal\n        (3, 3, 1, 3, 3),  # Three numbers are equal\n        (4, 5, 6, 4, 4),  # Two numbers are equal\n        (7, 8, 9),  # All numbers are different\n    ]\n    \n    all_passed = True\n    for a, b, c, expected in test_cases:\n        result = count_equal_numbers(a, b, c)\n        if result != expected:\n            print(f\"Test failed for inputs ({a}, {b}, {c}). Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n\n# Call the check function to verify the solution\ncheck_function()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/799": [{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    # Ensure the number is within 32-bit range\n    n &= 0xFFFFFFFF\n    \n    # Perform the left rotation\n    d = d % 32  # To handle cases where d > 32\n    rotated_number = ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\n    \n    return rotated_number", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/803": [{"task_id": "Mbpp/803", "solution": "def is_perfect_square(n):\n    # Check if n is less than 0, it cannot be a perfect square\n    if n < 0:\n        return False\n    # Calculate the square root of n and check if it's an integer\n    root = n ** 0.5\n    return root.is_integer()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/800": [{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(str1):\n    # Remove all whitespaces from the string using replace method\n    result = str1.replace(' ', '')\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/804": [{"task_id": "Mbpp/804", "solution": "def is_product_even(nums):\n    # Iterate through the list and check if any number is even\n    for num in nums:\n        if num % 2 == 0:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/808": [{"task_id": "Mbpp/808", "solution": "def check_K(test_tup, K):\n    # Check if K is in the tuple and return the result\n    return K in test_tup", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/805": [{"task_id": "Mbpp/805", "solution": "def max_sum_list(lists):\n    # Find the list with the maximum sum of its elements\n    max_list = max(lists, key=sum)\n    return max_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/806": [{"task_id": "Mbpp/806", "solution": "def reverse_string(s):\n    \"\"\"\n    Reverses the given string.\n\n    Parameters:\n    s (str): The string to be reversed.\n\n    Returns:\n    str: The reversed string.\n    \"\"\"\n    return s[::-1]\n\n# Test cases to verify the correctness of the function\ndef check_function():\n    test_cases = [\n        (\"hello\", \"olleh\"),\n        (\"Python\", \"nohtyP\"),\n        (\"\", \"\"),\n        (\"a\", \"a\")\n    ]\n    \n    all_passed = True\n    for input_str, expected in test_cases:\n        result = reverse_string(input_str)\n        if result != expected:\n            print(f\"Failed: reverse_string({input_str!r}) returned {result!r}, expected {expected!r}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n\ncheck_function()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/807": [{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    # Iterate through the list to find the first odd number\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None  # Return None if no odd number is found", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/809": [{"task_id": "Mbpp/809", "solution": "def check_smaller(test_tup1, test_tup2):\n    # Check if all elements in test_tup2 are less than the corresponding elements in test_tup1\n    res = all(el2 < el1 for el1, el2 in zip(test_tup1, test_tup2))\n    return res", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/630": [{"task_id": "Mbpp/630", "solution": "def get_adjacent_coordinates(coord):\n    \"\"\"\n    Given a coordinate (x, y), return a list of coordinates that are adjacent to it.\n    \n    Parameters:\n    coord (tuple): A tuple representing the coordinate (x, y).\n    \n    Returns:\n    list: A list of tuples representing the adjacent coordinates.\n    \"\"\"\n    x, y = coord\n    adjacent = [\n        (x - 1, y - 1), (x, y - 1), (x + 1, y - 1),\n        (x - 1, y),             (x + 1, y),\n        (x - 1, y + 1), (x, y + 1), (x + 1, y + 1)\n    ]\n    return adjacent\n\n# Test cases to verify the solution\ndef check_adjacent_coordinates():\n    test_cases = [\n        ((0, 0), [(0, -1), (-1, -1), (1, -1), (-1, 0), (1, 0), (-1, 1), (0, 1), (1, 1)]),\n        ((3, 3), [(2, 2), (2, 3), (2, 4), (3, 2), (3, 4), (4, 2), (4, 3), (4, 4)]),\n        ((-1, 2), ([-2, 1], [-1, 1], [-1, 3], [-2, 2], [-1, 2], [-2, 3], [-1, 2], [-1, 3]))\n    ]\n    \n    all_passed = True\n    for i, (input_val, expected) in enumerate(test_cases):\n        result = get_adjacent_coordinates(input_val)\n        if result != expected:\n            print(f\"Test case {i+1} failed: expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n    else:\n        print(\"Some test cases failed. Please review your function.\")\n\n# Run the test cases\ncheck_adjacent_coordinates()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/797": [{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    # Calculate the sum of all odd numbers in the range [l, r]\n    return sum([i for i in range(l, r + 1) if i % 2 != 0])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/123": [{"task_id": "Mbpp/123", "solution": "def find_amicable_numbers(limit):\n    \"\"\"\n    Finds all amicable numbers up to a given limit.\n    \n    Args:\n    limit (int): The upper limit for finding amicable numbers.\n    \n    Returns:\n    list: A list of tuples, each containing a pair of amicable numbers.\n    \"\"\"\n    def sum_of_divisors(n):\n        return sum(i for i in range(1, n) if n % i == 0)\n    \n    amicable_pairs = []\n    for num in range(2, limit):\n        if num not in (amicable_pairs[i][0] for i in range(len(amicable_pairs))):\n            div_sum = sum_of_divisors(num)\n            if div_sum < limit and sum_of_divisors(div_sum) == num and num != div_sum:\n                amicable_pairs.append((num, div_sum))\n                \n    return amicable_pairs\n\n# Check function to verify the correctness of the generated function\ndef check():\n    test_cases = {\n        10000: [(220, 284), (1184, 1210), (2620, 2924), (5020, 5564), (6232, 6368)],\n        5000: [(220, 284), (1184, 1210), (2620, 2924)],\n    }\n    \n    all_passed = True\n    for limit, expected in test_cases.items():\n        result = find_amicable_numbers(limit)\n        if set(result) != set(expected):\n            print(f\"Failed for limit {limit}. Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n    else:\n        print(\"Some tests failed. Please review your function.\")\n\ncheck()", "base_status": "timeout", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/389": [{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    # Base cases for the first two Lucas numbers\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    # Recursive call to find the n'th Lucas number\n    return find_lucas(n - 1) + find_lucas(n - 2)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/255": [{"task_id": "Mbpp/255", "solution": "def add_numbers(a, b):\n    \"\"\"\n    Adds two numbers and returns the result.\n    \n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    \n    Returns:\n    int or float: The sum of the two numbers.\n    \"\"\"\n    return a + b\n\n# Test cases to verify the correctness of the function\ndef check_function():\n    test_cases = [\n        (2, 3, 5),\n        (5, 7, 12),\n        (10.5, 2.5, 13.0),\n        (-1, -1, -2),\n        (0, 0, 0)\n    ]\n    \n    all_passed = True\n    for a, b, expected in test_cases:\n        result = add_numbers(a, b)\n        if result != expected:\n            print(f\"Test failed for inputs ({a}, {b}). Expected {expected}, got {result}\")\n            all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n\n# Call the check function to verify the solution\ncheck_function()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/271": [{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    # Initialize sum to 0\n    sum = 0\n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        # Calculate the even number (2 * i)\n        even_number = 2 * i\n        # Add the fifth power of the even number to the sum\n        sum += even_number ** 5\n    return sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}]}, "pass_at_k": {"base": {"pass@1": 0.7248677248677249}, "plus": {"pass@1": 0.708994708994709}}}