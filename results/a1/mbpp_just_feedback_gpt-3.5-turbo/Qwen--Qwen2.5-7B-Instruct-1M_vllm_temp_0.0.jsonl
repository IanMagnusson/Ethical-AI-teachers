{"task_id": "Mbpp/2", "solution": "def similar_elements(tup1, tup2):\n    # Convert the tuples to sets and find the intersection\n    result = set(tup1) & set(tup2)\n    return result"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    \"\"\"Check if a number is not a prime number.\n    \n    Args:\n        n (int): The number to check.\n        \n    Returns:\n        bool: True if the number is not prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\ndef heap_queue_largest(nums, n):\n    # Use nlargest from heapq to find the n largest numbers\n    largest_nums = heapq.nlargest(n, nums)\n    # Return the result sorted in descending order\n    return sorted(largest_nums, reverse=True)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(x, y):\n    # Calculate the XOR of x and y\n    xor = x ^ y\n    # Check if the result is a power of 2 (only one bit set)\n    return xor and not (xor & (xor - 1))"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(text):\n    # Split the text into words\n    words = text.split()\n    # Filter words that are at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    # Use a list comprehension to square each element in the input list\n    return [i ** 2 for i in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    if len(s) <= 1:\n        return 0\n\n    temp = s + s  # Concatenate the string with itself to handle rotation cases\n\n    for rotations in range(1, len(s)):\n        if temp[:len(s)] == s:\n            return rotations\n        temp = temp[1:]  # Rotate the string\n\n    return rotations"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(string, char):\n    # Find the first occurrence of the character\n    first_occurrence = string.find(char)\n    # Find the last occurrence of the character\n    last_occurrence = string.rfind(char)\n    \n    # If the character is not found, return the original string\n    if first_occurrence == -1 or last_occurrence == -1:\n        return string\n    \n    # Remove the first and last occurrence of the character\n    new_string = string[:first_occurrence] + string[first_occurrence+1:last_occurrence] + string[last_occurrence+1:]\n    \n    return new_string"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    # Sort the matrix based on the sum of each row in ascending order\n    sorted_matrix = sorted(matrix, key=sum)\n    return sorted_matrix"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(a, b, c):\n    # Calculate the area of the triangular base\n    base_area = (a * b) / 2\n    # Calculate the volume of the prism\n    volume = base_area * c\n    return volume"}
{"task_id": "Mbpp/16", "solution": "import re\ndef text_lowercase_underscore(text):\n    # Check if the string matches the pattern of lowercase letters joined by underscores\n    return bool(re.match(r'^[a-z]+(_[a-z]+)*$', text))"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side):\n    # Calculate the perimeter of the square\n    perimeter = 4 * side\n    return perimeter"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(s1, s2):\n    # Create a set of characters to be removed for faster lookup\n    chars_to_remove = set(s2)\n    # Use a list comprehension to filter out unwanted characters\n    result = [char for char in s1 if char not in chars_to_remove]\n    # Join the list back into a string and return\n    return ''.join(result)"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    # Check if the array contains any duplicate elements\n    return len(arr) != len(set(arr))"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    # Check if n is a Woodall number\n    if n < 1:\n        return False\n    i = 1\n    while True:\n        woodall_number = (2 ** i) * i - 1\n        if woodall_number == n:\n            return True\n        if woodall_number > n:\n            return False\n        i += 1"}
{"task_id": "Mbpp/56", "solution": "def check(num):\n    # Calculate twice the reverse of the number and subtract 1\n    if num == 2 * int(str(num)[::-1]) - 1:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(nums):\n    # Convert each number in the list to a string\n    str_nums = list(map(str, nums))\n    # Sort the list of strings in reverse order (descending)\n    str_nums.sort(reverse=True)\n    # Join the sorted strings to form the largest number\n    largest_num = ''.join(str_nums)\n    # Convert the result back to an integer\n    return int(largest_num)"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(a, b):\n    # Check if the signs of a and b are opposite\n    return (a ^ b) < 0"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    # Calculate the nth octagonal number using the formula\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(S):\n    # Initialize the count of substrings\n    count = 0\n    # Iterate over all possible starting points of substrings\n    for start in range(len(S)):\n        sum_digits = 0\n        # Iterate over all possible ending points of substrings\n        for end in range(start, len(S)):\n            # Add the current digit to the sum\n            sum_digits += int(S[end])\n            # Check if the sum of digits is equal to the length of the substring\n            if sum_digits == end - start + 1:\n                count += 1\n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(lst):\n    # Initialize the smallest number with the first element of the list\n    smallest = lst[0]\n    # Iterate through the list to find the smallest number\n    for num in lst:\n        if num < smallest:\n            smallest = num\n    return smallest"}
{"task_id": "Mbpp/63", "solution": "def max_difference(test_list):\n    # Calculate the maximum difference between the second and first elements of each tuple\n    res = max(sub[1] - sub[0] for sub in test_list)\n    return res"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(test_list):\n    # Sort the list of tuples based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n    return test_list"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(data):\n    # Initialize sum to 0\n    total_sum = 0\n    # Iterate through each element in the list\n    for element in data:\n        # Check if the element is a list\n        if isinstance(element, list):\n            # If it's a list, recursively call the function to sum its elements\n            total_sum += recursive_list_sum(element)\n        else:\n            # If it's not a list, add the element to the total sum\n            total_sum += element\n    return total_sum"}
{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    # Initialize a counter to count positive numbers\n    count = 0\n    # Iterate through the list\n    for num in lst:\n        # Check if the current number is positive\n        if num > 0:\n            # Increment the counter if the number is positive\n            count += 1\n    return count"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    \"\"\"\n    Calculate the nth Bell number.\n    \n    Parameters:\n    n (int): The order of the Bell number to compute.\n    \n    Returns:\n    int: The nth Bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    increasing = decreasing = True\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n            \n    return increasing or decreasing"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(list1, list2):\n    # Check if list2 is empty, if so, it's not a sublist\n    if not list2:\n        return False\n\n    # Check if list2 is a sublist of list1\n    return any((list1[i:i+len(list2)] == list2 for i in range(len(list1) - len(list2) + 1)))"}
{"task_id": "Mbpp/70", "solution": "def get_equal(test_list):\n    # Check if all tuples in the list have the same length\n    res = all(len(i) == len(test_list[0]) for i in test_list)\n    return res"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    gap = len(arr)\n    shrink = 1.3\n\n    while gap > 1:\n        gap = int(gap / shrink)\n        if gap == 0:\n            gap = 1\n\n        sorted = True\n        for i in range(len(arr) - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n\n        if sorted and gap == 1:\n            break\n\n    return arr"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    # A number can be represented as the difference of two squares if and only if it is not of the form 4k+2\n    return n % 4 != 2"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns, sequences):\n    \"\"\"\n    Checks if the given patterns and sequences match.\n    \n    Args:\n    patterns (list of str): The list of patterns to compare.\n    sequences (list of str): The list of sequences to compare against patterns.\n    \n    Returns:\n    bool: True if patterns and sequences match, False otherwise.\n    \"\"\"\n    if len(patterns) != len(sequences):\n        return False\n    \n    for pattern, sequence in zip(patterns, sequences):\n        if len(pattern) != len(sequence):\n            return False\n        for p_char, s_char in zip(pattern, sequence):\n            if p_char != s_char and p_char != '*':\n                return False\n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(test_list, K):\n    # Use list comprehension to filter tuples where all elements are divisible by K\n    res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n    return res"}
{"task_id": "Mbpp/77", "solution": "def is_Diff(n):\n    # Check if the number is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    # Check if the length of the word is odd\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    # Calculate the nth tetrahedral number using the formula\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\ndef volume_sphere(radius):\n    # Calculate the volume of a sphere using the formula (4/3) * \u03c0 * r^3\n    volume = (4/3) * math.pi * (radius ** 3)\n    return volume"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    if n == 1:\n        return 1\n\n    seq = [0] * (n + 1)\n    seq[1] = 1\n\n    for i in range(2, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n\n    return seq[n]"}
{"task_id": "Mbpp/85", "solution": "import math\ndef surfacearea_sphere(radius):\n    # Calculate the surface area of a sphere using the formula 4 * pi * r^2\n    surface_area = 4 * math.pi * radius ** 2\n    return surface_area"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    # Calculate the nth centered hexagonal number\n    return 3 * n * (n - 1) + 1"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    # Merge the three dictionaries using the update method\n    result = dict1.copy()\n    result.update(dict2)\n    result.update(dict3)\n    return result"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    # Initialize an empty dictionary to store the frequency of elements\n    frequency_dict = {}\n    # Iterate over each element in the list\n    for element in lst:\n        # If the element is already in the dictionary, increment its count\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            frequency_dict[element] = 1\n    # Return the dictionary containing the frequency of each element\n    return frequency_dict"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    # Subtract 1 from n to find the closest smaller number\n    return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    # Find the maximum length of the words in the list\n    max_length = max(len(word) for word in words)\n    return max_length"}
{"task_id": "Mbpp/91", "solution": "def find_substring(test_list, test_str):\n    # Check if the test_str is a substring of any string in test_list\n    res = any(test_str in sub for sub in test_list)\n    return res"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    \"\"\"\n    Checks if the given number is an undulating number.\n    \n    An undulating number is a number that has an alternating pattern of digits.\n    For example, 1212121 is an undulating number because it follows the pattern\n    of alternating digits.\n    \n    Parameters:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    # Convert the number to a string to easily check the pattern\n    str_n = str(n)\n    \n    # Check if the length of the number is less than 3\n    if len(str_n) < 3:\n        return False\n    \n    # Check if the number follows the undulating pattern\n    for i in range(len(str_n) - 2):\n        if str_n[i] == str_n[i+1] or str_n[i+1] == str_n[i+2]:\n            return False\n\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    # Calculate a to the power of b\n    return a ** b"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(test_list):\n    # Find the tuple with the smallest second value and return its first value\n    res = min(test_list, key=lambda ele: ele[1])[0]\n    return res"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    # Find the minimum length among all the lists in the list of lists\n    min_length = min(len(sublist) for sublist in list_of_lists)\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    # Initialize a counter for divisors\n    count = 0\n    # Iterate from 1 to the square root of n\n    for i in range(1, int(n**0.5) + 1):\n        # If i is a divisor of n\n        if n % i == 0:\n            # Increment the count\n            count += 1\n            # If i is not the square root of n, count the complementary divisor\n            if i != n // i:\n                count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lists):\n    # Initialize an empty dictionary to store the frequency of each element\n    frequency_dict = {}\n    \n    # Iterate through each sublist in the given list of lists\n    for sublist in lists:\n        # Update the frequency dictionary with the elements from the current sublist\n        for element in sublist:\n            if element in frequency_dict:\n                frequency_dict[element] += 1\n            else:\n                frequency_dict[element] = 1\n                \n    return frequency_dict"}
{"task_id": "Mbpp/98", "solution": "def multiply_num(nums):\n    # Calculate the product of all numbers in the list\n    product = 1\n    for num in nums:\n        product *= num\n    # Divide the product by the length of the list\n    return product / len(nums)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    \"\"\"\n    Converts a decimal number to its binary representation as a string.\n    \n    Parameters:\n    n (int): The decimal number to convert.\n    \n    Returns:\n    str: The binary representation of the decimal number.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    # Increment the number until a palindrome is found\n    while True:\n        n += 1\n        # Convert the number to a string and check if it reads the same forwards and backwards\n        if str(n) == str(n)[::-1]:\n            return n"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    # Return the (k-1)th element of the array using 1-based indexing\n    return arr[k-1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    # Split the string by underscore and capitalize each word\n    # Then join them without any spaces\n    return ''.join(word.capitalize() or '_' for word in snake_str.split('_'))"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    # Base case\n    if m == 0:\n        return 1\n    if m == n:\n        return 1\n    # Recursive case\n    return ((n - m) * eulerian_num(n - 1, m - 1) +\n            (m + 1) * eulerian_num(n - 1, m))"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(list_of_lists):\n    # Use list comprehension to sort each sublist in the given list of lists\n    sorted_list = [sorted(sublist) for sublist in list_of_lists]\n    return sorted_list"}
{"task_id": "Mbpp/105", "solution": "def count(test_list):\n    # Count the number of True booleans in the list\n    count = sum(test_list)\n    return count"}
{"task_id": "Mbpp/106", "solution": "def add_lists(list1, tuple1):\n    # Convert the tuple to a list, append the given list, and then convert it back to a tuple\n    return tuple(list(tuple1) + list1)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    # Merge all three lists into one\n    merged_list = list1 + list2 + list3\n    # Sort the merged list\n    merged_list.sort()\n    return merged_list"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalents(binary_str, rotations):\n    count_odds = 0\n    for _ in range(rotations):\n        # Count the number of '1's in the binary string\n        ones_count = binary_str.count('1')\n        # Check if the number of '1's is odd\n        if ones_count % 2 == 1:\n            count_odds += 1\n        # Perform a rotation by moving the last element to the front\n        binary_str = binary_str[-1] + binary_str[:-1]\n    return count_odds\n\n# Test the function with the provided test case\nassert odd_Equivalents(\"011001\", 6) == 3"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    # Initialize the common elements with the first list's elements\n    common_elements = set(nested_lists[0])\n    \n    # Iterate over the nested lists starting from the second list\n    for lst in nested_lists[1:]:\n        # Update the common elements to only include elements present in the current list\n        common_elements.intersection_update(lst)\n    \n    # Return the set of common elements\n    return common_elements"}
{"task_id": "Mbpp/113", "solution": "def check_integer(string):\n    # Check if the string represents an integer\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n    except TypeError:\n        return False"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(nums):\n    # Convert each element in the tuple to a string and join them together\n    str_nums = ''.join(str(num) for num in nums)\n    # Convert the resulting string to an integer\n    return int(str_nums)"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(str1):\n    # Split the string on spaces and return the list of words\n    return str1.split(' ')"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    # Initialize the result variable\n    result = 0\n    \n    # Iterate through the array\n    for num in arr:\n        # XOR each element with the result\n        result ^= num\n    \n    # Return the result which is the element that appears only once\n    return result"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(test_list):\n    # Calculate the absolute product for each tuple and return the maximum value\n    res = max(abs(a * b) for a, b in test_list)\n    return res"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    # Helper function to calculate the sum of proper divisors of a number\n    def sum_of_divisors(x):\n        return sum([i for i in range(1, x) if x % i == 0])\n    \n    # Initialize the sum of amicable numbers\n    sum_amicable = 0\n    \n    # Iterate through numbers from 2 to n\n    for num in range(2, n + 1):\n        # Calculate the sum of proper divisors\n        div_sum = sum_of_divisors(num)\n        \n        # Check if the numbers are amicable\n        if div_sum == sum_of_divisors(div_sum) and div_sum != num:\n            sum_amicable += num\n    \n    return sum_amicable"}
{"task_id": "Mbpp/124", "solution": "import cmath\nimport math\ndef angle_complex(complex_num):\n    # Calculate the angle of the complex number\n    angle = cmath.phase(complex_num)\n    return angle"}
{"task_id": "Mbpp/125", "solution": "def find_length(string):\n    # Initialize variables to keep track of the maximum difference and current balance\n    max_diff = 0\n    current_balance = 0\n    \n    # Iterate through the string to calculate the balance of 0s and 1s\n    for char in string:\n        if char == '0':\n            current_balance += 1\n        else:\n            current_balance -= 1\n        \n        # Update the maximum difference found so far\n        max_diff = max(max_diff, abs(current_balance))\n    \n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum(a, b):\n    # Calculate the greatest common divisor (gcd) of a and b\n    gcd_value = gcd(a, b)\n    \n    # Initialize the sum of divisors\n    sum_divisors = 0\n    \n    # Iterate through all numbers from 1 to gcd_value\n    for i in range(1, gcd_value + 1):\n        # If i is a divisor of gcd_value, add it to the sum\n        if gcd_value % i == 0:\n            sum_divisors += i\n    \n    return sum_divisors\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(x, y):\n    # Multiply two integers and return the result\n    return x * y"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, string):\n    # Split the string into words\n    words = string.split(\" \")\n    # Filter words that are longer than n characters\n    result = [word for word in words if len(word) > n]\n    return result"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    # Calculate the sum of the first row to use as a reference\n    magic_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check columns\n    for col in range(len(matrix)):\n        if sum(matrix[row][col] for row in range(len(matrix))) != magic_sum:\n            return False\n    \n    # Check main diagonal\n    if sum(matrix[i][i] for i in range(len(matrix))) != magic_sum:\n        return False\n    \n    # Check secondary diagonal\n    if sum(matrix[i][len(matrix)-1-i] for i in range(len(matrix))) != magic_sum:\n        return False\n    \n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    # Create a dictionary to store the frequency of each item\n    frequency_dict = {}\n    \n    # Iterate over each item in the list\n    for item in lst:\n        # Increment the count of the item in the dictionary\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    \n    # Find the item with the maximum frequency\n    max_item = max(frequency_dict, key=frequency_dict.get)\n    \n    return max_item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(text):\n    # Define vowels\n    vowels = \"aeiouAEIOU\"\n    # Convert text to a list for easy manipulation\n    text_list = list(text)\n    # Initialize two pointers\n    left, right = 0, len(text_list) - 1\n    \n    # Traverse the string with two pointers\n    while left < right:\n        # Move the left pointer until a vowel is found\n        if text_list[left] not in vowels:\n            left += 1\n        # Move the right pointer until a vowel is found\n        elif text_list[right] not in vowels:\n            right -= 1\n        # Swap the vowels\n        else:\n            text_list[left], text_list[right] = text_list[right], text_list[left]\n            left += 1\n            right -= 1\n    \n    # Convert the list back to a string\n    return ''.join(text_list)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    # Join the elements of the tuple into a single string\n    result = ''.join(tup)\n    return result"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(nums):\n    # Initialize sum to 0\n    sum = 0\n    # Iterate through each number in the list\n    for num in nums:\n        # Check if the number is negative\n        if num < 0:\n            # Add the negative number to the sum\n            sum += num\n    return sum"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    # Calculate the nth hexagonal number using the formula\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/137", "solution": "import math\ndef zero_count(arr):\n    # Calculate the total number of elements in the array\n    total_elements = len(arr)\n    \n    # Handle case when the array is empty\n    if total_elements == 0:\n        return 0\n    \n    # Count the number of zero elements in the array\n    zero_elements = arr.count(0)\n    \n    # Calculate the number of non-zero elements\n    non_zero_elements = total_elements - zero_elements\n    \n    # Calculate the ratio of zero elements to non-zero elements\n    ratio = zero_elements / non_zero_elements if non_zero_elements != 0 else 0\n    \n    return ratio"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    # Check if the number is a sum of non-zero powers of 2\n    bin_str = bin(n)[2:]\n    return bin_str.count('1') == 1"}
{"task_id": "Mbpp/139", "solution": "import math\ndef circle_circumference(radius):\n    # Calculate the circumference of a circle given its radius\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(list_of_tuples):\n    # Flatten the list of tuples and convert it to a set to remove duplicates\n    return set([item for sublist in list_of_tuples for item in sublist])"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    # Iterate over the array from the end to the beginning\n    for cur_size in range(len(arr), 1, -1):\n        # Find the index of the maximum element in the current subarray\n        max_pos = 0\n        for i in range(cur_size):\n            if arr[i] > arr[max_pos]:\n                max_pos = i\n        # If the maximum element is not at the current position, flip it to the front\n        if max_pos != cur_size - 1:\n            # Flip the element to the front\n            arr[:max_pos + 1] = reversed(arr[:max_pos + 1])\n            # Flip the element to its correct position\n            arr[:cur_size] = reversed(arr[:cur_size])\n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    # Initialize a counter for the matching elements\n    count = 0\n    # Iterate through the lists using zip to compare elements at the same position\n    for a, b, c in zip(list1, list2, list3):\n        # Increment the counter if elements in all three lists are the same\n        if a == b == c:\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    # Calculate the maximum and minimum values in the array\n    max_val = max(arr)\n    min_val = min(arr)\n    \n    # Return the absolute difference between the max and min values\n    return abs(max_val - min_val)"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    # Implementation of the extended Euclidean algorithm to find the solution\n    def extended_gcd(x, y):\n        if y == 0:\n            return x, 1, 0\n        else:\n            gcd, x1, y1 = extended_gcd(y, x % y)\n            return gcd, y1, x1 - (x // y) * y1\n\n    gcd, x, y = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None  # No solution exists if n is not divisible by gcd of a and b\n    else:\n        # Scale the solution to match original coefficients a and b\n        scale = n // gcd\n        x *= scale\n        y *= scale\n        # Swap x and y if necessary to match original coefficients\n        if a < 0:\n            x = -x\n        if b < 0:\n            y = -y\n        return (x, y)"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(original_list, elements_to_remove):\n    # Use a list comprehension to filter out elements that are in the elements_to_remove list\n    result = [element for element in original_list if element not in elements_to_remove]\n    return result"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    # Calculate the sum of the series (n - 2*i) from i=0 to n // 2\n    return sum(n - 2 * i for i in range(n // 2 + 1))"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    # Initialize the count to 0\n    count = 0\n    # Iterate over the string with index\n    for index, char in enumerate(s):\n        # Convert character to lowercase and check if it matches the position\n        if char.lower() == chr(ord('a') + index):\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    # Initialize the count of even pairs to 0\n    count = 0\n    # Iterate through each pair of integers in the list\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            # Check if the XOR of the pair results in an even number\n            if ((nums[i] ^ nums[j]) % 2 == 0):\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    # If n is 0, the next power of 2 is 1\n    if n == 0:\n        return 1\n    # If n is already a power of 2, return n itself\n    if (n & (n - 1)) == 0:\n        return n\n    # Otherwise, find the next power of 2\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"}
{"task_id": "Mbpp/168", "solution": "def frequency(arr, num):\n    # Initialize a counter to zero\n    count = 0\n    # Iterate through the list to count occurrences of num\n    for n in arr:\n        if n == num:\n            count += 1\n    return count"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(nums, start, end):\n    # Calculate the sum of the specified slice of the list\n    return sum(nums[start:end+1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    # Calculate the perimeter of a regular pentagon\n    perimeter = 5 * side_length\n    return perimeter"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(str1):\n    # Initialize a counter to keep track of occurrences\n    count = 0\n    # Iterate through the string to find occurrences of 'std'\n    for i in range(len(str1) - 2):\n        # Check if the substring from current position to current position + 3 is 'std'\n        if str1[i:i+3] == 'std':\n            count += 1\n    return count"}
{"task_id": "Mbpp/222", "solution": "def check_type(test_tuple):\n    # Extract the type of the first element in the tuple\n    first_type = type(test_tuple[0])\n    # Check if all elements in the tuple have the same type as the first element\n    return all(isinstance(element, first_type) for element in test_tuple)"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, x):\n    if n == 0:\n        return False\n    \n    # Find the first occurrence of x in the array\n    first_occurrence = -1\n    for i in range(n):\n        if arr[i] == x:\n            first_occurrence = i\n            break\n    \n    # If x is not present in the array, return False\n    if first_occurrence == -1:\n        return False\n    \n    # Find the last occurrence of x in the array\n    last_occurrence = -1\n    for i in range(n-1, -1, -1):\n        if arr[i] == x:\n            last_occurrence = i\n            break\n    \n    # Check if the count of x is more than n/2\n    return (last_occurrence - first_occurrence + 1) > (n // 2)"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    # Initialize count of set bits to 0\n    count = 0\n    # Loop until n becomes 0\n    while n:\n        # Increment count if the least significant bit is 1\n        count += n & 1\n        # Right shift n by 1 to check the next bit\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    # Initialize an empty string to store the result\n    result = ''\n    # Iterate through the string, considering only characters at even indices\n    for i in range(0, len(s), 2):\n        result += s[i]\n    return result"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    # Return the minimum of the three numbers\n    return min(a, b, c)"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(str1, ch):\n    # Replace spaces in the string with the specified character\n    result = str1.replace(' ', ch)\n    return result"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    # Sort the list in descending order and slice the first n elements\n    return sorted(lst, reverse=True)[:n]"}
{"task_id": "Mbpp/233", "solution": "import math"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    # Calculate the volume of the cube\n    volume = side_length ** 3\n    return volume"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    \"\"\"\n    Checks if the number of even bits in the binary representation of a given number is even.\n    \n    Args:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if the number of even bits is even, False otherwise.\n    \"\"\"\n    # Convert the number to binary and remove the '0b' prefix\n    binary_representation = bin(n)[2:]\n    \n    # Count the number of even bits\n    even_count = sum(1 for bit in binary_representation if int(bit) % 2 == 0)\n    \n    # Check if the count of even bits is even\n    return even_count % 2 == 0"}
{"task_id": "Mbpp/237", "solution": "def check_occurrences(lst):\n    # Initialize an empty dictionary to store the count of each tuple\n    count_dict = {}\n    \n    # Iterate over each tuple in the list\n    for item in lst:\n        # Convert the tuple to a tuple object before using it as a key in the dictionary\n        item = tuple(item)\n        \n        # If the tuple is already in the dictionary, increment its count\n        if item in count_dict:\n            count_dict[item] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[item] = 1\n            \n    return count_dict\n\n# Test the function validity\nassert check_occurrences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(3, 1): 1, (1, 3): 1, (2, 5): 1, (5, 2): 1, (6, 3): 1}"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    # Initialize the count of substrings\n    count = 0\n    # Calculate the number of substrings\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            count += 1\n    return count"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    # Create a 2D array to store results of subproblems\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    # Initialize base cases\n    for i in range(1, m + 1):\n        dp[1][i] = 1\n\n    # Fill the dp array\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            for k in range(j // 2, m + 1):\n                dp[i][j] += dp[i - 1][k]\n    \n    # The answer is the sum of the last row of the dp array\n    return sum(dp[n])"}
{"task_id": "Mbpp/240", "solution": "def replace_list(lst1, lst2):\n    # Replace the last element of the first list with the elements of the second list\n    lst1[-1:] = lst2\n    return lst1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(str1):\n    # Calculate the length of the string\n    length = len(str1)\n    return length"}
{"task_id": "Mbpp/244", "solution": "import math\ndef next_Perfect_Square(n):\n    # Calculate the square root of the given number and round it up to the nearest integer\n    root = math.ceil(math.sqrt(n))\n    # Return the square of the rounded root\n    next_square = root * root\n    \n    # Check if the input number is already a perfect square\n    if math.sqrt(n) == root - 1:\n        next_square = (root + 1) * (root + 1)\n    \n    return next_square"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n    \n    # Calculate the maximum increasing subsequence sum ending at each index\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    \n    # Calculate the maximum decreasing subsequence sum starting at each index\n    for i in range(n-1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    \n    # Find the maximum sum of a bitonic sequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    \n    return max_bitonic_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    # Check if the input is a valid string\n    if not isinstance(s, str):\n        return 0\n\n    # Rest of the code remains the same\n    def find_lps(s, i, j, dp):\n        # Base case: if the start index is greater than the end index, return 0\n        if i > j:\n            return 0\n        # If the characters at the start and end are the same, return 2 plus the result of the inner substring\n        if s[i] == s[j]:\n            return 2 + (dp[i + 1][j - 1] if i + 1 <= j else 0)\n        # If the characters at the start and end are not the same, find the maximum of either excluding the start or the end character\n        return max(find_lps(s, i + 1, j, dp), find_lps(s, i, j - 1, dp))\n\n    dp = [[-1 for _ in range(len(s))] for _ in range(len(s))]\n    return find_lps(s, 0, len(s) - 1, dp)"}
{"task_id": "Mbpp/250", "solution": "def count_X(test_tup, K):\n    # Count the occurrences of K in the tuple using the count method\n    res = test_tup.count(K)\n    return res"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.extend([element, item])\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\ndef convert(num):\n    # Convert the complex number to polar coordinates\n    polar_coordinates = cmath.polar(num)\n    return polar_coordinates"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    # Initialize a counter to count the integer elements\n    count = 0\n    # Iterate through each element in the list\n    for element in lst:\n        # Check if the element is an integer\n        if type(element) is int:\n            # Increment the counter if the element is an integer\n            count += 1\n    # Return the total count of integer elements\n    return count"}
{"task_id": "Mbpp/255", "solution": "from itertools import product\ndef combinations_colors(colors, n):\n    # Generate combinations with repetition using product from itertools\n    combinations = list(product(colors, repeat=n))\n    # Convert tuples to the required format\n    result = [tuple(combination) for combination in combinations]\n    return result"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    # If n is less than 2, there are no prime numbers less than n\n    if n < 2:\n        return 0\n    \n    # Initialize a list to mark prime numbers\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False  # 0 and 1 are not prime numbers\n    \n    # Use the Sieve of Eratosthenes algorithm to find all prime numbers less than n\n    for start in range(2, int(n**0.5) + 1):\n        if is_prime[start]:\n            for multiple in range(start*start, n, start):\n                is_prime[multiple] = False\n    \n    # Count and return the number of prime numbers\n    return sum(is_prime)"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(num1, num2):\n    # Return a tuple with the second number first and then the first number\n    return (num2, num1)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tup1, tup2):\n    # Combine the tuples and sort them based on the first element of each sub-tuple\n    combined = sorted(tup1 + tup2)\n    # Iterate through the combined list and update the second element of each sub-tuple\n    for i in range(1, len(combined)):\n        if combined[i] == combined[i-1]:\n            combined[i] = (combined[i][0], max(combined[i][1], combined[i-1][1]))\n    return tuple(combined)"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    # Import necessary library\n    from sympy import isprime\n    \n    # Initialize variables\n    count = 0\n    num = 7  # Start checking from 7\n    \n    # Loop until we find the nth Newman\u2013Shanks\u2013Williams prime\n    while True:\n        # Check if the number is a prime and of the form 8k \u00b1 1\n        if isprime(num) and (num % 8 == 1 or num % 8 == 7):\n            count += 1\n            if count == n:\n                return num\n        num += 2"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    # Use a generator expression to perform element-wise division and handle division by zero\n    result = tuple(i / j if j != 0 else 0 for i, j in zip(tuple1, tuple2))\n    return result"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    # Split the list into two parts based on the length L\n    first_part = lst[:L]\n    second_part = lst[L:]\n    # Return the two parts as a tuple\n    return (first_part, second_part)"}
{"task_id": "Mbpp/264", "solution": "def convert_years(dog_years):\n    \"\"\"\n    Converts the given dog's age into equivalent human years.\n    The first year of a dog's life counts as 10.5 human years, \n    the second year counts as 4 human years, and every year \n    thereafter counts as 5 human years.\n    \n    Parameters:\n    dog_years (int or list of int): The age of the dog in dog years.\n    \n    Returns:\n    int or list of int: The age of the dog in human years.\n    \"\"\"\n    if isinstance(dog_years, list):\n        return [convert_years(age) for age in dog_years]\n    if dog_years <= 1:\n        return 10.5\n    elif dog_years == 2:\n        return 14\n    else:\n        return 14 + (dog_years - 2) * 5\n\n# Test cases to verify the solution\ndef check_solution():\n    test_cases = [\n        ([1, 2, 3], [10.5, 14, 19]),\n        (1, 10.5),\n        (2, 14),\n        (3, 19),\n        (12, 40.5),\n        (100, 514)\n    ]\n    \n    all_passed = True\n    for input_val, expected in test_cases:\n        result = convert_years(input_val)\n        if isinstance(input_val, list):\n            result = convert_years(input_val)\n            if result != expected:\n                print(f\"Failed for input {input_val}. Expected {expected}, got {result}.\")\n                all_passed = False\n        else:\n            if result != expected:\n                print(f\"Failed for input {input_val}. Expected {expected}, got {result}.\")\n                all_passed = False\n    \n    if all_passed:\n        print(\"All test cases passed!\")\n    else:\n        print(\"Some tests failed. Please review your function.\")\n\n# Uncomment the line below to run the check function\n# check_solution()"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    # Use list comprehension to slice the list at every nth element\n    return [lst[i::n] for i in range(n)]"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side):\n    # Calculate the lateral surface area of a cube\n    return 4 * side * side"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    sum_squares = 0\n    for i in range(n):\n        # Find the i-th odd number and add its square to the sum\n        odd_number = 2 * i + 1\n        sum_squares += odd_number ** 2\n    return sum_squares"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    # Calculate the n'th star number using the formula\n    return 6 * n * (n - 1) + 1"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(c):\n    # Convert the character to its ASCII value and return it\n    return ord(c)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    # Initialize sum to 0\n    sum = 0\n    # Iterate over the list with index\n    for index, value in enumerate(lst):\n        # Check if the index is even and the value is even\n        if index % 2 == 0 and value % 2 == 0:\n            sum += value\n    return sum"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    # Initialize sum to 0\n    sum = 0\n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        # Calculate the even number (2 * i)\n        even_number = 2 * i\n        # Add the fifth power of the even number to the sum\n        sum += even_number ** 5\n    return sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(test_list):\n    # Extract the last element of each tuple in the list\n    rear_elements = [sub[-1] for sub in test_list]\n    return rear_elements"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    # Use a tuple comprehension to subtract elements of tuple2 from tuple1\n    result = tuple(x - y for x, y in zip(tuple1, tuple2))\n    return result"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    def binomial_coefficient(n, k):\n        if k > n - k:\n            k = n - k\n        res = 1\n        for i in range(k):\n            res = res * (n - i)\n            res = res // (i + 1)\n        return res\n\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through all numbers from 0 to n\n    for i in range(0, n + 1):\n        # Check if the index is even\n        if i % 2 == 0:\n            # Add the binomial coefficient C(n, i) to the sum\n            sum += binomial_coefficient(n, i)\n    return sum"}
{"task_id": "Mbpp/276", "solution": "import math\ndef volume_cylinder(radius, height):\n    # Calculate the volume of the cylinder\n    volume = math.pi * (radius ** 2) * height\n    return volume"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(dict1, n):\n    # Filter the dictionary to only include entries with values >= n\n    result = {key: value for key, value in dict1.items() if value >= n}\n    return result"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(test_tup):\n    \"\"\"\n    This function returns the index of the first tuple element in the tuple.\n    The index indicates the number of elements that occur before the tuple element.\n    \n    Parameters:\n    test_tup (tuple): The tuple to be processed.\n    \n    Returns:\n    int: The index of the first tuple element in the tuple.\n    \"\"\"\n    # Find the index of the first tuple element\n    first_tuple_index = test_tup.index(next(filter(lambda x: isinstance(x, tuple), test_tup)))\n    return first_tuple_index"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    # Calculate the nth decagonal number using the formula\n    return 4 * n * n - 3 * n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, target):\n    # Iterate through the array with index\n    for index, element in enumerate(arr):\n        # Check if the current element matches the target\n        if element == target:\n            return (True, index)\n    # Return (False, -1) if the target is not found\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    # Check if the length of the list is the same as the length of the set of the list\n    # If they are the same, all elements are unique\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    # Subtract each element of the second list from the first list element-wise\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    # Convert the number to a string to iterate over each digit\n    num_str = str(num)\n    # Iterate through each unique digit in the number\n    for digit in set(num_str):\n        # Count the frequency of the current digit in the number\n        if num_str.count(digit) > int(digit):\n            return False\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    # Check if all items in the list are equal to the given element\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "solution": "import re\ndef text_match_two_three(text):\n    # Check if the text contains 'a' followed by two or three 'b's\n    return bool(re.search(r'ab{2,3}', text))"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    # Calculate the maximum subarray sum for a single array\n    max_current = max_global = arr[0]\n    for i in range(1, n):\n        max_current = max(arr[i], max_current + arr[i])\n        if max_current > max_global:\n            max_global = max_current\n\n    # Calculate the total sum of the array\n    total_sum = sum(arr)\n\n    # If k is 1, return the result of the single array case\n    if k == 1:\n        return max_global\n\n    # If the total sum is negative, do not add extra sums\n    if total_sum < 0:\n        return max_global\n\n    # Otherwise, the result is total_sum * (k-1) + max_global\n    return max_global + (k - 1) * total_sum"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    # Calculate the sum of squares of the first n even natural numbers\n    return sum([(2 * i) ** 2 for i in range(1, n + 1)])"}
{"task_id": "Mbpp/290", "solution": "def max_length(lists):\n    # Find the maximum length of the sublists\n    max_len = max(len(sublist) for sublist in lists)\n    # Return the maximum length and the sublist with that length\n    return (max_len, [sublist for sublist in lists if len(sublist) == max_len][0])"}
{"task_id": "Mbpp/292", "solution": "def find(x, y):\n    # Calculate the quotient using integer division\n    quotient = x // y\n    return quotient"}
{"task_id": "Mbpp/293", "solution": "import math\ndef otherside_rightangle(side1, side2):\n    # Calculate the third side using Pythagorean theorem\n    third_side = math.sqrt(side1**2 + side2**2)\n    return third_side"}
{"task_id": "Mbpp/294", "solution": "def max_val(heterogeneous_list):\n    # Initialize the maximum value with the first element of the list\n    max_value = heterogeneous_list[0]\n    \n    # Iterate through each element in the list starting from the second element\n    for element in heterogeneous_list[1:]:\n        # Compare and update max_value based on the type of elements\n        if isinstance(element, (int, float)) and isinstance(max_value, (int, float)):\n            if element > max_value:\n                max_value = element\n        elif isinstance(element, str) and isinstance(max_value, str):\n            if element > max_value:\n                max_value = element\n        # You can add more elif statements for other data types if needed\n        \n    return max_value"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    # Initialize inversion count\n    inv_count = 0\n    # Traverse each element in the array\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            # If there is an inversion, increment the count\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    # Initialize an empty list to store the flattened elements\n    flat_list = []\n    # Iterate through each element in the nested list\n    for element in nested_list:\n        # If the element is a list, extend the flat_list with its elements\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            # If the element is not a list, append it to the flat_list\n            flat_list.append(element)\n    return flat_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(lst):\n    # Initialize a dictionary to keep track of the maximum aggregate for each person\n    max_aggregate_dict = {}\n    \n    # Iterate through each tuple in the list\n    for name, score in lst:\n        # If the name is already in the dictionary, add the score to the existing total\n        if name in max_aggregate_dict:\n            max_aggregate_dict[name] += score\n        else:\n            # Otherwise, initialize the name in the dictionary with the score\n            max_aggregate_dict[name] = score\n    \n    # Find the name with the maximum aggregate score\n    max_name = max(max_aggregate_dict, key=max_aggregate_dict.get)\n    \n    # Return the name with the maximum aggregate score and the score itself as a tuple\n    return (max_name, max_aggregate_dict[max_name])"}
{"task_id": "Mbpp/300", "solution": "def count_binary_seq(n):\n    \"\"\"\n    Counts the number of binary sequences of length 2n where the sum of the first n bits\n    is the same as the sum of the last n bits.\n    \n    :param n: Length of the first (and last) half of the binary sequence.\n    :return: The count of valid binary sequences.\n    \"\"\"\n    return 2 ** (n - 1)"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(dct):\n    # Check if the input is a dictionary\n    if not isinstance(dct, dict):\n        return 0\n    \n    # Handle the case of an empty dictionary\n    if not dct:\n        return 1\n\n    # Recursively find the maximum depth among dictionary values\n    return 1 + max((dict_depth(value) for value in dct.values() if isinstance(value, dict)), default=0)"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    # Extract words starting with 'p' or 'P' and split them into individual words\n    result = [word for phrase in words for word in phrase.split() if word.lower().startswith('p')]\n    # Return the first two words from the result\n    return tuple(result[:2])"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    # Initialize the result with the element at index k\n    result = arr[k]\n    # Initialize the maximum sum of increasing subsequence until index i\n    max_sum = arr[i]\n\n    # Iterate from i to k+1 to find the maximum sum of increasing subsequence\n    for j in range(i, k + 1):\n        if arr[j] > arr[j - 1] or j == i:\n            max_sum = max(max_sum + arr[j], arr[j])\n            result = max(result, max_sum)\n\n    return result"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    # Generate all possible products\n    products = [x * y for x in list1 for y in list2]\n    # Sort the products in descending order and select the top n products\n    largest_products = sorted(products, reverse=True)[:n]\n    return largest_products"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    # Return the larger of the two numbers\n    if a > b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(str1):\n    # Iterate over each character in the string and create a tuple from those characters\n    return tuple(char for char in str1)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    # If n is 0, set the first bit to 1\n    if n == 0:\n        return 1\n    \n    # Find the position of the leftmost unset bit\n    pos = 1\n    while n & (1 << pos):\n        pos += 1\n    \n    return n | (1 << pos)"}
{"task_id": "Mbpp/312", "solution": "import math\ndef volume_cone(radius, height):\n    # Calculate the volume of a cone using the formula V = (1/3)\u03c0r\u00b2h\n    volume = (1/3) * math.pi * radius**2 * height\n    return volume"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    # Initialize the power of 2\n    power = 1\n    # Keep multiplying by 2 until it exceeds n\n    while power * 2 <= n:\n        power *= 2\n    return power"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    # Base cases for the first two Lucas numbers\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    # Recursive call to find the n'th Lucas number\n    return find_lucas(n - 1) + find_lucas(n - 2)"}
{"task_id": "Mbpp/390", "solution": "def add_string(l, s):\n    # Apply the format string to each element in the list\n    res = [s.format(i) for i in l]\n    return res"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(list1, list2, list3):\n    # Create a list of dictionaries using the zipped lists\n    result = [dict(zip([item1], [dict(zip([item2], [item3]))])) for item1, item2, item3 in zip(list1, list2, list3)]\n    return result"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    # Create a dictionary to store the results of subproblems\n    memo = {0: 0, 1: 1}\n    \n    def helper(x):\n        # If the result is already computed, return it\n        if x in memo:\n            return memo[x]\n        # Compute the maximum sum recursively\n        max_sum = max(x, helper(x // 2) + helper(x // 3) + helper(x // 4) + helper(x // 5))\n        # Store the result in the dictionary\n        memo[x] = max_sum\n        return max_sum\n    \n    return helper(n)"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(test_tup):\n    # Check if the length of the tuple is the same as the length of the set created from the tuple\n    # If they are the same, it means there are no duplicates\n    return len(test_tup) == len(set(test_tup))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(input_string):\n    # Create a dictionary to store the count of each character\n    char_count = {}\n    \n    # Count the occurrences of each character in the string\n    for char in input_string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first character with a count of 1\n    for char in input_string:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    # Calculate the median of three numbers\n    if (a <= b <= c) or (c <= b <= a):\n        return b\n    elif (b <= a <= c) or (c <= a <= b):\n        return a\n    else:\n        return c"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(nums):\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(digit) for digit in str(num) if digit.isdigit())  # Filter out non-digit characters\n    return total_sum"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    # Use the built-in min function to find the minimum of two numbers\n    return min(a, b)"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(test_tup, K):\n    # Check if K is in test_tup using the 'in' keyword\n    if K in test_tup:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(n):\n    # Check if the number is even\n    if n % 2 == 0:\n        return False\n    else:\n        return True"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(pairs):\n    # Calculate the product of each tuple and find the minimum product\n    min_product = min([x * y for x, y in pairs])\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\ndef min_val(heterogeneous_list):\n    flat_list = flatten_list(heterogeneous_list)\n    \n    # Initialize the minimum value with the first element of the list\n    min_value = float('inf')\n    \n    # Iterate through each element in the list\n    for element in flat_list:\n        # Check if the element is comparable (numeric value)\n        if isinstance(element, (int, float)):\n            # Compare each numeric element with the current minimum value\n            if element < min_value:\n                # Update the minimum value if a smaller numeric element is found\n                min_value = element\n            \n    return min_value"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(lst):\n    # Use list comprehension to filter out odd numbers\n    return [num for num in lst if num % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(test_list, n):\n    # Extracts the nth element from each tuple in the list\n    res = [sub[n] for sub in test_list]\n    return res"}
{"task_id": "Mbpp/414", "solution": "def overlapping(list1, list2):\n    # Check if any value in list1 exists in list2\n    return any(item in list2 for item in list1)"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    # Initialize the maximum and second maximum values\n    max1 = max2 = float('-inf')\n    # Iterate through the array to find the two largest numbers\n    for x in arr:\n        if x > max1:\n            max2 = max1\n            max1 = x\n        elif x > max2:\n            max2 = x\n    # Return the pair with the highest product\n    return (max1, max2)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(input_list):\n    # Find the element with maximum length using max function with key=len\n    max_element = max(input_list, key=len)\n    return max_element"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(nums):\n    # Round each number in the list and calculate the sum\n    rounded_sum = sum(round(num) for num in nums)\n    # Multiply the sum by the length of the list\n    result = rounded_sum * len(nums)\n    return result"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    # Calculate the cube sum of the first n even natural numbers\n    return sum([(2 * i) ** 3 for i in range(1, n + 1)])"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(test_tuple):\n    # Join the elements of the tuple using the hyphen as a separator\n    res = '-'.join([str(ele) for ele in test_tuple])\n    return res"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    # Calculate the average of the sum of cubes\n    average = sum_of_cubes / n\n    return average"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(test_tup):\n    # Extract the last character of each string in the tuple\n    res = [ele[-1] for ele in test_tup]\n    return res"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    # Initialize a counter to keep track of the occurrences\n    count = 0\n    # Iterate through each sublist in the given list\n    for sublist in lst:\n        # If the current sublist contains the specified element, increment the counter\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(nums):\n    # Use list comprehension to filter odd numbers\n    return [num for num in nums if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    # Split the input date by '-'\n    parts = date.split('-')\n    # Rearrange the parts to the new format\n    new_date = f\"{parts[2]}-{parts[1]}-{parts[0]}\"\n    return new_date"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2  # Initialize the gap size to half of the array length\n    \n    # Start with a big gap, then reduce the gap\n    while gap > 0:\n        for i in range(gap, n):\n            # Save the current element\n            temp = arr[i]\n            j = i\n            # Shift earlier gap-sorted elements up until the correct location for arr[i] is found\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            # Put temp (the original arr[i]) in its correct location\n            arr[j] = temp\n        gap //= 2  # Reduce the gap for the next round\n    \n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    # Use a generator expression to compute the elementwise AND operation\n    result = tuple(a & b for a, b in zip(tuple1, tuple2))\n    return result"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    # The formula for the directrix of a parabola given by ax^2 + bx + c = 0\n    # is y = -1/(4*a) * (b^2 - 4ac)\n    directrix = -1 / (4 * a) * (b**2 - 4 * a * c)\n    return directrix"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, c, height):\n    # Calculate the median length of the trapezium\n    median_length = (a + c) / 2\n    return median_length"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    # Check if the given number is greater than all elements in the array\n    for element in arr:\n        if num <= element:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(n):\n    # Return the last digit of the number\n    return abs(n) % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(nums):\n    # Use list comprehension to filter negative numbers\n    return [num for num in nums if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(string):\n    # Initialize an empty string to store the result\n    result = ''\n    # Iterate over the string, taking every second character starting from index 1\n    for i in range(1, len(string), 2):\n        result += string[i]\n    return result"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    # Convert each number in the list to a string and join them together\n    combined_str = ''.join(str(number) for number in numbers)\n    # Convert the combined string back to an integer\n    return int(combined_str)"}
{"task_id": "Mbpp/440", "solution": "def find_adverb_position(sentence):\n    # Split the sentence into words\n    words = sentence.split()\n    # List of common adverb suffixes\n    adverb_suffixes = ['ly', 'ward', 'wise', 'ways']\n    \n    for i, word in enumerate(words):\n        # Check if the word ends with an adverb suffix\n        for suffix in adverb_suffixes:\n            if word.endswith(suffix):\n                # Find the starting position of the word in the sentence\n                start_pos = sentence.find(word)\n                # Return the starting position, ending position, and the word itself\n                return (start_pos, start_pos + len(word), word)\n    return None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    # Calculate the surface area of a cube\n    return 6 * size * size"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    # Use a list comprehension to iterate over elements of tuples and multiply the elements at the same index.\n    result = tuple((a[0] * b[0], a[1] * b[1]) for a, b in zip(tuple1, tuple2))\n    return result"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(test_tup, test_list):\n    # Initialize the result counter\n    res = 0\n    # Iterate through each element in the test_list\n    for ele in test_list:\n        # Count the occurrences of the current element in the test_tup\n        res += test_tup.count(ele)\n    return res"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    # Use list comprehension to find the cube of each element in the list\n    return [i ** 3 for i in nums]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    \n    p0, p1, p2 = 3, 0, 2\n    sum_perrin = p0 + p1 + p2\n    \n    for i in range(3, n + 1):\n        p_next = p0 + p1\n        sum_perrin += p_next\n        p0, p1, p2 = p1, p2, p_next\n    \n    return sum_perrin"}
{"task_id": "Mbpp/450", "solution": "def extract_string(strings, size):\n    # Use list comprehension to filter strings that match the specified size\n    return [s for s in strings if len(s) == size]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(str1):\n    if isinstance(str1, str):\n        return ''.join(str1.split())\n    elif isinstance(str1, list) and all(isinstance(item, str) for item in str1):\n        return ''.join(''.join(item.split()) for item in str1)\n    else:\n        raise ValueError(\"Input must be a string or a list of strings\")"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    result = 0\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            # Check if the factor is even\n            if i % 2 == 0:\n                result += i\n            if n/i != i and (n/i) % 2 == 0:\n                result += n/i\n    return result"}
{"task_id": "Mbpp/454", "solution": "def text_match_wordz(text):\n    # Check if 'z' is present in the text\n    return 'z' in text"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    # List of months with 31 days\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    # Check if the given month is in the list\n    if month in months_with_31_days:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(str_list):\n    # Reverse each string in the list using a list comprehension\n    return [s[::-1] for s in str_list]"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lst):\n    # Find the sublist with the minimum length\n    min_length = min(len(sublist) for sublist in lst)\n    # Return the first sublist that matches the minimum length\n    for sublist in lst:\n        if len(sublist) == min_length:\n            return sublist"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    # Calculate the area of the rectangle\n    area = length * width\n    return area"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(text):\n    # If the input is not a string, return an empty string\n    if not isinstance(text, str):\n        return \"\"\n    \n    # Initialize an empty string to store the result\n    result = \"\"\n  \n    for char in text:\n        # Check if the character is not uppercase\n        if not char.isupper():\n            # Append the character to the result if it's not uppercase\n            result += char\n    \n    # Return the final result string\n    return result"}
{"task_id": "Mbpp/460", "solution": "def Extract(test_list):\n    # Extract the first element from each sublist\n    res = [sub_list[0] for sub_list in test_list]\n    return res"}
{"task_id": "Mbpp/462", "solution": "from typing import List\ndef combinations_list(arr: List[str]) -> List[List[str]]:\n    \"\"\"\n    Generate all possible combinations of elements in the input list.\n    \n    Args:\n    arr (List[str]): The list of strings to generate combinations from.\n    \n    Returns:\n    List[List[str]]: A list of lists, where each inner list is a possible combination of the input elements.\n    \"\"\"\n    # Base case: if the list is empty, return a list with an empty list\n    if not arr:\n        return [[]]\n    \n    # Recursive case: get all combinations without the first element\n    partial_combinations = combinations_list(arr[1:])\n    \n    # For each combination, add the first element to create new combinations\n    with_first = [[arr[0]] + combination for combination in partial_combinations]\n    \n    # Combine the combinations with and without the first element\n    return partial_combinations + with_first"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    # Initialize variables to store the maximum and minimum products up to the current position\n    max_product = min_product = result = arr[0]\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, len(arr)):\n        # If the current element is negative, swap max and min products\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        # Update the maximum and minimum products up to the current position\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        # Update the result with the maximum product found so far\n        result = max(result, max_product)\n    \n    return result"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(colours):\n    # Filter out any key-value pairs where the value is None\n    return {k: v for k, v in colours.items() if v is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    # Initialize variables to store the maximum and second maximum products\n    max_product = float('-inf')\n    second_max_product = float('-inf')\n    \n    for num in arr:\n        if num > max_product:\n            # Update max_product and second_max_product\n            second_max_product = max_product\n            max_product = num\n        elif num > second_max_product:\n            # Update second_max_product if num is between max_product and second_max_product\n            second_max_product = num\n    \n    # Return the maximum product of the two largest numbers\n    return max_product * second_max_product"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(test_tuple):\n    # Initialize an empty list to store the results\n    result = []\n    # Iterate through the tuple, stopping at the second-to-last element\n    for i in range(len(test_tuple) - 1):\n        # Add the current element and the next element, and append to the result list\n        result.append(test_tuple[i] + test_tuple[i + 1])\n    return tuple(result)"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    # Initialize result to 1\n    result = 1\n    # Multiply each number in the array and take modulo n\n    for num in arr:\n        result = (result * num) % n\n    return result"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    # Check if the list is empty or has only one element\n    if len(lst) <= 1:\n        return True\n    # Sort the list to check for consecutiveness\n    sorted_lst = sorted(lst)\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i] + 1 != sorted_lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(list1, list2):\n    # Convert each tuple in the lists to a sorted tuple to handle unordered elements\n    set1 = {tuple(sorted(t)) for t in list1}\n    set2 = {tuple(sorted(t)) for t in list2}\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Return the intersection as a frozenset to ensure immutability\n    return frozenset(intersection)"}
{"task_id": "Mbpp/474", "solution": "def replace_char(string, old_char, new_char):\n    # Replace occurrences of old_char with new_char in the string\n    return string.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(dict1):\n    # Sort the dictionary by value in descending order and return as a list of tuples\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    # Calculate the sum of the maximum and minimum values in the array\n    return max(arr) + min(arr)"}
{"task_id": "Mbpp/477", "solution": "def is_lower(text):\n    # Convert the given string to lower case\n    return text.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(string):\n    # Use a list comprehension to filter out lowercase letters\n    result = [char for char in string if char.isupper() or not char.isalpha()]\n    # Join the list back into a string and return\n    return ''.join(result)"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(n):\n    # Convert the number to a string and return the first character as an integer\n    return int(str(abs(n))[0])"}
{"task_id": "Mbpp/554", "solution": "def Split(lst):\n    # Use list comprehension to filter out only odd numbers\n    return [num for num in lst if num % 2 != 0]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    # Calculate the sum of the first n natural numbers\n    sum_of_naturals = sum([i for i in range(1, n+1)])\n    # Return the difference between the two sums\n    return sum_of_cubes - sum_of_naturals"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    # Initialize count of pairs with odd XOR\n    count = 0\n    \n    # Iterate through each pair in the array\n    for i in range(n):\n        for j in range(i + 1, n):\n            # Check if the XOR of the pair is odd\n            if ((arr[i] ^ arr[j]) & 1):\n                count += 1\n                \n    return count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    # Toggle the case of each character in the string\n    toggled = ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n    return toggled"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(x, y):\n    # Convert the integers to strings to iterate over each digit\n    x_str = str(x)\n    y_str = str(y)\n    \n    # Determine the length of the longer string\n    max_length = max(len(x_str), len(y_str))\n    \n    # Initialize the sum of differences\n    sum_diff = 0\n    \n    # Iterate over each digit up to the length of the longer string\n    for i in range(max_length):\n        # Get the current digit from each number, defaulting to 0 if out of range\n        digit_x = int(x_str[i]) if i < len(x_str) and x_str != '' else 0\n        digit_y = int(y_str[i]) if i < len(y_str) and y_str != '' else 0\n        \n        # Calculate the absolute difference and add to the sum\n        sum_diff += abs(digit_x - digit_y)\n    \n    return sum_diff"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    # Initialize variables to store the maximum sum so far and the current sum\n    max_so_far = 0\n    max_ending_here = 0\n    \n    # Iterate through the array\n    for i in range(0, n):\n        # Update the current sum\n        max_ending_here = max_ending_here + arr[i]\n        # If current sum is greater than the maximum sum so far, update it\n        if (max_so_far < max_ending_here):\n            max_so_far = max_ending_here\n        # If current sum becomes negative, reset it to 0\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tup1, tup2):\n    # Convert tuples to sets, find the union, and convert back to tuple\n    result = tuple(set(tup1) | set(tup2))\n    # Return the sorted tuple\n    return tuple(sorted(result))"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(test_list):\n    # Find the maximum length among the sublists\n    max_length = max(len(sublist) for sublist in test_list)\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "def extract_values(string):\n    result = []\n    for value in string.split(\",\"):\n        value = value.strip().strip('\" ')\n        result.append(value)\n    return result"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(arr, n):\n    # Calculate the number of possible pairs\n    total_pairs = n * (n - 1) // 2\n\n    # Count the occurrences of each element in the array\n    element_counts = {}\n    for num in arr:\n        if num in element_counts:\n            element_counts[num] += 1\n        else:\n            element_counts[num] = 1\n\n    # Calculate the number of pairs with equal elements\n    equal_pairs = sum(count * (count - 1) // 2 for count in element_counts.values())\n\n    # Subtract the equal pairs from total pairs to get unequal pairs\n    unequal_pairs = total_pairs - equal_pairs\n\n    return unequal_pairs"}
{"task_id": "Mbpp/565", "solution": "def split(string):\n    # Split the string into a list of characters\n    return list(string)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    # Convert the integer to a string, iterate over each character, convert it back to an integer, and sum them up\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    # Iterate through the list and check if each element is less than or equal to the next\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    # Create a list of n empty dictionaries\n    result = [{} for _ in range(n)]\n    return result"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    # Use list comprehension to sort each sublist in the given list of lists\n    sorted_list = [sorted(sublist) for sublist in list_of_lists]\n    return sorted_list"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    # Convert the list to a set to remove duplicates, then back to a list\n    unique_nums = list(set(nums))\n    # Return the list of unique numbers\n    return unique_nums"}
{"task_id": "Mbpp/573", "solution": "def unique_product(lst):\n    # Calculate the product of unique numbers in the list\n    product = 1\n    for num in set(lst):\n        product *= num\n    return product"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(list1, list2):\n    # Check if list2 is a subarray of list1\n    return any(list2 == list1[i:i + len(list2)] for i in range(len(list1) - len(list2) + 1))"}
{"task_id": "Mbpp/577", "solution": "def last_digit_factorial(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    if n == 0 or n == 1:\n        return 1\n\n    last_digit = 1\n    for i in range(2, n + 1):\n        last_digit = (last_digit * i) % 10  # Update the factorial calculation to keep only the last digit\n    return last_digit\n\n# Test cases\ntry:\n    assert last_digit_factorial(4) == 4\n    print(\"Test case passed\")\nexcept AssertionError:\n    print(\"Test case failed\")\n\ntry:\n    assert last_digit_factorial(5) == 0\n    print(\"Test case passed\")\nexcept AssertionError:\n    print(\"Test case failed\")\n\ntry:\n    assert last_digit_factorial(10) == 0\n    print(\"Test case passed\")\nexcept AssertionError:\n    print(\"Test case failed\")\n\ntry:\n    last_digit_factorial(-1)  # This should raise an exception\nexcept ValueError:\n    print(\"Test case passed\")"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate through the lists using the index\n    for i in range(len(list1)):\n        # Append elements from each list in order\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(test_tup1, test_tup2):\n    # Find the symmetric difference between the two tuples\n    res = tuple(set(test_tup1) ^ set(test_tup2))\n    return res"}
{"task_id": "Mbpp/580", "solution": "def extract_even(data):\n    new_data = []\n    for element in data:\n        if isinstance(element, tuple):\n            # Recursively call the function for nested tuples\n            new_data.append(extract_even(element))\n        elif isinstance(element, int) and element % 2 != 0:\n            # Skip odd integers\n            continue\n        else:\n            new_data.append(element)\n    return tuple(new_data) if isinstance(data, tuple) else new_data"}
{"task_id": "Mbpp/581", "solution": "def surface_Area(length, width):\n    # Calculate the surface area of a rectangular prism\n    return 2 * (length * width + length * width + length * width)"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(0, n):\n        result = result * 2 * (2 * i + 1) // (i + 2)\n    return result"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(data, n):\n    # Sort the data based on the price in descending order\n    sorted_data = sorted(data, key=lambda x: x['price'], reverse=True)\n    # Return the first n items from the sorted list\n    return sorted_data[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    # Split the array at the nth element and add the first part to the end\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(list1):\n    # Convert the list to a tuple\n    return tuple(list1)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    # Check if the list is empty or contains a single element\n    if len(nums) <= 1:\n        return 0\n    # Calculate the difference between the max and min values in the list\n    return max(nums) - min(nums)"}
{"task_id": "Mbpp/589", "solution": "import math\ndef perfect_squares(start, end):\n    # Adjust loop limits for negative ranges\n    start_range = int(math.sqrt(start)) if start > 0 else 0\n    end_range = int(math.sqrt(end)) + 1 if end > 0 else 0\n    \n    result = [i ** 2 for i in range(start_range, end_range) if i ** 2 >= start and i ** 2 <= end]\n    return result"}
{"task_id": "Mbpp/590", "solution": "import cmath\ndef polar_rect(r, theta):\n    # Convert polar coordinates to rectangular coordinates\n    z = cmath.rect(r, theta)\n    return (z.real, z.imag), z"}
{"task_id": "Mbpp/591", "solution": "def swap_List(input_list):\n    # Swap the first and last elements of the list\n    input_list[0], input_list[-1] = input_list[-1], input_list[0]\n    return input_list"}
{"task_id": "Mbpp/592", "solution": "import math\ndef binomial_coefficient(n, r):\n    return math.factorial(n) // (math.factorial(r) * math.factorial(n - r))\ndef sum_Of_product(n):\n    # Initialize the sum to 0\n    total_sum = 0\n    # Calculate the sum of the product of consecutive binomial coefficients\n    for i in range(n):\n        total_sum += binomial_coefficient(n, i) * binomial_coefficient(n, i+1)\n    return total_sum"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    # Split the IP address into its components\n    ip_parts = ip.split('.')\n    \n    # Remove leading zeros from each part and join them back with '.'\n    cleaned_parts = []\n    for part in ip_parts:\n        if part.startswith('0'):\n            cleaned_parts.append(str(int(part)))\n        else:\n            cleaned_parts.append(part)\n    \n    # Reconstruct the IP address\n    return '.'.join(cleaned_parts)"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    # Initialize variables to store the first even and first odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and first odd numbers\n    for num in lst:\n        if num % 2 == 0:  # Check if the number is even\n            if first_even is None:\n                first_even = num\n        else:  # The number is odd\n            if first_odd is None:\n                first_odd = num\n    \n    # Calculate the difference between the first even and first odd numbers\n    return first_even - first_odd if first_even is not None and first_odd is not None else None"}
{"task_id": "Mbpp/596", "solution": "import sys\ndef tuple_size(test_tuple):\n    # Calculate the size of the tuple in bytes\n    return sys.getsizeof(test_tuple)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Finds the k-th smallest element in the union of two sorted arrays.\n    \n    Parameters:\n    arr1 (List[int]): The first sorted array.\n    arr2 (List[int]): The second sorted array.\n    k (int): The k-th position to find in the merged array.\n    \n    Returns:\n    int: The k-th smallest element in the merged array.\n    \"\"\"\n    # Ensure arr1 is the smaller array\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n\n    # Initialize the search space\n    low, high = 0, len(arr1)\n\n    while low <= high:\n        mid1 = (low + high) // 2\n        mid2 = k - mid1 - 1\n\n        # Handle edge cases\n        if mid1 < 0:\n            left1 = float('-inf')\n        elif mid1 >= len(arr1):\n            left1 = float('inf')\n        else:\n            left1 = arr1[mid1]\n\n        if mid2 < 0:\n            left2 = float('-inf')\n        elif mid2 >= len(arr2):\n            left2 = float('inf')\n        else:\n            left2 = arr2[mid2]\n\n        if left1 <= left2:\n            if mid1 == len(arr1) - 1 or k == len(arr1) + len(arr2):\n                return arr2[mid2]\n            else:\n                k -= mid1 + 1\n                low = mid1 + 1\n        else:\n            if mid2 == len(arr2) - 1 or k == len(arr1) + len(arr2):\n                return arr1[mid1]\n            else:\n                k -= mid2 + 1\n                high = mid1 - 1"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(n):\n    # Calculate the number of digits in the number\n    num_digits = len(str(n))\n    # Calculate the sum of each digit raised to the power of the number of digits\n    sum_of_powers = sum([int(digit) ** num_digits for digit in str(n)])\n    # Check if the sum of powers is equal to the original number\n    return sum_of_powers == n"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    # Calculate the sum of the first n natural numbers\n    total_sum = n * (n + 1) // 2\n    # Calculate the average of the first n natural numbers\n    average = total_sum / n\n    return total_sum, average"}
{"task_id": "Mbpp/600", "solution": "def is_Even(n):\n    # Check if the number is divisible by 2\n    return n % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    seen_chars = set()\n\n    for char in s:\n        if char in seen_chars:\n            return char\n        seen_chars.add(char)\n\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    \"\"\"\n    Generates a list of ludic numbers up to the given integer n.\n    \n    Parameters:\n    n (int): The upper limit for generating ludic numbers.\n    \n    Returns:\n    list: A list of ludic numbers up to n.\n    \"\"\"\n    numbers = list(range(1, n + 1))\n    ludics = []\n\n    while numbers:\n        ludic_number = numbers[0]\n        ludics.append(ludic_number)\n        numbers = [num for num in numbers if num % ludic_number != 0]\n\n    return ludics"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(str1):\n    # Split the string into words, reverse the list of words, and join them back with spaces\n    return ' '.join(str1.split()[::-1])"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    # Check if n is less than 2, which are not prime numbers\n    if n < 2:\n        return False\n    # Check for factors from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "solution": "def radian_degree(degrees):\n    # Convert degrees to radians\n    radians = degrees * (3.141592653589793 / 180)\n    return radians"}
{"task_id": "Mbpp/607", "solution": "import re\ndef find_literals(text, pattern):\n    # Use re.search to find the pattern in the text\n    match = re.search(pattern, text)\n    # If a match is found, return the matched substring and its start and end indices\n    if match:\n        return (match.group(), match.start(), match.end())\n    # If no match is found, return None\n    else:\n        return None"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    # Create a 2D array to store Bell numbers\n    bell = [[0 for i in range(n+1)] for i in range(n+1)]\n    \n    # Base case\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        # Explicitly fill for small n\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    # Return the nth Bell number\n    return bell[n][0]"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(arr, k):\n    # Return the list excluding the k'th element\n    return arr[:k] + arr[k+1:]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    # Initialize the max value to a very low number\n    max_value = float('-inf')\n    # Iterate through each row in the matrix\n    for row in matrix:\n        # Check if the current row has enough elements\n        if n < len(row):\n            # Update max_value if the current element in the nth column is greater\n            max_value = max(max_value, row[n])\n    return max_value"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    # Initialize two empty lists to hold the first and second elements\n    first_elements = []\n    second_elements = []\n    \n    # Iterate through each sublist in the input list\n    for sub_list in lst:\n        # Append the first element of the sublist to the first_elements list\n        first_elements.append(sub_list[0])\n        # Append the second element of the sublist to the second_elements list\n        second_elements.append(sub_list[1])\n    \n    # Return a list containing the two lists: first_elements and second_elements\n    return [first_elements, second_elements]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(lst):\n    # Calculate the sum of all elements in the tuple list\n    total_sum = sum(sum(t) for t in lst)\n    return total_sum"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(test_cases):\n    \"\"\"\n    Calculate the average of each tuple in the test_cases list.\n    \n    Parameters:\n    test_cases (tuple of tuples): A tuple containing multiple tuples of integers.\n    \n    Returns:\n    list: A list of floats representing the average of each inner tuple.\n    \"\"\"\n    averages = []\n    for t in test_cases:\n        sum_of_elements = sum(t)\n        count_of_elements = len(t)\n        averages.append(sum_of_elements / count_of_elements)\n    return averages"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple_a, tuple_b):\n    # Use a generator expression to perform element-wise modulo operation\n    result = tuple(a % b for a, b in zip(tuple_a, tuple_b))\n    return result"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    # Check if lists are of the same length\n    if len(list1) != len(list2):\n        return \"Lists are of different lengths.\"\n    # Use a list comprehension to divide elements of list1 by elements of list2\n    result = [i / j for i, j in zip(list1, list2)]\n    return result"}
{"task_id": "Mbpp/619", "solution": "def move_num(str1):\n    # Extract all non-digit characters and all digit characters separately\n    non_digit = [char for char in str1 if not char.isdigit()]\n    digits = [char for char in str1 if char.isdigit()]\n    # Concatenate non-digit characters with digit characters\n    return ''.join(non_digit + digits)"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(arr):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Initialize a list to store the largest subset\n    subset = []\n    # Iterate through the sorted array\n    for num in arr:\n        # If the current number is divisible by any number in the subset, skip it\n        if not any(num % x == 0 or x % num == 0 for x in subset):\n            subset.append(num)\n    # Return the size of the largest subset\n    return len(subset)"}
{"task_id": "Mbpp/622", "solution": "def get_median(l1, l2, n):\n    sorted_elements = []\n    i = j = 0\n\n    # Merge both lists while maintaining sorted order\n    while i < n and j < n:\n        if l1[i] <= l2[j]:\n            sorted_elements.append(l1[i])\n            i += 1\n        else:\n            sorted_elements.append(l2[j])\n            j += 1\n\n    # Append remaining elements from either list\n    while i < n:\n        sorted_elements.append(l1[i])\n        i += 1\n    while j < n:\n        sorted_elements.append(l2[j])\n        j += 1\n\n    # Calculate median\n    if n % 2 == 0:\n        median = (sorted_elements[n // 2 - 1] + sorted_elements[n // 2]) / 2\n    else:\n        median = sorted_elements[n // 2]\n\n    return median"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(lst, n):\n    # Use list comprehension to raise each element to the power of n\n    return [i**n for i in lst]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(string):\n    # Convert the given string to uppercase\n    return string.upper()"}
{"task_id": "Mbpp/626", "solution": "def triangle_area(radius):\n    # Return None for negative radius as radius cannot be negative\n    if radius < 0:\n        return None\n    # Area of the largest inscribed triangle in a semicircle is (radius^2)\n    return radius ** 2"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    # Replace all spaces in the string with '%20'\n    return string.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "solution": "def Split(numbers):\n    # Use list comprehension to filter even numbers\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(point):\n    # Extract the x and y coordinates from the input tuple\n    x, y = point\n    # Generate all adjacent coordinates as tuples\n    adjacent_coords = [\n        (x - 1, y - 1), (x - 1, y), (x - 1, y + 1),\n        (x, y - 1), (x, y + 1),\n        (x + 1, y - 1), (x + 1, y), (x + 1, y + 1)\n    ]\n    return adjacent_coords"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(str1):\n    # Replace spaces with underscores and vice versa\n    result = ''\n    for char in str1:\n        if char == ' ':\n            result += '_'\n        else:\n            result += ' ' if char == '_' else char\n    return result"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    # Create a new list to store non-zero elements\n    non_zero = [element for element in lst if element != 0]\n    # Append zeros to the end of the non-zero list\n    non_zero.extend([0] * lst.count(0))\n    return non_zero"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(arr, n): \n    # Calculate the sum of XOR for all pairs\n    xor_sum = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(nums):\n    # Function to heapify a subtree rooted with node i which is an index in nums[]\n    def heapify(nums, n, i):\n        largest = i  # Initialize largest as root\n        left = 2 * i + 1  # left = 2*i + 1\n        right = 2 * i + 2  # right = 2*i + 2\n\n        # See if left child of root exists and is greater than root\n        if left < n and nums[i] < nums[left]:\n            largest = left\n\n        # See if right child of root exists and is greater than root\n        if right < n and nums[largest] < nums[right]:\n            largest = right\n\n        # Change root, if needed\n        if largest != i:\n            nums[i], nums[largest] = nums[largest], nums[i]  # swap\n\n            # Heapify the root.\n            heapify(nums, n, largest)\n\n    # Build a maxheap.\n    n = len(nums)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(nums, n, i)\n\n    # One by one extract elements\n    for i in range(n - 1, 0, -1):\n        nums[i], nums[0] = nums[0], nums[i]  # swap\n        heapify(nums, i, 0)\n\n    return nums"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(cost_price, selling_price):\n    # Check if cost price is equal to selling price\n    if cost_price == selling_price:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(velocity, temperature):\n    # Calculate wind chill index using the formula\n    if temperature <= 10 and velocity >= 3:\n        wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (velocity ** 0.16) + 0.3965 * temperature * (velocity ** 0.16)\n        return round(wind_chill_index)\n    else:\n        return temperature"}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    # Filter names that start with a lowercase letter and sum their lengths\n    return sum(len(name) for name in names if name[0].islower())"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    # Calculate the nth nonagonal number using the formula\n    nonagonal_number = (7 * n * n - 5 * n) // 2\n    return nonagonal_number"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    # Check if 'z' is present in the string excluding the first and last character\n    return 'z' in text[1:-1]"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    # Reverse the elements from the start of the array up to the position k\n    arr[:k] = reversed(arr[:k])\n    return arr"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(test_tuple, test_dict):\n    # Add the dictionary to the tuple\n    result = test_tuple + (test_dict,)\n    return result"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    if n == 0:\n        return 0\n\n    # Initialize the DP table\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n\n    # Fill the first row\n    for j in range(1, n):\n        dp[0][j] = dp[0][j - 1] + matrix[0][j]\n\n    # Fill the first column\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + matrix[i][0]\n\n    # Fill the rest of the dp table\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j]\n\n    # Calculate the maximum average path\n    total_sum = dp[n - 1][n - 1]\n    total_cells = 0\n    for row in dp:\n        total_cells += len(row)\n\n    max_avg = total_sum / total_cells\n\n    return max_avg"}
{"task_id": "Mbpp/722", "solution": "def filter_data(data, min_height, max_weight):\n    # Filter the dictionary based on the given height and weight criteria\n    filtered = {name: (height, weight) for name, (height, weight) in data.items() \n                if min_height <= height <= max_weight}\n    return filtered"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    # Initialize a counter to keep track of the indices with matching values\n    count = 0\n    # Iterate through the lists and compare elements at each index\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    # Calculate the power of the base\n    num = base ** power\n    # Convert the number to a string to iterate over each digit\n    num_str = str(num)\n    # Calculate the sum of the digits\n    sum_of_digits = sum(int(digit) for digit in num_str)\n    return sum_of_digits"}
{"task_id": "Mbpp/725", "solution": "def extract_quotation(str1):\n    result = []\n    inside_quotes = False\n    current_word = \"\"\n    \n    for char in str1:\n        if char == '\"':\n            inside_quotes = not inside_quotes\n            if not inside_quotes and current_word:\n                result.append(current_word)\n                current_word = \"\"\n        elif inside_quotes:\n            current_word += char\n            \n    return result"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate through the tuple, stopping at the second last element\n    for i in range(len(t) - 1):\n        # Multiply the current element with the next one and append to the result list\n        result.append(t[i] * t[i + 1])\n    # Convert the result list to a tuple and return it\n    return tuple(result)"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    # Check if both lists have the same length\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length.\")\n    # Sum the corresponding elements of the lists\n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    # Initialize an empty list to store the result\n    result = []\n    # Append the first element of the list to the result\n    if lst:\n        result.append(lst[0])\n    \n    # Iterate through the list starting from the second element\n    for i in range(1, len(lst)):\n        # If the current element is not the same as the last element in the result, append it\n        if lst[i] != lst[i-1]:\n            result.append(lst[i])\n    \n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\ndef lateralsurface_cone(r, h):\n    # Calculate the lateral surface area of a cone\n    lateral_surface_area = math.pi * r * math.sqrt(r * r + h * h)\n    return lateral_surface_area"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(input_str):\n    # Replace spaces, commas, and dots with a colon\n    result = input_str.replace(' ', ':').replace(',', ':').replace('.', ':')\n    return result"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    # Initialize the start and end pointers\n    start, end = 0, len(arr) - 1\n    \n    # Loop until the start pointer exceeds the end pointer\n    while start <= end:\n        mid = start + (end - start) // 2  # Calculate the middle index\n        \n        # Check if the middle element is the target\n        if arr[mid] == target:\n            # If it's the first element or the previous element is not the target, return mid\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            else:\n                # Otherwise, continue searching in the left half\n                end = mid - 1\n        elif arr[mid] < target:\n            # If the middle element is less than the target, search in the right half\n            start = mid + 1\n        else:\n            # If the middle element is greater than the target, search in the left half\n            end = mid - 1\n    \n    # If the target is not found, return -1\n    return -1"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    # Initialize the sum to 0\n    sum_prod = 0\n    # Iterate over all possible subarray lengths\n    for i in range(len(arr)):\n        product = 1\n        for j in range(i, len(arr)):\n            product *= arr[j]\n            sum_prod += product\n    return sum_prod"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    \"\"\"\n    Toggles all bits in between the first and last bits of the number n,\n    while maintaining the first and last bits as they are.\n    \n    Parameters:\n    n (int): The number whose middle bits are to be toggled.\n    \n    Returns:\n    int: The number with the middle bits toggled.\n    \"\"\"\n    if n < 3:  # Checking if the number is less than 3 bits\n        return n\n    \n    # Create a mask that has all bits set except the first and last\n    mask = (1 << (n.bit_length() - 2)) - 1  # Create a mask with all bits set, except first and last\n    \n    # Toggle the middle bits using XOR\n    result = n ^ mask\n    \n    return result"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(lst, num):\n    # Iterate through the list to find the correct insertion point\n    for i in range(len(lst)):\n        if lst[i] >= num:\n            return i\n    # If the number is greater than all elements, return the length of the list\n    return len(lst)"}
{"task_id": "Mbpp/737", "solution": "import re\ndef check_str(string):\n    # Check if the string starts with a vowel using regex\n    return bool(re.match(r'^[aeiouAEIOU]', string))"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    # Calculate the first n-digit triangular number\n    start = n * (n - 1) // 2 + 1\n    # Calculate the last n-digit triangular number\n    end = (10 ** (n - 1)) * (10 ** (n - 1) + 1) // 2\n    # Find the smallest n-digit triangular number\n    for i in range(start, end + 1):\n        if i * (i + 1) // 2 >= 10 ** (n - 1) and i * (i + 1) // 2 <= 10 ** n:\n            return i\n    return -1"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(test_tup):\n    # Initialize an empty dictionary\n    res = {}\n    # Iterate through the tuple, stepping by 2 to get key-value pairs\n    for idx in range(0, len(test_tup) - 1, 2):\n        res[test_tup[idx]] = test_tup[idx + 1]\n    return res"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(str1):\n    # Check if the string is empty or has only one character\n    if len(str1) <= 1:\n        return True\n    # Compare the first character with the rest of the string\n    for i in range(1, len(str1)):\n        if str1[0] != str1[i]:\n            return False\n    return True"}
{"task_id": "Mbpp/742", "solution": "import math\ndef area_tetrahedron(side_length):\n    # Calculate the area of a tetrahedron given the side length\n    area = math.sqrt(3) * (side_length ** 2)\n    return area"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    # Handle the case where the list is empty or n is 0\n    if not lst or n == 0:\n        return lst\n    # Normalize the rotation count in case it's greater than the list length\n    n = n % len(lst)\n    # Rotate the list by slicing and concatenating\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "solution": "def check_none(test_tup):\n    # Check if any element in the tuple is None\n    return any(item is None for item in test_tup)"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    # Add a check to handle the case where startnum is greater than endnum\n    if startnum > endnum:\n        return []\n\n    # Iterate through the range from startnum to endnum (inclusive)\n    result = [num for num in range(startnum, endnum + 1) if all(num % int(digit) == 0 for digit in str(num))]\n    return result"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(str1):\n    words = []\n    current_word = \"\"\n    for char in str1:\n        if char.isupper():\n            if current_word:\n                words.append(current_word)\n                current_word = char\n            else:\n                current_word += char\n        else:\n            current_word += char\n    if current_word:\n        words.append(current_word)\n    return ' '.join(words)"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(str_list):\n    \"\"\"\n    Sorts a list of strings representing numeric values in ascending order.\n    \n    Parameters:\n    str_list (list): A list of strings where each string is a numeric value.\n    \n    Returns:\n    list: A list of strings sorted based on their numeric values.\n    \"\"\"\n    # Convert each string in the list to an integer for proper numeric sorting\n    numeric_list = [int(num_str) for num_str in str_list]\n    # Sort the list of integers\n    numeric_list.sort()\n    # Convert the sorted integers back to strings\n    sorted_str_list = [str(num) for num in numeric_list]\n    return sorted_str_list"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tpl):\n    # Extend the list with the elements of the tuple\n    lst.extend(tpl)\n    return lst"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    # Iterate through the array to check the heap property\n    for i in range(len(arr)):\n        # Check if the left child index is within bounds\n        if (2 * i + 1) < len(arr) and arr[i] > arr[2 * i + 1]:\n            return False\n        # Check if the right child index is within bounds\n        if (2 * i + 2) < len(arr) and arr[i] > arr[2 * i + 2]:\n            return False\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # Recursive calculation of Jacobsthal numbers\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)"}
{"task_id": "Mbpp/753", "solution": "def min_k(test_list, K): \n    # Sort the list of tuples based on the second element of each tuple\n    # and then select the first K elements from the sorted list.\n    res = sorted(test_list, key=lambda x: x[1])[:K] \n    return res"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    # Initialize an empty list to store common elements\n    common_elements = []\n    # Determine the minimum length of the three lists\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    # Iterate through the lists up to the minimum length\n    for i in range(min_length):\n        # Check if elements at the current index are the same in all three lists\n        if l1[i] == l2[i] == l3[i]:\n            # If so, add the element to the common_elements list\n            common_elements.append(l1[i])\n    \n    # Return the list of common elements\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(nums):\n    # Initialize the smallest and second smallest to infinity\n    smallest = second_smallest = float('inf')\n    \n    for num in nums:\n        if num < smallest:\n            # Update second smallest before updating smallest\n            second_smallest = smallest\n            smallest = num\n        elif smallest < num < second_smallest:\n            # Update second smallest if num is between smallest and second smallest\n            second_smallest = num\n    \n    # If second smallest is still infinity, it means there wasn't a second unique smallest number\n    return second_smallest if second_smallest != float('inf') else None"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(test_list):\n    # Initialize the count of reverse pairs\n    res = 0\n    # Create a set to store the seen strings\n    seen = set()\n    \n    # Iterate through each string in the list\n    for ele in test_list:\n        # Check if the reverse of the current string is in the seen set\n        if ele[::-1] in seen:\n            # Increment the count of reverse pairs\n            res += 1\n        else:\n            # Add the original string to the seen set\n            seen.add(ele)\n    \n    return res"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    # Initialize a dictionary to store the count of each tuple\n    count_dict = {}\n    # Iterate through each sublist in the provided list\n    for sublist in lst:\n        # Convert the sublist to a tuple and count its occurrences\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(string_num):\n    try:\n        float_num = float(string_num)\n        # Check if the float number has at most 2 decimal places\n        return float_num == round(float_num, 2)\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(test_list):\n    # Check if all elements in the list are the same by comparing the set length\n    return len(set(test_list)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    # Check if the month has 30 days\n    if month in {4, 6, 9, 11}:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr):\n    # Sort the array to make it easier to find the minimum difference\n    arr.sort()\n    \n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Iterate through the array and find the minimum difference between consecutive elements\n    for i in range(len(arr)-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    \n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(string):\n    # Initialize a counter to count digits\n    count = 0\n    # Iterate through each character in the string\n    for char in string:\n        # Check if the character is a digit\n        if char.isdigit():\n            count += 1\n    return count"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    count, num = 0, 1\n    \n    while count < n:\n        if bin(num).count('1') == 1:  # Check if the number is a power of 2\n            count += 1\n        if count == n:\n            return num\n        num += 1"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(input_list):\n    # Initialize an empty list to store the pairs\n    pairs = []\n    # Iterate through the list, stopping at the second-to-last element\n    for i in range(len(input_list) - 1):\n        # Append the current element and the next element as a tuple to the pairs list\n        pairs.append((input_list[i], input_list[i + 1]))\n    return pairs"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(arr, target_sum):\n    \"\"\"\n    Counts the number of pairs in the list whose sum is equal to target_sum.\n\n    :param arr: List of integers.\n    :param target_sum: The target sum for pairs.\n    :return: The count of pairs whose sum is equal to target_sum.\n    \"\"\"\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == target_sum:\n                count += 1\n    return count"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    # Find elements in list1 but not in list2\n    result = [element for element in list1 if element not in list2]\n    # Sort the result to match the expected order\n    result.sort()\n    return result"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    # Calculate the sum of the fourth power of the first n odd natural numbers\n    return sum(i**4 for i in range(1, 2*n, 2))"}
{"task_id": "Mbpp/771", "solution": "def check_expression(exp):\n    stack = []  # Using a stack to keep track of opening brackets\n    brackets_map = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n\n    for char in exp:\n        if char in brackets_map.values():\n            stack.append(char)\n        elif char in brackets_map.keys():\n            if not stack or brackets_map[char] != stack.pop():\n                return False\n\n    return len(stack) == 0"}
{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    # Split the string into words\n    words = string.split()\n    # Filter out words with length k\n    filtered_words = [word for word in words if len(word) != k]\n    # Join the filtered words back into a string\n    result = ' '.join(filtered_words)\n    return result"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(s1, s2):\n    # Check if s2 is a substring of s1\n    if s2 in s1:\n        # Find the starting index of the first occurrence\n        start_index = s1.index(s2)\n        # Return the substring, its first occurrence, and its position\n        return (s2, start_index, start_index + len(s2))\n    else:\n        # Return None if there is no match\n        return None"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    # Iterate through the list, checking only odd indices\n    for i in range(1, len(lst), 2):\n        # Check if the number at the current odd index is not odd\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    # Calculate the sum of the elements in the list\n    return sum(lst)"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    # Initialize an empty list to store the result\n    result = []\n    # Initialize an empty list to track the current consecutive elements\n    temp = []\n    \n    # Iterate through the list\n    for elem in lst:\n        # If temp is empty or the current element is the same as the last one in temp, add it to temp\n        if not temp or elem == temp[-1]:\n            temp.append(elem)\n        else:\n            # Otherwise, add the temp list to result and reset temp with the current element\n            result.append(temp)\n            temp = [elem]\n    \n    # Add the last temp list to result\n    result.append(temp)\n    \n    return result"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(lst):\n    result = []\n    for x in lst:\n        for y in lst:\n            if x != y:\n                combination = (x[0] + y[0], x[1] + y[1])\n                result.append(combination)\n    return result"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    # Initialize count of divisors\n    count = 0\n    # Iterate from 1 to the square root of n\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:  # If i is a divisor\n            count += 1  # Increment count\n            if i != n // i:  # Check if n/i is a different divisor\n                count += 1  # Increment count if so\n    return count % 2 == 0  # Return True if count is even"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    # Initialize the sum to 0\n    total_sum = 0\n    # Calculate the number of elements in the array\n    n = len(arr)\n    # Iterate over all possible starting points of subarrays\n    for i in range(n):\n        # Calculate the sum of the current subarray\n        current_sum = 0\n        # Iterate over all possible ending points of subarrays starting from i\n        for j in range(i, n):\n            # Include the current element in the subarray\n            current_sum += arr[j]\n            # Check if the length of the subarray is odd\n            if (j - i + 1) % 2 == 1:\n                # Add the sum of the current subarray to the total sum\n                total_sum += current_sum\n    return total_sum"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        # Stop iteration if both first even and odd numbers are found\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Calculate the product of the first even and odd numbers\n    return first_even * first_odd if first_even is not None and first_odd is not None else None"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    # Remove the parentheses and split the string by commas\n    tuple_str = tuple_str.strip('()').split(',')\n    # Convert each element to an integer and return as a tuple\n    return tuple(int(num.strip()) for num in tuple_str)"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(a, k):\n    # Iterate through the list to find the right insertion point\n    for i in range(len(a)):\n        if a[i] >= k:\n            return i\n    # If k is greater than all elements, return the length of the list\n    return len(a)"}
{"task_id": "Mbpp/787", "solution": "def text_match_three(text):\n    # Check if the text contains 'a' followed by exactly three 'b's\n    return bool(len(text) >= 4 and text[0] == 'a' and text[1:4] == 'bbb')"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(list1, str1):\n    # Create a new tuple by combining the elements of the list and the string\n    result = tuple(list1) + (str1,)\n    return result"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    # Check if the list is empty\n    if not lst:\n        return True\n\n    # Iterate through the list, checking only even indices\n    for i in range(0, len(lst), 2):\n        # Check if the index is within the list length\n        if i < len(lst) and lst[i] % 2 != 0:\n            return False\n\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(test_tup):\n    res = []\n    for sub in test_tup:\n        if isinstance(sub, tuple):\n            res.extend(remove_nested(sub))\n        else:\n            res.append(sub)\n    return tuple(res)"}
{"task_id": "Mbpp/792", "solution": "def count_list(lists):\n    count = 0\n    for item in lists:\n        if isinstance(item, list):\n            count += 1 + count_list(item)  # Recursively count nested lists\n        else:\n            count += 1\n    return count"}
{"task_id": "Mbpp/793", "solution": "def last(arr, x):\n    # Initialize the result variable to -1\n    result = -1\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the current element matches the target element, update result\n        if arr[i] == x:\n            result = i\n    # Return the last position of the target element\n    return result"}
{"task_id": "Mbpp/794", "solution": "def text_starta_endb(text):\n    # Check if the text starts with 'a' and ends with 'b',\n    # but also check if 'a' is followed by anything before 'b'\n    if text.startswith('a') and text.endswith('b') and 'a' in text[:text.rfind('b')]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dict1):\n    # Calculate the sum of all values in the dictionary\n    sum_values = sum(dict1.values())\n    return sum_values"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    # Calculate the sum of all odd numbers in the range [l, r]\n    return sum([i for i in range(l, r + 1) if i % 2 != 0])"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    # Calculate the sum of the array elements\n    return sum(arr)"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    # Ensure the number is within 32-bit range\n    n &= 0xFFFFFFFF\n    \n    # Perform the left rotation\n    d = d % 32  # To handle cases where d > 32\n    rotated_number = ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\n    \n    return rotated_number"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(str1):\n    # Remove all whitespaces from the string using replace method\n    result = str1.replace(' ', '')\n    return result"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    # Calculate the number of equal numbers among the three integers\n    count = sum([a == b, b == c, a == c])\n    return count"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square(n):\n    # Check if n is less than 0, it cannot be a perfect square\n    if n < 0:\n        return False\n    # Calculate the square root of n and check if it's an integer\n    root = n ** 0.5\n    return root.is_integer()"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(nums):\n    # Iterate through the list and check if any number is even\n    for num in nums:\n        if num % 2 == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lists):\n    # Find the list with the maximum sum of its elements\n    max_list = max(lists, key=sum)\n    return max_list"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    # Initialize variables to track the maximum length and current length of uppercase letters\n    max_length = 0\n    current_length = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Increment the current length of uppercase letters\n            current_length += 1\n        else:\n            # Update the maximum length if the current length is greater\n            max_length = max(max_length, current_length)\n            # Reset the current length\n            current_length = 0\n    \n    # Final check to update the maximum length in case the string ends with uppercase letters\n    max_length = max(max_length, current_length)\n    \n    return max_length"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    # Iterate through the list to find the first odd number\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None  # Return None if no odd number is found"}
{"task_id": "Mbpp/808", "solution": "def check_K(test_tup, K):\n    # Check if K is in the tuple and return the result\n    return K in test_tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(test_tup1, test_tup2):\n    # Check if all elements in test_tup2 are less than the corresponding elements in test_tup1\n    res = all(el2 < el1 for el1, el2 in zip(test_tup1, test_tup2))\n    return res"}
